/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { Amount } from './common'

export interface PaymentIntent {
  /**
   *	Action to execute for the given Payment.
   *
   *
   */
  readonly actions: PaymentIntentAction[]
}
/**
 *	Depending on the action specified, Checkout requests the [payment service provider](/connectors-and-applications#supported-psps-payment-integration-types-and-payment-methods) (PSP) or gift card management system to capture, refund, or cancel the authorization for the given Payment.
 *
 */
export type PaymentIntentAction =
  | PaymentIntentCancelAction
  | PaymentIntentCaptureAction
  | PaymentIntentRefundAction
  | PaymentIntentReverseAction
export interface IPaymentIntentAction {
  /**
   *	Action to execute for the given [Payment](/../api/projects/payments#payment).
   *
   *
   */
  readonly action: PaymentIntentOperation
}
/**
 *	Requests to [cancel the authorization](/payments-lifecycle#authorization-cancellation) for a Payment. Checkout will cancel the [Payment](/../api/projects/payments#payment) and will request the PSP or gift card management system to proceed with the financial process to cancel the authorization.
 *
 *	You cannot request to cancel the authorization for a Payment that has already been [captured](/payments-lifecycle#payment-capture).
 *
 */
export interface PaymentIntentCancelAction extends IPaymentIntentAction {
  readonly action: 'cancelPayment'
  /**
   *	A merchant-defined identifier associated with the [Payment](/../api/projects/payments#payment) to track and reconcile the [Payment Intent Action](ctp:checkout:type:PaymentIntentAction) on the merchant's side. For example, an invoice number.
   *
   *
   */
  readonly merchantReference?: string
}
/**
 *	Requests to [capture](/payments-lifecycle#payment-capture) the given amount from the customer. Checkout will request the PSP or gift card management system to proceed with the financial process to capture the amount.
 *
 */
export interface PaymentIntentCaptureAction extends IPaymentIntentAction {
  readonly action: 'capturePayment'
  /**
   *	Amount to be captured. It must be less than or equal to the [authorized](/payments-lifecycle#authorization) amount.
   *
   *
   */
  readonly amount: Amount
  /**
   *	A merchant-defined identifier associated with the [Payment](/../api/projects/payments#payment) to track and reconcile the [Payment Intent Action](ctp:checkout:type:PaymentIntentAction) on the merchant's side. For example, an invoice number.
   *
   *
   */
  readonly merchantReference?: string
}
/**
 *	The possible values for a [Payment Intent Action](ctp:checkout:type:PaymentIntentAction).
 *
 */
export enum PaymentIntentOperationValues {
  CancelPayment = 'cancelPayment',
  CapturePayment = 'capturePayment',
  RefundPayment = 'refundPayment',
  ReversePayment = 'reversePayment',
}

export type PaymentIntentOperation =
  | 'cancelPayment'
  | 'capturePayment'
  | 'refundPayment'
  | 'reversePayment'
  | (string & {})
/**
 *	Requests to [refund](/payments-lifecycle#refund) the given amount to the customer. Checkout will request the PSP or gift card management system to proceed with the financial process to refund the amount.
 *
 */
export interface PaymentIntentRefundAction extends IPaymentIntentAction {
  readonly action: 'refundPayment'
  /**
   *	Amount to be refunded. It must be less than or equal to the [captured](/payments-lifecycle#payment-capture) amount.
   *
   *
   */
  readonly amount: Amount
  /**
   *	The identifier of the capture transaction that is associated with the refund action.
   *
   *
   */
  readonly transactionId?: string
  /**
   *	A merchant-defined identifier associated with the [Payment](/../api/projects/payments#payment) to track and reconcile the [Payment Intent Action](ctp:checkout:type:PaymentIntentAction) on the merchant's side. For example, an invoice number.
   *
   *
   */
  readonly merchantReference?: string
}
/**
 *	Requests to [reverse](/payment-integration-predicates) a [Payment](/../api/projects/payments#payment). Checkout reverses the Payment, and then requests the PSP or gift card management system to proceed with the relevant process to reverse the Payment.
 *
 */
export interface PaymentIntentReverseAction extends IPaymentIntentAction {
  readonly action: 'reversePayment'
  /**
   *	A merchant-defined identifier associated with the [Payment](/../api/projects/payments#payment) to track and reconcile the [Payment Intent Action](ctp:checkout:type:PaymentIntentAction) on the merchant's side. For example, an invoice number.
   *
   *
   */
  readonly merchantReference?: string
}
