/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { PaymentReference } from './payment'

export type Message =
  | AddDiscountCodeError
  | ApplicationDeactivated
  | BadInputData
  | CartEmptiedDuringCheckout
  | CartEmpty
  | CartNotFound
  | CartWithExistingPayment
  | CheckoutCancelled
  | CheckoutCompleted
  | CheckoutLoaded
  | CheckoutStarted
  | ConnectorError
  | DeprecatedFields
  | DiscountCodeNotApplicable
  | ErrorLoadingAllPaymentIntegrations
  | ExpiredSession
  | ExternalTermsAndConditionsPending
  | FailedToRefreshSession
  | GiftCardBalanceError
  | GiftCardBalanceRemoved
  | GiftCardBalanceStarted
  | GiftCardBalanceSuccess
  | GiftCardRedeemError
  | GiftCardRedeemStarted
  | GiftCardRedeemSuccess
  | InitError
  | InitTimeout
  | InvalidLocale
  | InvalidMode
  | MultipleVendorButtonContainers
  | NoPaymentIntegrations
  | NoShippingMethods
  | NonOrderableCartError
  | NotApplicableDiscountCodeRemoved
  | OrderCreated
  | OrderCreationError
  | OrderVerificationRetryError
  | OrderVerificationStarted
  | OrderVerificationTimeout
  | PaymentCancelled
  | PaymentFailed
  | PaymentIntegrationLoaded
  | PaymentIntegrationLoading
  | PaymentIntegrationLoadingError
  | PaymentIntegrationNotAvailable
  | PaymentIntegrationSelected
  | PaymentIntegrationSelectionConfirmation
  | PaymentIntegrationSelectionConfirmationFailed
  | PaymentIntegrationsReceived
  | PaymentStarted
  | PaymentValidationFailed
  | PaymentValidationPassed
  | PaymentValidationStarted
  | ProjectIsDeactivated
  | RemoveDiscountCodeError
  | ResponseMessage
  | SetShippingAddressError
  | ShippingAddressMissingError
  | ShippingMethodDoesNotMatchCart
  | ShippingMethodSelected
  | ShippingMethodSelectionConfirmation
  | UnavailableLocale
  | UnsupportedCountry
  | UpdatedFields
export interface IMessage {
  /**
   *	Message code for the event.
   *
   */
  readonly code: string
  /**
   *	Severity level of the event. Can be `info`, `warn`, or `error`.
   *
   *
   */
  readonly severity: string
  /**
   *	Human-readable description of the event.
   *
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the customer cancels the checkout process.
 *
 */
export interface CheckoutCancelled extends IMessage {
  readonly code: 'checkout_cancelled'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Checkout cancelled.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when Checkout is loaded and waiting for the configuration properties to be passed with the `checkoutFlow` or `paymentFlow` [method](/sdk).
 *
 */
export interface CheckoutLoaded extends IMessage {
  readonly code: 'checkout_loaded'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Checkout loaded.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the configuration properties are passed successfully with the `checkoutFlow` or `paymentFlow` [method](/sdk) and the checkout process starts.
 *
 */
export interface CheckoutStarted extends IMessage {
  readonly code: 'checkout_started'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Checkout started.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the loading of all the payment integrations have failed.
 *
 */
export interface ErrorLoadingAllPaymentIntegrations extends IMessage {
  readonly code: 'error_loading_all_payment_integrations'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Error loading all payment integrations.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the [Checkout Session](/installing-checkout#create-checkout-sessions) is expired.
 *
 */
export interface ExpiredSession extends IMessage {
  readonly code: 'expired_session'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Session is expired.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated in Payment Only [mode](/../checkout/overview#complete-checkout-and-payment-only-modes) when the customer hasn't accepted the terms and conditions yet.
 *
 */
export interface ExternalTermsAndConditionsPending extends IMessage {
  readonly code: 'external_terms_and_conditions_pending'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	External terms and conditions pending.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the [Checkout Session](/installing-checkout#create-checkout-sessions) fails to refresh.
 *
 */
export interface FailedToRefreshSession extends IMessage {
  readonly code: 'failed_to_refresh_session'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Failed to refresh session.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when an error occurs while retrieving the balance of a gift card.
 *
 */
export interface GiftCardBalanceError extends IMessage {
  readonly code: 'gift_card_balance_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Gift card balance failed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the customer removes a gift card's balance that was initially applied as a payment integration.
 *
 */
export interface GiftCardBalanceRemoved extends IMessage {
  readonly code: 'gift_card_balance_removed'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Gift card balance removed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the customer enters the gift card's code for the payment, and Checkout initiates the retrieving of the gift card's balance.
 *
 */
export interface GiftCardBalanceStarted extends IMessage {
  readonly code: 'gift_card_balance_started'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Gift card balance started.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the redemption of a gift card's balance fails.
 *
 */
export interface GiftCardRedeemError extends IMessage {
  readonly code: 'gift_card_redeem_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Gift card redeem failed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the customer confirms the payment by gift card and Checkout initiates the redemption of the gift card's balance.
 *
 */
export interface GiftCardRedeemStarted extends IMessage {
  readonly code: 'gift_card_redeem_started'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Gift card redeem started.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the redemption of a gift card's balance is successful.
 *
 */
export interface GiftCardRedeemSuccess extends IMessage {
  readonly code: 'gift_card_redeem_success'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Gift card redeem success.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when an error occurs during Checkout's initialization.
 *
 */
export interface InitError extends IMessage {
  readonly code: 'init_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Error during initialization.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when Checkout does not receive the configuration properties with the `checkoutFlow` or `paymentFlow` [method](/sdk) on time.
 *
 */
export interface InitTimeout extends IMessage {
  readonly code: 'init_timeout'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Timeout error, no init message received.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the Application does not support the requested Checkout [mode](/../checkout/overview#complete-checkout-and-payment-only-modes).
 *
 */
export interface InvalidMode extends IMessage {
  readonly code: 'invalid_mode'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	\`{mode}` mode requires an application with mode type `{modeTypeRequested}`. Current mode `{modeTypeReceived}`.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when multiple containers for [vendor payment buttons](/sdk#display-custom-and-vendor-payment-buttons) are found.
 *
 */
export interface MultipleVendorButtonContainers extends IMessage {
  readonly code: 'multiple_vendor_button_containers'
  /**
   *	\`warn`
   *
   */
  readonly severity: string
  /**
   *	Multiple vendor button containers detected, this may cause issues.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when no payment integration is set up for an [Application](/connectors-and-applications#applications). Add at least one Payment integration to the Application in the Merchant Center.
 *
 */
export interface NoPaymentIntegrations extends IMessage {
  readonly code: 'no_payment_integrations'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	There are no payment integrations configured.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when Checkout starts verifying the [Order](/../api/projects/orders).
 *
 */
export interface OrderVerificationStarted extends IMessage {
  readonly code: 'order_verification_started'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Order verification started.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the verification of the [Order](/../api/projects/orders) times out.
 *
 */
export interface OrderVerificationTimeout extends IMessage {
  readonly code: 'order_verification_timeout'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Order verification timeout.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when Checkout and the payment service provider (PSP) validate the payment information entered by the customer.
 *
 */
export interface PaymentValidationPassed extends IMessage {
  readonly code: 'payment_validation_passed'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment validation passed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the validation of the payment information entered by the customer starts.
 *
 */
export interface PaymentValidationStarted extends IMessage {
  readonly code: 'payment_validation_started'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment validation started.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
export type ResponseMessage =
  | AddDiscountCodeError
  | ApplicationDeactivated
  | BadInputData
  | CartEmptiedDuringCheckout
  | CartEmpty
  | CartNotFound
  | CartWithExistingPayment
  | CheckoutCompleted
  | ConnectorError
  | DeprecatedFields
  | DiscountCodeNotApplicable
  | GiftCardBalanceSuccess
  | InvalidLocale
  | NoShippingMethods
  | NonOrderableCartError
  | NotApplicableDiscountCodeRemoved
  | OrderCreated
  | OrderCreationError
  | OrderVerificationRetryError
  | PaymentCancelled
  | PaymentFailed
  | PaymentIntegrationLoaded
  | PaymentIntegrationLoading
  | PaymentIntegrationLoadingError
  | PaymentIntegrationNotAvailable
  | PaymentIntegrationSelected
  | PaymentIntegrationSelectionConfirmation
  | PaymentIntegrationSelectionConfirmationFailed
  | PaymentIntegrationsReceived
  | PaymentStarted
  | PaymentValidationFailed
  | ProjectIsDeactivated
  | RemoveDiscountCodeError
  | SetShippingAddressError
  | ShippingAddressMissingError
  | ShippingMethodSelected
  | ShippingMethodSelectionConfirmation
  | UnavailableLocale
  | UnsupportedCountry
  | UpdatedFields
export interface IResponseMessage {
  /**
   *	Message code for the event.
   *
   */
  readonly code: string
  /**
   *	Severity level of the event. Can be `info`, `warn`, or `error`.
   *
   *
   */
  readonly severity: string
  /**
   *	Human-readable description of the event.
   *
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when there was an error adding a Discount Code.
 *
 */
export interface AddDiscountCodeError extends IResponseMessage {
  readonly code: 'add_discount_code_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Error adding discount code.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `error` object.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the requested [Application](/connectors-and-applications#applications) is deactivated. Activate the Application in the Merchant Center to continue.
 *
 */
export interface ApplicationDeactivated extends IResponseMessage {
  readonly code: 'application_disabled'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Application `{applicationKey}` for `{projectKey}` is disabled.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `project` and `application` objects with the related `key` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the [Checkout properties](/sdk#configuration-properties) contains invalid fields.
 *
 */
export interface BadInputData extends IResponseMessage {
  readonly code: 'invalid_fields'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Some fields are invalid.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `invalidFields` array of objects with the related `schema`, `path`, `value` and `message` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the [Cart](/../api/projects/carts) was emptied during the checkout process. It is not possible to recover from this, the customer must restart the checkout process.
 *
 */
export interface CartEmptiedDuringCheckout extends IResponseMessage {
  readonly code: 'cart_emptied_during_checkout'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Cart `{cartId}` was emptied during checkout.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cart` object with the `id` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the [Cart](/../api/projects/carts) for the current checkout is empty. The Cart must contain at least one [Line Item](/../api/carts-orders-overview#line-items).
 *
 */
export interface CartEmpty extends IResponseMessage {
  readonly code: 'cart_empty'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Cart `{cartId}` is empty.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cart` object with the `id` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the [Cart](/../api/projects/carts) is not found. To start the checkout process, a valid Cart with at least one [Line Item](/../api/carts-orders-overview#line-items) is required.
 *
 */
export interface CartNotFound extends IResponseMessage {
  readonly code: 'cart_not_found'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Cart for `{projectKey}` and session `{sessionId}` not found.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `project` and `session` objects with the related `key` and `id` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when trying to add a [Payment](/../api/projects/payments) to a [Cart](/../api/projects/carts) that already references an approved Payment.
 *
 */
export interface CartWithExistingPayment extends IResponseMessage {
  readonly code: 'cart_with_exisiting_payment'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Cart with existing approved payment.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cart` object with the `id` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the customer completes the checkout process.
 *
 */
export interface CheckoutCompleted extends IResponseMessage {
  readonly code: 'checkout_completed'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Checkout for `{orderId}` completed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `order` object with the `id` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the [Connector](/../checkout/connectors-and-applications#payment-connectors) triggers an error.
 *
 */
export interface ConnectorError extends IResponseMessage {
  readonly code: 'connector_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Connector error.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `connector` object with the `id` property and optional `error`, `message`, and `data` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the [Checkout properties](/sdk#configuration-properties) contains one or more deprecated fields.
 *
 */
export interface DeprecatedFields extends IResponseMessage {
  readonly code: 'deprecated_fields'
  /**
   *	\`warn`
   *
   */
  readonly severity: string
  /**
   *	Some fields are deprecated.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `deprecatedFields` array.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the [Discount Code](/../api/projects/discountCodes) is not applicable for the current Cart.
 *
 */
export interface DiscountCodeNotApplicable extends IResponseMessage {
  readonly code: 'discount_code_not_applicable'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Discount code not applicable.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cartId` and `discountCode` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when Checkout successfully retrieves a gift card's balance.
 *
 */
export interface GiftCardBalanceSuccess extends IResponseMessage {
  readonly code: 'gift_card_balance_success'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Gift card balance started.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `amount` and  `isBalanceSufficient` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the provided locale is invalid.
 *
 */
export interface InvalidLocale extends IResponseMessage {
  readonly code: 'invalid_locale'
  /**
   *	\`warn`
   *
   */
  readonly severity: string
  /**
   *	The provided `{locale}` is invalid.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the provided locale string, the related locale field (language or currency), and the used fallback one.
   *
   */
  readonly payload: any
}
/**
 *	Generated when no [Shipping Method](/../api/projects/shippingMethods) is available for the shipping address of the [Cart](/../api/projects/carts). This may indicate an incomplete configuration.
 *
 */
export interface NoShippingMethods extends IResponseMessage {
  readonly code: 'no_shipping_methods'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	There are no shipping methods matching cart.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cart` object with the `id` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the Order could not be created due to inconsistencies in the [Cart](/../api/projects/carts).
 *
 */
export interface NonOrderableCartError extends IResponseMessage {
  readonly code: 'non_orderable_cart_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	This cart is not orderable.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cart` object with the `id` and `errors` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when using the `paymentFlow` [method](/../checkout/browser-sdk#paymentflow-method) and Checkout removes a [Discount Code](/../api/projects/discountCodes) from the Cart because it does not apply to the Cart. Checkout removes the Discount Code to avoid an order creation error when converting the Cart to an Order.
 *
 */
export interface NotApplicableDiscountCodeRemoved extends IResponseMessage {
  readonly code: 'not_applicable_discount_code_removed'
  /**
   *	\`warn`
   *
   */
  readonly severity: string
  /**
   *	Not applicable discount code removed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cartId` and `discountCode` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when an [Order](/../api/projects/orders) is created after a successful checkout process.
 *
 */
export interface OrderCreated extends IResponseMessage {
  readonly code: 'order_created'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Order `{orderId}` created.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `order` object with the `id` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when an [Order](/../api/projects/orders) that references an approved [Payment](/../api/projects/payments) cannot be created.
 *
 */
export interface OrderCreationError extends IResponseMessage {
  readonly code: 'order_creation_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Order creation failed with approved payment.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains `paymentReference`, `sessionId`, and the `errors` array of objects, with the related `code` and `message` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when retrying the verification of the [Order](/../api/projects/orders) results in an error.
 *
 */
export interface OrderVerificationRetryError extends IResponseMessage {
  readonly code: 'order_verification_retry_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Order verification retry error.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `error` property that can be either `orderReferenceNotAvailable` or `orderVerificationOngoing`.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the customer cancels the payment (for example, by closing the browser's window).
 *
 */
export interface PaymentCancelled extends IResponseMessage {
  readonly code: 'payment_cancelled'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment cancelled.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the reference data of a Payment.
   *
   */
  readonly payload: PaymentReference
}
/**
 *	Generated when the payment fails.
 *
 */
export interface PaymentFailed extends IResponseMessage {
  readonly code: 'payment_failed'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Payment failed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the reference data of a Payment.
   *
   */
  readonly payload: PaymentReference
}
/**
 *	Generated when the selected payment integration is loaded.
 *
 */
export interface PaymentIntegrationLoaded extends IResponseMessage {
  readonly code: 'payment_integration_loaded'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment integration loaded.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `integration` object with the `type` and `connectorId` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the selected payment integration is loading.
 *
 */
export interface PaymentIntegrationLoading extends IResponseMessage {
  readonly code: 'payment_integration_loading'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment integration loading.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `integration` object with the `type` and `connectorId` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the loading of the selected payment integration fails.
 *
 */
export interface PaymentIntegrationLoadingError extends IResponseMessage {
  readonly code: 'payment_integration_loading_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Payment integration loading failed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains an `error` object and the `integration` object with the `type` and `connectorId` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when there is an error with the selected payment integration and the payment integration is unavailable.
 *
 */
export interface PaymentIntegrationNotAvailable extends IResponseMessage {
  readonly code: 'payment_integration_not_available'
  /**
   *	\`warn`
   *
   */
  readonly severity: string
  /**
   *	Payment integration not available.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `method` object with the `type`, `id`, and `connectorId` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the customer selects the payment integration.
 *
 */
export interface PaymentIntegrationSelected extends IResponseMessage {
  readonly code: 'payment_integration_selected'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment integration selected.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `integration` object with the `type` and `hasVendorButton` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the customer has entered the payment integration information and moves to the next step.
 *
 */
export interface PaymentIntegrationSelectionConfirmation
  extends IResponseMessage {
  readonly code: 'payment_integration_selection_confirmation'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment integration selected.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `integration` object with the `type` and `hasVendorButton` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the selection of the payment integration by the customer is not successful.
 *
 */
export interface PaymentIntegrationSelectionConfirmationFailed
  extends IResponseMessage {
  readonly code: 'payment_integration_selection_confirmation_failed'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment integration selection failed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `integration` object with the `type` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when Checkout receives and loads the payment integrations configured for the Application.
 *
 */
export interface PaymentIntegrationsReceived extends IResponseMessage {
  readonly code: 'payment_integrations_received'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment integrations received.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `paymentIntegrations` array of objects with the `type` and `connectorId` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the payment starts.
 *
 */
export interface PaymentStarted extends IResponseMessage {
  readonly code: 'payment_started'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment started.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `integration` object with the `type` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when Checkout and the payment service provider (PSP) do not validate the payment information entered by the customer.
 *
 */
export interface PaymentValidationFailed extends IResponseMessage {
  readonly code: 'payment_validation_failed'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Payment validation failed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the reference data of a Payment.
   *
   */
  readonly payload: PaymentReference
}
/**
 *	Generated when the Checkout [`projectKey`](/sdk) is deactivated and cannot be initialized. To activate it, contact the [Checkout support team](https://support.commercetools.com/).
 *
 */
export interface ProjectIsDeactivated extends IResponseMessage {
  readonly code: 'project_deactivated'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Project `{projectKey}` is deactivated.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `project` object with the `key` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when there was an error removing the [Discount Code](/../api/projects/discountCodes).
 *
 */
export interface RemoveDiscountCodeError extends IResponseMessage {
  readonly code: 'remove_discount_code_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Error removing discount code.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `error` object.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the [Cart](/../api/projects/carts) cannot be updated with the shipping address.
 *
 */
export interface SetShippingAddressError extends IResponseMessage {
  readonly code: 'set_shipping_address_error'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Error setting shipping address.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `errors` array of objects, with the related `code` and `message` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the shipping address is missing for the given Cart.
 *
 */
export interface ShippingAddressMissingError extends IResponseMessage {
  readonly code: 'shipping_address_missing'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	The shippingAddress field is missing for cart `{cartId}`.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cart` object with the `id` property.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the selected Shipping Method does not match the Cart anymore.
 *
 */
export interface ShippingMethodDoesNotMatchCart extends IMessage {
  readonly code: 'shipping_method_does_not_match_cart'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Selected shipping method no longer matches cart.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
}
/**
 *	Generated when the customer selects a Shipping Method that is different from the default option.
 *
 */
export interface ShippingMethodSelected extends IResponseMessage {
  readonly code: 'shipping_method_selected'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Shipping Method selected.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `method` object with the `name` and `id` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the customer selects a Shipping Method and moves to the next step of the checkout process.
 *
 */
export interface ShippingMethodSelectionConfirmation extends IResponseMessage {
  readonly code: 'shipping_method_selection_confirmation'
  /**
   *	\`info`
   *
   */
  readonly severity: string
  /**
   *	Shipping Method selection confirmed.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `method` object with the `name` and `id` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the provided `locale` is not [available for localization](/installing-checkout#locales). The localization falls back to English.
 *
 */
export interface UnavailableLocale extends IResponseMessage {
  readonly code: 'unavailable_locale'
  /**
   *	\`warn`
   *
   */
  readonly severity: string
  /**
   *	The provided locale `{locale}` is not available for translated definitions.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `locale` and the `fallback` properties.
   *
   */
  readonly payload: any
}
/**
 *	Generated when the country of the shipping address and/or billing address associated with the [Cart](/../api/projects/carts) does not match the countries set for the [Application](/connectors-and-applications#applications).
 *
 */
export interface UnsupportedCountry extends IResponseMessage {
  readonly code: 'unsupported_country'
  /**
   *	\`error`
   *
   */
  readonly severity: string
  /**
   *	Cart `{cartId}` has unsupported country.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains the `cart` object with the `id` property, `shippingCountry`, `billingCountry`, and the `supportedCountries` array.
   *
   */
  readonly payload: any
}
/**
 *	Generated when some fields provided in the Checkout initialization request are invalid and have been updated to match our schema. An array of updates will be provided with a sequence of edits used to transform an invalid value into a valid one.
 *
 */
export interface UpdatedFields extends IResponseMessage {
  readonly code: 'updated_fields'
  /**
   *	\`warn`
   *
   */
  readonly severity: string
  /**
   *	Some fields are invalid and have been updated.
   *
   */
  readonly message: string
  /**
   *	Unique identifier of the event.
   *
   */
  readonly correlationId: string
  /**
   *	Contains two arrays:
   *	- `invalidFields` contains a list of invalid fields with the related `schema`, `path`, `value` and `message` properties.
   *	- `updatedFields` contains the updated fields with its related `type`, `path` and `value` properties, where `type` can be `update`|`insert`|`delete`.
   *
   *
   */
  readonly payload: any
}
