/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  ApplicationReference,
  ApplicationResourceIdentifier,
} from './application'
import { CartReference, CartResourceIdentifier, OrderReference } from './cart'
import { Amount } from './common'
import { PaymentReference } from './payment'
import {
  PaymentIntegrationReference,
  PaymentIntegrationResourceIdentifier,
} from './payment-integration'

/**
 *	Information for the request to the [Connector](/connectors-and-applications#payment-connectors) to initiate the payment for a specific [Cart](/../api/projects/carts).
 *
 */
export interface Transaction {
  /**
   *	Unique identifier of the Transaction.
   *
   */
  readonly id: string
  /**
   *	User-defined unique identifier of the Transaction.
   *
   */
  readonly key?: string
  /**
   *	Current version of the Transaction.
   *
   */
  readonly version: number
  /**
   *	[Application](ctp:checkout:type:Application) for which the payment must be executed.
   *
   *
   */
  readonly application: ApplicationReference
  /**
   *	Transaction Item associated with the Transaction.
   *
   */
  readonly transactionItems: TransactionItem[]
  /**
   *	Reference to the [Cart](/../api/projects/carts#cart) for which the payment must be executed.
   *
   */
  readonly cart?: CartReference
  /**
   *	Status of the Transaction.
   *
   */
  readonly transactionStatus: TransactionStatus
  /**
   *	Reference to the [Order](/../api/projects/orders#order) created from the Cart when the Transaction is completed.
   *
   */
  readonly order?: OrderReference
  /**
   *	Date and time (UTC) the Transaction was initially created.
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the Transaction was last updated.
   *
   */
  readonly lastModifiedAt: string
}
export interface TransactionDraft {
  /**
   *	User-defined unique identifier of the Transaction.
   *
   */
  readonly key?: string
  /**
   *	[Application](ctp:checkout:type:Application) for which the payment is executed.
   *
   *
   */
  readonly application: ApplicationResourceIdentifier
  /**
   *	Transaction Item associated with the Transaction.
   *
   */
  readonly transactionItems: TransactionItemDraft[]
  /**
   *	[Cart](ctp:api:type:Cart) for which the payment must be executed.
   *
   *
   */
  readonly cart: CartResourceIdentifier
}
/**
 *	A single error on the [Transaction](/transactions-api#transaction). Multiple errors may be included in the [Transaction Status](/transactions-api#transactionstatus).
 *
 */
export interface TransactionError {
  /**
   *	Error identifier.
   *
   *
   */
  readonly code: string
  /**
   *	Plain text description of the cause of the error.
   *
   *
   */
  readonly message: string
}
/**
 *	Payment information related to the [Transaction](/transactions-api#transaction).
 *
 */
export interface TransactionItem {
  /**
   *	Money value of the Transaction Item.
   *
   */
  readonly amount?: Amount
  /**
   *	Reference to the [Payment](ctp:api:type:Payment) associated with the Transaction Item.
   *
   */
  readonly payment?: PaymentReference
  /**
   *	Reference to the [Payment Integration](ctp:checkout:type:PaymentIntegration) to use to execute the payment.
   *
   */
  readonly paymentIntegration: PaymentIntegrationReference
}
export interface TransactionItemDraft {
  /**
   *	Resource Identifier of the [Payment Integration](/connectors-and-applications#payment-integrations) to use to execute the payment.
   *
   */
  readonly paymentIntegration: PaymentIntegrationResourceIdentifier
  /**
   *	Money value of the Transaction Item.
   *
   */
  readonly amount?: Amount
}
/**
 *	The state of the [Transaction](/transactions-api#transaction).
 *
 */
export enum TransactionStateValues {
  Completed = 'Completed',
  Failed = 'Failed',
  Initial = 'Initial',
  Pending = 'Pending',
}

export type TransactionState =
  | 'Completed'
  | 'Failed'
  | 'Initial'
  | 'Pending'
  | (string & {})
/**
 *	The state of the [Transaction](/transactions-api#transaction) and the related errors in case of a failed Transaction.
 *
 */
export interface TransactionStatus {
  /**
   *	State of the Transaction.
   *
   */
  readonly state: TransactionState
  /**
   *	Errors returned if the Transaction is in the `Failed` state.
   *
   */
  readonly errors?: TransactionError[]
}
