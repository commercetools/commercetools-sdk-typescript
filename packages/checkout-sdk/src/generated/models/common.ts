/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  ApplicationReference,
  ApplicationResourceIdentifier,
} from './application'
import { CartReference, CartResourceIdentifier, OrderReference } from './cart'
import { OrderResourceIdentifier } from './order'
import { PaymentReference, PaymentResourceIdentifier } from './payment'
import {
  PaymentIntegrationReference,
  PaymentIntegrationResourceIdentifier,
} from './payment-integration'

/**
 *	A Reference represents a loose reference to another resource in the same Project identified by its `id`. The `typeId` indicates the type of the referenced resource. Each resource type has its corresponding Reference type, like [ApplicationReference](ctp:checkout:type:ApplicationReference).
 *
 */
export type Reference =
  | ApplicationReference
  | CartReference
  | OrderReference
  | PaymentIntegrationReference
  | PaymentReference
export interface IReference {
  /**
   *	Type of referenced resource.
   *
   *
   */
  readonly typeId: ReferenceTypeId
  /**
   *	Unique ID of the referenced resource.
   *
   *
   */
  readonly id: string
}
/**
 *	Type of resource the value should reference. Supported resource type identifiers are:
 *
 */
export enum ReferenceTypeIdValues {
  Application = 'application',
  Cart = 'cart',
  Deployment = 'deployment',
  Order = 'order',
  Payment = 'payment',
  PaymentIntegration = 'payment-integration',
}

export type ReferenceTypeId =
  | 'application'
  | 'cart'
  | 'deployment'
  | 'order'
  | 'payment'
  | 'payment-integration'
  | (string & {})
/**
 *	Draft type to create a [Reference](ctp:checkout:type:Reference) to a resource. Provide either the `id` or (wherever supported) the `key` of the resource to reference, but depending on the API endpoint the response returns a Reference.
 *
 *	Each resource type has its corresponding ResourceIdentifier, like [PaymentResourceIdentifier](ctp:checkout:type:PaymentResourceIdentifier).
 *
 */
export type ResourceIdentifier =
  | ApplicationResourceIdentifier
  | CartResourceIdentifier
  | OrderResourceIdentifier
  | PaymentIntegrationResourceIdentifier
  | PaymentResourceIdentifier
export interface IResourceIdentifier {
  /**
   *	Type of referenced resource. If given, it must match the expected [ReferenceTypeId](ctp:checkout:type:ReferenceTypeId) of the referenced resource.
   *
   *
   */
  readonly typeId?: ReferenceTypeId
  /**
   *	Unique identifier of the referenced resource. Required if `key` is absent.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced resource. Required if `id` is absent.
   *
   *
   */
  readonly key?: string
}
/**
 *	Money in cent amounts for a specific currency.
 *
 */
export interface Amount {
  /**
   *	Amount in the smallest indivisible unit of a currency, such as:
   *
   *	* Cents for EUR and USD, pence for GBP, or centime for CHF (5 CHF is specified as `500`).
   *	* The value in the major unit for currencies without minor units, like JPY (5 JPY is specified as `5`).
   *
   *
   */
  readonly centAmount: number
  /**
   *	Currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
}
/**
 *	JSON object where the keys are of type [Locale](ctp:api:type:Locale), and the values are the strings used for the corresponding language.
 *
 */
export interface LocalizedString {
  [key: string]: string
}
/**
 *	A localized URL that provides different URL values for different locales.
 *
 */
export interface LocalizedUrl {
  [key: string]: string
}
/**
 *	The Region in which the Checkout application is [hosted](/hosts-and-authorization).
 *
 */
export enum RegionValues {
  AustraliaSoutheast1Gcp = 'australia-southeast1.gcp',
  EuropeWest1Gcp = 'europe-west1.gcp',
  UsCentral1Gcp = 'us-central1.gcp',
}

export type Region =
  | 'australia-southeast1.gcp'
  | 'europe-west1.gcp'
  | 'us-central1.gcp'
  | (string & {})
