/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { CategoryImport } from './categories'
import { CustomerImport } from './customers'
import { Custom } from './customfields'
import { DiscountCodeImport } from './discount-codes'
import { InventoryImport } from './inventories'
import { PriceImport } from './prices'
import { ProductSelectionImport } from './product-selections'
import { ProductDraftImport } from './productdrafts'
import { ProductImport } from './products'
import { ProductTypeImport } from './producttypes'
import { ProductVariantImport } from './productvariants'
import { StandalonePriceImport } from './standalone-prices'
import { TypeImport } from './types'

export interface Asset {
  /**
   *	User-defined identifier for the asset.
   *	Asset keys are unique inside their container (a product variant or a category).
   *
   *
   */
  readonly key: string
  /**
   *
   */
  readonly sources: AssetSource[]
  /**
   *	Name of the Asset.
   *
   */
  readonly name: LocalizedString
  /**
   *	Description of the Asset.
   *
   */
  readonly description?: LocalizedString
  /**
   *	Keywords for categorizing and organizing Assets.
   *
   */
  readonly tags?: string[]
  /**
   *	Custom Fields defined for the Asset.
   *
   */
  readonly custom?: Custom
}
/**
 *	The width and height of the Asset Source.
 */
export interface AssetDimensions {
  /**
   *	The width of the asset source.
   *
   */
  readonly w: number
  /**
   *	The height of the asset source.
   *
   */
  readonly h: number
}
/**
 *	An AssetSource is a representation of an Asset in a specific format, for example, a video in a certain encoding or an image in a certain resolution.
 */
export interface AssetSource {
  /**
   *
   */
  readonly uri: string
  /**
   *
   */
  readonly key?: string
  /**
   *	The width and height of the Asset Source.
   *
   */
  readonly dimensions?: AssetDimensions
  /**
   *
   */
  readonly contentType?: string
}
/**
 *	An Image uploaded to commercetools Composable Commerce is stored in a Content Delivery Network and it's available in several pre-defined sizes. If you already have an image stored on an external service, you can save the URL when creating a new product or adding a variant, or you can add it later.
 */
export interface Image {
  /**
   *	URL of the image in its original size. The URL must be unique within a single variant. It can be used to obtain the image in different sizes.
   *
   */
  readonly url: string
  /**
   *	Dimensions of the original image. This can be used by your application, for example, to determine whether the image is large enough to display a zoom view.
   *
   */
  readonly dimensions: AssetDimensions
  /**
   *	Custom label that can be used, for example, as an image description.
   *
   */
  readonly label?: string
}
export interface EnumValue {
  /**
   *
   */
  readonly key: string
  /**
   *
   */
  readonly label: string
}
export interface LocalizedEnumValue {
  /**
   *
   */
  readonly key: string
  /**
   *	A localized string is a JSON object where the keys are of [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag), and the values the corresponding strings used for that language.
   *	```json
   *	{
   *	  "de": "Hundefutter",
   *	  "en": "dog food"
   *	}
   *	```
   *
   *
   */
  readonly label: LocalizedString
}
/**
 *	A localized string is a JSON object where the keys are of [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag), and the values the corresponding strings used for that language.
 *	```json
 *	{
 *	  "de": "Hundefutter",
 *	  "en": "dog food"
 *	}
 *	```
 *
 */
export interface LocalizedString {
  [key: string]: string
}
/**
 *	A representation of the resource to import.
 *	Import resources are similar to draft types, but they only support key references.
 *	In general, import resources are more granular then regular resources.
 *	They are optimized for incremental updates and therefore have a slightly different structure.
 *
 */
export interface ImportResource {
  /**
   *	User-defined unique identifier.
   *
   *
   */
  readonly key: string
}
export type _ImportResource =
  | ImportResource
  | CategoryImport
  | CustomerImport
  | DiscountCodeImport
  | InventoryImport
  | PriceImport
  | ProductDraftImport
  | ProductImport
  | ProductSelectionImport
  | ProductTypeImport
  | ProductVariantImport
  | StandalonePriceImport
  | TypeImport
/**
 *	References a resource by key.
 */
export type KeyReference =
  | CartDiscountKeyReference
  | CartKeyReference
  | CategoryKeyReference
  | ChannelKeyReference
  | CustomObjectKeyReference
  | CustomerGroupKeyReference
  | CustomerKeyReference
  | DiscountCodeKeyReference
  | OrderKeyReference
  | PaymentKeyReference
  | PriceKeyReference
  | ProductDiscountKeyReference
  | ProductKeyReference
  | ProductTypeKeyReference
  | ProductVariantKeyReference
  | ShippingMethodKeyReference
  | StateKeyReference
  | StoreKeyReference
  | TaxCategoryKeyReference
  | TypeKeyReference
export interface IKeyReference {
  /**
   *	User-defined unique identifier of the referenced resource.
   *	If the referenced resource does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced resource is created.
   *
   *
   */
  readonly key: string
  /**
   *	Type of referenced resource.
   *
   *
   */
  readonly typeId: ReferenceType
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a Cart
 */
export interface CartKeyReference extends IKeyReference {
  readonly typeId: 'cart'
  /**
   *	User-defined unique identifier of the referenced Cart.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a CartDiscount.
 */
export interface CartDiscountKeyReference extends IKeyReference {
  readonly typeId: 'cart-discount'
  /**
   *	User-defined unique identifier of the referenced CartDiscount.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a Category.
 */
export interface CategoryKeyReference extends IKeyReference {
  readonly typeId: 'category'
  /**
   *	User-defined unique identifier of the referenced Category.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a Channel.
 */
export interface ChannelKeyReference extends IKeyReference {
  readonly typeId: 'channel'
  /**
   *	User-defined unique identifier of the referenced Channel.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a Customer.
 */
export interface CustomerKeyReference extends IKeyReference {
  readonly typeId: 'customer'
  /**
   *	User-defined unique identifier of the referenced Customer.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a CustomerGroup.
 */
export interface CustomerGroupKeyReference extends IKeyReference {
  readonly typeId: 'customer-group'
  /**
   *	User-defined unique identifier of the referenced CustomerGroup.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a CustomObject.
 */
export interface CustomObjectKeyReference extends IKeyReference {
  readonly typeId: 'key-value-document'
  /**
   *	User-defined unique identifier of the referenced CustomObject.
   *
   */
  readonly key: string
  /**
   *	The `container` of the referenced CustomObject.
   *
   */
  readonly container: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a DiscountCode.
 */
export interface DiscountCodeKeyReference extends IKeyReference {
  readonly typeId: 'discount-code'
  /**
   *	User-defined unique identifier of the referenced DiscountCode.
   *
   */
  readonly key: string
}
/**
 *	References an order by key.
 */
export interface OrderKeyReference extends IKeyReference {
  readonly typeId: 'order'
  /**
   *	User-defined unique identifier of the referenced resource.
   *	If the referenced resource does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced resource is created.
   *
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a Payment.
 */
export interface PaymentKeyReference extends IKeyReference {
  readonly typeId: 'payment'
  /**
   *	User-defined unique identifier of the referenced Payment.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify an Embedded Price.
 */
export interface PriceKeyReference extends IKeyReference {
  readonly typeId: 'price'
  /**
   *	User-defined unique identifier of the referenced Embedded Price.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a Product.
 */
export interface ProductKeyReference extends IKeyReference {
  readonly typeId: 'product'
  /**
   *	User-defined unique identifier of the referenced Product.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a ProductDiscount.
 */
export interface ProductDiscountKeyReference extends IKeyReference {
  readonly typeId: 'product-discount'
  /**
   *	User-defined unique identifier of the referenced ProductDiscount.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a ProductType.
 */
export interface ProductTypeKeyReference extends IKeyReference {
  readonly typeId: 'product-type'
  /**
   *	User-defined unique identifier of the referenced ProductType.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a ProductVariant.
 */
export interface ProductVariantKeyReference extends IKeyReference {
  readonly typeId: 'product-variant'
  /**
   *	User-defined unique identifier of the referenced ProductVariant.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a ShippingMethod.
 */
export interface ShippingMethodKeyReference extends IKeyReference {
  readonly typeId: 'shipping-method'
  /**
   *	User-defined unique identifier of the referenced ShippingMethod.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a State.
 */
export interface StateKeyReference extends IKeyReference {
  readonly typeId: 'state'
  /**
   *	User-defined unique identifier of the referenced State.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a Store.
 */
export interface StoreKeyReference extends IKeyReference {
  readonly typeId: 'store'
  /**
   *	User-defined unique identifier of the referenced Store.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a TaxCategory.
 */
export interface TaxCategoryKeyReference extends IKeyReference {
  readonly typeId: 'tax-category'
  /**
   *	User-defined unique identifier of the referenced TaxCategory.
   *
   */
  readonly key: string
}
/**
 *	Used by the [Import API](/import-export/overview) to identify a Type.
 */
export interface TypeKeyReference extends IKeyReference {
  readonly typeId: 'type'
  /**
   *	User-defined unique identifier of the referenced Type.
   *
   */
  readonly key: string
}
/**
 *	Contains a reference to a resource which does not exist. For example, if a Category is imported with a parent Category that does not exist, the reference to the parent Category is an unresolved reference.
 */
export interface UnresolvedReferences {
  /**
   *	`key` of the unresolved resource.
   *
   *
   */
  readonly key: string
  /**
   *	Type of the unresolved resource.
   *
   */
  readonly typeId: ReferenceType
}
/**
 *	The type of money.
 *	The `centPrecision` type is used for currencies with minor units, such as EUR and USD.
 *	The `highPrecision` type is used for currencies without minor units, such as JPY.
 *
 */
export enum MoneyTypeValues {
  CentPrecision = 'centPrecision',
  HighPrecision = 'highPrecision',
}

export type MoneyType = 'centPrecision' | 'highPrecision' | (string & {})
export type TypedMoney = HighPrecisionMoney | Money
export interface ITypedMoney {
  /**
   *	The type of money. The `centPrecision` type is used for currencies with minor units, such as EUR and USD. The `highPrecision` type is used for currencies without minor units, such as JPY.
   *
   */
  readonly type: MoneyType
  /**
   *	The number of fraction digits of the money value.
   *	This is used to determine how many digits are after the decimal point.
   *	For example, for EUR and USD, this is `2`, and for JPY, this is `0`.
   *
   *
   */
  readonly fractionDigits?: number
  /**
   *	Amount in the smallest indivisible unit of a currency, such as:
   *
   *	* Cents for EUR and USD, pence for GBP, or centime for CHF (5 CHF is specified as `500`).
   *	* The value in the major unit for currencies without minor units, like JPY (5 JPY is specified as `5`).
   *
   *
   */
  readonly centAmount: number
  /**
   *	The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
}
export interface HighPrecisionMoney extends ITypedMoney {
  readonly type: 'highPrecision'
  /**
   *	The number of fraction digits of the money value.
   *	This is used to determine how many digits are after the decimal point.
   *	For example, for EUR and USD, this is `2`, and for JPY, this is `0`.
   *
   *
   */
  readonly fractionDigits?: number
  /**
   *	Amount in the smallest indivisible unit of a currency, such as:
   *
   *	* Cents for EUR and USD, pence for GBP, or centime for CHF (5 CHF is specified as `500`).
   *	* The value in the major unit for currencies without minor units, like JPY (5 JPY is specified as `5`).
   *
   *
   */
  readonly centAmount: number
  /**
   *	The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
  /**
   *
   */
  readonly preciseAmount: number
}
export interface Money extends ITypedMoney {
  readonly type: 'centPrecision'
  /**
   *	The number of fraction digits of the money value.
   *	This is used to determine how many digits are after the decimal point.
   *	For example, for EUR and USD, this is `2`, and for JPY, this is `0`.
   *
   *
   */
  readonly fractionDigits?: number
  /**
   *	Amount in the smallest indivisible unit of a currency, such as:
   *
   *	* Cents for EUR and USD, pence for GBP, or centime for CHF (5 CHF is specified as `500`).
   *	* The value in the major unit for currencies without minor units, like JPY (5 JPY is specified as `5`).
   *
   *
   */
  readonly centAmount: number
  /**
   *	The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
}
export interface DiscountedPrice {
  /**
   *	Money value of the discounted price.
   *
   */
  readonly value: TypedMoney
  /**
   *	Reference to a ProductDiscount. If the referenced [ProductDiscount](ctp:api:type:ProductDiscount) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced ProductDiscount is created.
   *
   */
  readonly discount: ProductDiscountKeyReference
}
/**
 *	A price tier is selected instead of the default price when a certain quantity of the ProductVariant is added to a cart and ordered.
 *
 */
export interface PriceTier {
  /**
   *	The minimum quantity this price tier is valid for.
   *
   *
   */
  readonly minimumQuantity: number
  /**
   *	The currency of a price tier is always the same as the currency of the base Price.
   *
   */
  readonly value: TypedMoney
}
/**
 *	The resource types that can be imported.
 *
 */
export enum ImportResourceTypeValues {
  Category = 'category',
  Customer = 'customer',
  DiscountCode = 'discount-code',
  Inventory = 'inventory',
  Order = 'order',
  OrderPatch = 'order-patch',
  Price = 'price',
  Product = 'product',
  ProductDraft = 'product-draft',
  ProductSelection = 'product-selection',
  ProductType = 'product-type',
  ProductVariant = 'product-variant',
  ProductVariantPatch = 'product-variant-patch',
  StandalonePrice = 'standalone-price',
  Type = 'type',
}

export type ImportResourceType =
  | 'category'
  | 'customer'
  | 'discount-code'
  | 'inventory'
  | 'order'
  | 'order-patch'
  | 'price'
  | 'product'
  | 'product-draft'
  | 'product-selection'
  | 'product-type'
  | 'product-variant'
  | 'product-variant-patch'
  | 'standalone-price'
  | 'type'
  | (string & {})
/**
 *	Type of referenced resource.
 *
 */
export enum ReferenceTypeValues {
  Cart = 'cart',
  CartDiscount = 'cart-discount',
  Category = 'category',
  Channel = 'channel',
  Customer = 'customer',
  CustomerGroup = 'customer-group',
  DiscountCode = 'discount-code',
  KeyValueDocument = 'key-value-document',
  Order = 'order',
  Payment = 'payment',
  Price = 'price',
  Product = 'product',
  ProductDiscount = 'product-discount',
  ProductType = 'product-type',
  ProductVariant = 'product-variant',
  ShippingMethod = 'shipping-method',
  State = 'state',
  Store = 'store',
  TaxCategory = 'tax-category',
  Type = 'type',
}

export type ReferenceType =
  | 'cart'
  | 'cart-discount'
  | 'category'
  | 'channel'
  | 'customer'
  | 'customer-group'
  | 'discount-code'
  | 'key-value-document'
  | 'order'
  | 'payment'
  | 'price'
  | 'product'
  | 'product-discount'
  | 'product-type'
  | 'product-variant'
  | 'shipping-method'
  | 'state'
  | 'store'
  | 'tax-category'
  | 'type'
  | (string & {})
/**
 *	Every [Import Operation](ctp:import:type:ImportOperation) is assigned one of the following states.
 *
 */
export enum ProcessingStateValues {
  Canceled = 'canceled',
  Imported = 'imported',
  Processing = 'processing',
  Rejected = 'rejected',
  Unresolved = 'unresolved',
  ValidationFailed = 'validationFailed',
  WaitForMasterVariant = 'waitForMasterVariant',
}

export type ProcessingState =
  | 'canceled'
  | 'imported'
  | 'processing'
  | 'rejected'
  | 'unresolved'
  | 'validationFailed'
  | 'waitForMasterVariant'
  | (string & {})
export interface Address {
  /**
   *	Unique identifier of the Address.
   *
   *	It is not recommended to set it manually since the API overwrites this ID when creating an Address for a [Customer](ctp:api:type:Customer).
   *	Use `key` instead and omit this field from the request to let the API generate the ID for the Address.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined identifier of the Address that must be unique when multiple addresses are referenced in [BusinessUnits](ctp:api:type:BusinessUnit), [Customers](ctp:api:type:Customer), and `itemShippingAddresses` (LineItem-specific addresses) of a [Cart](ctp:api:type:Cart), [Order](ctp:api:type:Order), [QuoteRequest](ctp:api:type:QuoteRequest), or [Quote](ctp:api:type:Quote).
   *
   *
   */
  readonly key?: string
  /**
   *	Title of the contact, for example 'Dr.'
   *
   *
   */
  readonly title?: string
  /**
   *	Salutation of the contact, for example 'Mr.' or 'Ms.'
   *
   *
   */
  readonly salutation?: string
  /**
   *	Given name (first name) of the contact.
   *
   *
   */
  readonly firstName?: string
  /**
   *	Family name (last name) of the contact.
   *
   *
   */
  readonly lastName?: string
  /**
   *	Name of the street.
   *
   *
   */
  readonly streetName?: string
  /**
   *	Street number.
   *
   *
   */
  readonly streetNumber?: string
  /**
   *	Further information on the street address.
   *
   *
   */
  readonly additionalStreetInfo?: string
  /**
   *	Postal code.
   *
   *
   */
  readonly postalCode?: string
  /**
   *	Name of the city.
   *
   *
   */
  readonly city?: string
  /**
   *	Name of the region.
   *
   *
   */
  readonly region?: string
  /**
   *	Name of the state, for example, Colorado.
   *
   *
   */
  readonly state?: string
  /**
   *	Name of the country.
   *
   *
   */
  readonly country: string
  /**
   *	Name of the company.
   *
   *
   */
  readonly company?: string
  /**
   *	Name of the department.
   *
   *
   */
  readonly department?: string
  /**
   *	Number or name of the building.
   *
   *
   */
  readonly building?: string
  /**
   *	Number or name of the apartment.
   *
   *
   */
  readonly apartment?: string
  /**
   *	Post office box number.
   *
   *
   */
  readonly pOBox?: string
  /**
   *	Phone number of the contact.
   *
   *
   */
  readonly phone?: string
  /**
   *	Mobile phone number of the contact.
   *
   *
   */
  readonly mobile?: string
  /**
   *	Email address of the contact.
   *
   *
   */
  readonly email?: string
  /**
   *	Fax number of the contact.
   *
   *
   */
  readonly fax?: string
  /**
   *	Further information on the Address.
   *
   *
   */
  readonly additionalAddressInfo?: string
  /**
   *	ID for the contact used in an external system.
   *
   *
   */
  readonly externalId?: string
  /**
   *	Custom Fields defined for the Address.
   *
   */
  readonly custom?: Custom
}
export enum ProductPriceModeEnumValues {
  Embedded = 'Embedded',
  Standalone = 'Standalone',
}

export type ProductPriceModeEnum = 'Embedded' | 'Standalone' | (string & {})
