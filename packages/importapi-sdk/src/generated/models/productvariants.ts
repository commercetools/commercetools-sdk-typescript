/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  Asset,
  Image,
  ImportResource,
  KeyReference,
  LocalizedString,
  Money,
  ProductKeyReference,
  ProductVariantKeyReference,
} from './common'

/**
 *	Represents the value of an Attribute of a Product Variant.
 *
 */
export type Attribute =
  | BooleanAttribute
  | BooleanSetAttribute
  | DateAttribute
  | DateSetAttribute
  | DateTimeAttribute
  | DateTimeSetAttribute
  | EnumAttribute
  | EnumSetAttribute
  | LocalizableEnumAttribute
  | LocalizableEnumSetAttribute
  | LocalizableTextAttribute
  | LocalizableTextSetAttribute
  | MoneyAttribute
  | MoneySetAttribute
  | NumberAttribute
  | NumberSetAttribute
  | ReferenceAttribute
  | ReferenceSetAttribute
  | TextAttribute
  | TextSetAttribute
  | TimeAttribute
  | TimeSetAttribute
export interface IAttribute {
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	Must match `type` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *	The type is required if this type is used in a product variant and must not be set when
   *	used in a product variant patch.
   *
   *
   */
  readonly type: string
}
/**
 *	This type represents an attribute whose value is either "true" or "false".
 *
 */
export interface BooleanAttribute extends IAttribute {
  readonly type: 'boolean'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	`true` or `false`
   *
   *
   */
  readonly value: boolean
}
/**
 *	This type represents an attribute whose value is set of boolean values.
 *
 */
export interface BooleanSetAttribute extends IAttribute {
  readonly type: 'boolean-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of boolean values.
   *
   *
   */
  readonly value: boolean[]
}
/**
 *	This type represents an attribute whose value is a date.
 *
 */
export interface DateAttribute extends IAttribute {
  readonly type: 'date'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A date in the format `YYYY-MM-DD`.
   *
   *
   */
  readonly value: string
}
/**
 *	This type represents an attribute whose value is a set of dates.
 *
 */
export interface DateSetAttribute extends IAttribute {
  readonly type: 'date-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of dates in the format `YYYY-MM-DD`.
   *
   *
   */
  readonly value: string[]
}
/**
 *	This type represents an attribute whose value is a date with time.
 *
 */
export interface DateTimeAttribute extends IAttribute {
  readonly type: 'datetime'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A date with time in the format `YYYY-MM-DDTHH:mm:ss.SSSZ`.
   *	The time zone is optional and defaults to UTC if not specified.
   *	If the time zone is specified, it must be in the format `±HH:mm` or `Z` for UTC.
   *
   *
   */
  readonly value: string
}
/**
 *	This type represents an attribute whose value is a set of dates with time.
 *
 */
export interface DateTimeSetAttribute extends IAttribute {
  readonly type: 'datetime-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of dates with time in the format `YYYY-MM-DDTHH:mm:ss.SSSZ`.
   *	The time zone is optional and defaults to UTC if not specified.
   *	If the time zone is specified, it must be in the format `±HH:mm` or `Z` for UTC.
   *
   *
   */
  readonly value: string[]
}
/**
 *	This type represents an attribute whose value is an enum.
 *	The attribute value refers to the key of the enum value.
 *
 */
export interface EnumAttribute extends IAttribute {
  readonly type: 'enum'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	The key of the enum value.
   *	Must match the key of an [AttributePlainEnumValue](ctp:api:type:AttributePlainEnumValue) in the Product Type.
   *
   *
   */
  readonly value: string
}
/**
 *	This type represents an attribute whose value is an enum.
 *	The attribute value refers to the key of the enum value.
 *
 */
export interface EnumSetAttribute extends IAttribute {
  readonly type: 'enum-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of enum values, each represented by its key.
   *	Each key must match the key of an [AttributePlainEnumValue](ctp:api:type:AttributePlainEnumValue) in the Product Type.
   *
   *
   */
  readonly value: string[]
}
/**
 *	This type represents an attribute whose value is a localized enum.
 *	The attribute value refers to the key of the enum value.
 *
 */
export interface LocalizableEnumAttribute extends IAttribute {
  readonly type: 'lenum'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	The key of the localized enum value.
   *	Must match the key of an [AttributeLocalizedEnumValue](ctp:api:type:AttributeLocalizedEnumValue) in the Product Type.
   *
   *
   */
  readonly value: string
}
/**
 *	This type represents an attribute whose value is a localized enum.
 *	The attribute value refers to the key of the enum value.
 *
 */
export interface LocalizableEnumSetAttribute extends IAttribute {
  readonly type: 'lenum-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of localized enum values, each represented by its key.
   *	Each key must match the key of an [AttributeLocalizedEnumValue](ctp:api:type:AttributeLocalizedEnumValue) in the Product Type.
   *
   *
   */
  readonly value: string[]
}
/**
 *	This type represents an attribute whose value is a localized text.
 *
 */
export interface LocalizableTextAttribute extends IAttribute {
  readonly type: 'ltext'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A localized string.
   *
   *
   */
  readonly value: LocalizedString
}
/**
 *	This type represents an attribute whose value is a localized text.
 *
 */
export interface LocalizableTextSetAttribute extends IAttribute {
  readonly type: 'ltext-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of localized strings.
   *
   *
   */
  readonly value: LocalizedString[]
}
/**
 *	This type represents an attribute whose value is a money object.
 *
 */
export interface MoneyAttribute extends IAttribute {
  readonly type: 'money'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A money value in cent precision format.
   *
   *
   */
  readonly value: Money
}
/**
 *	This type represents an attribute whose value is a set of money objects.
 *
 */
export interface MoneySetAttribute extends IAttribute {
  readonly type: 'money-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of money values in cent precision format.
   *
   *
   */
  readonly value: Money[]
}
/**
 *	This type represents an attribute whose value is a number.
 *
 */
export interface NumberAttribute extends IAttribute {
  readonly type: 'number'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A number value.
   *	Can be an integer or a floating-point number.
   *
   *
   */
  readonly value: number
}
/**
 *	This type represents an attribute whose value is a set of numbers.
 *
 */
export interface NumberSetAttribute extends IAttribute {
  readonly type: 'number-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of number values.
   *	Each value can be an integer or a floating-point number.
   *
   *
   */
  readonly value: number[]
}
/**
 *	This type represents an attribute whose value is a key reference.
 *
 */
export interface ReferenceAttribute extends IAttribute {
  readonly type: 'reference'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	References a resource by key.
   *
   */
  readonly value: KeyReference
}
/**
 *	This type represents an attribute whose value is a set of references.
 *
 */
export interface ReferenceSetAttribute extends IAttribute {
  readonly type: 'reference-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of references, each referencing a resource by key.
   *	Each reference must match the key of an existing resource in the project.
   *
   *
   */
  readonly value: KeyReference[]
}
/**
 *	This type represents an attribute whose value is a string.
 *
 */
export interface TextAttribute extends IAttribute {
  readonly type: 'text'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A text value.
   *
   *
   */
  readonly value: string
}
/**
 *	This type represents an attribute whose value is a set of strings.
 *
 */
export interface TextSetAttribute extends IAttribute {
  readonly type: 'text-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of text values.
   *
   *
   */
  readonly value: string[]
}
/**
 *	This type represents an attribute whose value is a time.
 *
 */
export interface TimeAttribute extends IAttribute {
  readonly type: 'time'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A time value in the format `HH:mm:ss.SSS`.
   *	The time zone is optional and defaults to UTC if not specified.
   *	If the time zone is specified, it must be in the format `±HH:mm` or `Z` for UTC.
   *
   *
   */
  readonly value: string
}
/**
 *	This type represents an attribute whose value is a set of times.
 *
 */
export interface TimeSetAttribute extends IAttribute {
  readonly type: 'time-set'
  /**
   *	Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
   *	Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).
   *
   *	Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
   *
   *
   */
  readonly name?: string
  /**
   *	A set of time values in the format `HH:mm:ss.SSS`.
   *	The time zone is optional and defaults to UTC if not specified.
   *	If the time zone is specified, it must be in the format `±HH:mm` or `Z` for UTC.
   *
   *
   */
  readonly value: string[]
}
/**
 *	Represents the data used to import a ProductVariant. Once imported, this data is persisted as a [ProductVariant](ctp:api:type:ProductVariant) in the Project.
 *
 */
export interface ProductVariantImport extends ImportResource {
  /**
   *	User-defined unique identifier. If a [ProductVariant](ctp:api:type:ProductVariant) with this `key` exists on the specified `product`, it is updated with the imported data.
   *
   */
  readonly key: string
  /**
   *	Maps to `ProductVariant.sku`.
   *
   *
   */
  readonly sku?: string
  /**
   *	- When creating a new ProductVariant, set to `false`; otherwise, the import operation will fail with a [NewMasterVariantAdditionNotAllowed](ctp:import:type:NewMasterVariantAdditionNotAllowedError) error.
   *	- Set to `true` if the ProductVariant exists and you want to set this ProductVariant as the Master Variant.
   *
   *
   */
  readonly isMasterVariant: boolean
  /**
   *	Maps to `ProductVariant.attributes`.
   *	The referenced attribute must be defined in an already existing ProductType in the project, or the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be `unresolved`.
   *
   *
   */
  readonly attributes?: Attribute[]
  /**
   *	Maps to `ProductVariant.images`.
   *
   *
   */
  readonly images?: Image[]
  /**
   *	Maps to `ProductVariant.assets`.
   *
   *
   */
  readonly assets?: Asset[]
  /**
   *	- Set to `false` to update both the [current and staged projections](/../api/projects/productProjections#current--staged) of the [Product](ctp:api:type:Product) with the new Product Variant data.
   *	- Leave empty or set to `true` to only update the staged projection.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The [Product](ctp:api:type:ProductVariant) containing this ProductVariant. If the referenced Product does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Product is created.
   *
   *
   */
  readonly product: ProductKeyReference
}
/**
 *	Represents the data used to update a [ProductVariant](ctp:api:type:ProductVariant).
 *
 */
export interface ProductVariantPatch {
  /**
   *	Reference to the [ProductVariant](ctp:api:type:ProductVariant) to update.
   *
   *
   */
  readonly productVariant: ProductVariantKeyReference
  /**
   *	Maps to `ProductVariant.attributes`.
   *	- The referenced Attribute must be defined in an existing [ProductType](ctp:api:type:ProductType), or the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be `validationFailed`.
   *	- Setting the value of a non-required Attribute to `null` will remove the Attribute.
   *	- Attempting to set a `null` value to a required Attribute will make the import operation fail with an [InvalidOperation](ctp:import:type:InvalidOperation) error.
   *	- Importing [LocalizableTextAttributes](ctp:import:type:LocalizableTextAttribute) or [LocalizableTextSetAttributes](ctp:import:type:LocalizableTextSetAttribute) follows an override pattern, meaning that omitted localized fields will be deleted, new fields will be created, and existing fields will be updated. You can delete localized fields by setting their value to `null`.
   *
   *
   */
  readonly attributes?: Attributes
  /**
   *	If `false`, the attribute changes are applied to both [current and staged projected representations](/projects/productProjections#current--staged) of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly staged?: boolean
  /**
   *	Reference to the [Product](ctp:api:type:Product) that contains the ProductVariant.
   *
   *	We recommend to set this value to minimize concurrency errors.
   *	If set, this field is required for every ProductVariantPatch in the [ProductVariantPatchRequest](ctp:import:type:ProductVariantPatchRequest).
   *
   *	If the referenced Product does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Product is created.
   *
   *
   */
  readonly product?: ProductKeyReference
}
export interface Attributes {
  [key: string]: Attribute | null
}
