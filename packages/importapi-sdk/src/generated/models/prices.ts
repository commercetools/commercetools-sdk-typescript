/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  ChannelKeyReference,
  CustomerGroupKeyReference,
  DiscountedPrice,
  ImportResource,
  PriceTier,
  ProductKeyReference,
  ProductVariantKeyReference,
  TypedMoney,
} from './common'
import { Custom } from './customfields'

export interface SubRate {
  /**
   *	Name of the SubRate.
   *
   *
   */
  readonly name: string
  /**
   *
   */
  readonly amount: number
}
export interface TaxRate {
  /**
   *
   */
  readonly id?: string
  /**
   *
   */
  readonly name: string
  /**
   *
   */
  readonly amount: number
  /**
   *
   */
  readonly includedInPrice: boolean
  /**
   *	A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   *
   *
   */
  readonly country: string
  /**
   *
   */
  readonly state?: string
  /**
   *
   */
  readonly subRates?: SubRate[]
}
/**
 *	Represents the data used to import an [Embedded Price](/../api/pricing-and-discounts-overview#embedded-prices) . Once imported, this data is persisted as a [Price](/../api/types#price) in a Product Variant.
 *
 */
export interface PriceImport extends ImportResource {
  /**
   *	User-defined unique identifier for the Embedded Price. If a [Price](/../api/types#price) with this `key` exists on the specified `productVariant`, it is updated with the imported data.
   *
   *
   */
  readonly key: string
  /**
   *	Maps to `Price.value`.
   *
   *
   */
  readonly value: TypedMoney
  /**
   *	Maps to `Price.county`.
   *
   *
   */
  readonly country?: string
  /**
   *	Maps to `Price.validFrom`.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Maps to `Price.validUntil`.
   *
   *
   */
  readonly validUntil?: string
  /**
   *	Maps to `Price.customerGroup`. If the referenced [CustomerGroup](ctp:api:type:CustomerGroup) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced CustomerGroup is created.
   *
   *
   */
  readonly customerGroup?: CustomerGroupKeyReference
  /**
   *	Maps to `Price.channel`. If the referenced [Channel](ctp:api:type:Channel) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Channel is created.
   *
   *
   */
  readonly channel?: ChannelKeyReference
  /**
   *	Sets a discounted price from an external service.
   *
   */
  readonly discounted?: DiscountedPrice
  /**
   *	- Set to `false` to update both the [current and staged projections](/../api/projects/productProjections#current--staged) of the [Product](ctp:api:type:Product) with the new Price data.
   *	- Leave empty or set to `true` to only update the staged projection.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The tiered prices for this price.
   *
   */
  readonly tiers?: PriceTier[]
  /**
   *	Maps to `Price.custom`.
   *
   */
  readonly custom?: Custom
  /**
   *	The [ProductVariant](ctp:api:type:ProductVariant) which contains this Embedded Price. If the referenced ProductVariant does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced ProductVariant is created.
   *
   *
   */
  readonly productVariant: ProductVariantKeyReference
  /**
   *	The [Product](ctp:api:type:Product) which contains the `productVariant`. If the referenced Product does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Product is created.
   *
   *
   */
  readonly product: ProductKeyReference
}
