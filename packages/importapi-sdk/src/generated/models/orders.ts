/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  Address,
  CartDiscountKeyReference,
  ChannelKeyReference,
  CustomerGroupKeyReference,
  CustomerKeyReference,
  DiscountCodeKeyReference,
  DiscountedPrice,
  Image,
  LocalizedString,
  Money,
  PriceTier,
  ProductKeyReference,
  ProductVariantKeyReference,
  ShippingMethodKeyReference,
  StateKeyReference,
  TaxCategoryKeyReference,
  TypedMoney,
} from './common'
import { Custom } from './customfields'
import { SubRate, TaxRate } from './prices'
import { Attribute } from './productvariants'

/**
 *	The item's state.
 *
 */
export interface ItemState {
  /**
   *
   */
  readonly quantity: number
  /**
   *	Maps to `ItemState.state`.
   *
   *
   */
  readonly state: StateKeyReference
}
/**
 *	The item's shipping target.
 *
 */
export interface ItemShippingTarget {
  /**
   *	Maps to `ItemShippingTarget.addressKey`.
   *
   *
   */
  readonly addressKey: string
  /**
   *	Maps to `ItemShippingTarget.quantity`.
   *
   *
   */
  readonly quantity: number
}
export interface ItemShippingDetailsDraft {
  /**
   *	Maps to `ItemShippingDetailsDraft.targets`.
   *
   *
   */
  readonly targets: ItemShippingTarget[]
}
export interface LineItemPrice {
  /**
   *	Maps to `Price.value`. TypedMoney is what is called BaseMoney in the HTTP API.
   *
   *
   */
  readonly value: TypedMoney
  /**
   *	Maps to `Price.county`.
   *
   *
   */
  readonly country?: string
  /**
   *	Maps to `Price.validFrom`.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Maps to `Price.validUntil`.
   *
   *
   */
  readonly validUntil?: string
  /**
   *	References a customer group by its key.
   *
   *
   */
  readonly customerGroup?: CustomerGroupKeyReference
  /**
   *	References a channel by its key.
   *
   *
   */
  readonly channel?: ChannelKeyReference
  /**
   *	Sets a discounted price from an external service.
   *
   */
  readonly discounted?: DiscountedPrice
  /**
   *	The tiered prices for this price.
   *
   */
  readonly tiers?: PriceTier[]
  /**
   *	Maps to `Price.custom`.
   *
   *
   */
  readonly custom?: Custom
}
export interface LineItemProductVariantImportDraft {
  /**
   *	Maps to `ProductVariant.product`.
   *
   *
   */
  readonly productVariant?: ProductVariantKeyReference
  /**
   *	Maps to `ProductVariantImportDraft.sku`.
   *
   *
   */
  readonly sku?: string
  /**
   *	Maps to `ProductVariantImportDraft.prices`
   *
   *
   */
  readonly prices?: LineItemPrice[]
  /**
   *	Maps to `ProductVariantImportDraft.attributes`
   *
   *
   */
  readonly attributes?: Attribute[]
  /**
   *	Maps to `ProductVariantImportDraft.images`.
   *
   *
   */
  readonly images?: Image[]
}
/**
 *	Represents an individual Line Item in an Order. A line item is a snapshot of a product at the time it was added to the order.
 *
 *	You cannot create an Order that includes line item operations that do not exist in the Project or have been deleted.
 *	Products and Product Variants referenced by a line item must already exist in the commercetools Project.
 *
 */
export interface LineItemImportDraft {
  /**
   *	Maps to `LineItem.productId`.
   *
   *
   */
  readonly product?: ProductKeyReference
  /**
   *	Maps to `LineItem.name`.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	Maps to `ProductVariantImportDraft`.
   *
   *
   */
  readonly variant: LineItemProductVariantImportDraft
  /**
   *	Maps to `LineItem.price`.
   *
   *
   */
  readonly price: LineItemPrice
  /**
   *	Maps to `LineItem.quantity`.
   *
   *
   */
  readonly quantity: number
  /**
   *
   */
  readonly state?: ItemState[]
  /**
   *	Maps to `LineItem.supplyChannel`.
   *	The Reference to the Supply [Channel](/../api/projects/channels#channel) with which the LineItem is associated.
   *	If referenced Supply Channel does not exist, the `state` of the [ImportOperation](/import-operation#importoperation) will be set to `Unresolved` until the necessary Supply Channel is created.
   *
   *
   */
  readonly supplyChannel?: ChannelKeyReference
  /**
   *	Maps to `LineItem.distributionChannel`.
   *	The Reference to the Distribution [Channel](/../api/projects/channels#channel) with which the LineItem is associated.
   *	If referenced CustomerGroup does not exist, the `state` of the [ImportOperation](/import-operation#importoperation) will be set to `Unresolved` until the necessary Distribution Channel is created.
   *
   *
   */
  readonly distributionChannel?: ChannelKeyReference
  /**
   *	Maps to `LineItem.taxRate`.
   *
   *
   */
  readonly taxRate?: TaxRate
  /**
   *	Maps to LineItem.shippingDetails.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export type ShippingRateTierType =
  | 'CartClassification'
  | 'CartScore'
  | 'CartValue'
export type ShippingRatePriceTier = CartClassificationTier
export interface CartClassificationTier {
  readonly type: 'CartClassification'
  /**
   *
   */
  readonly value: string
  /**
   *
   */
  readonly price: Money
  /**
   *
   */
  readonly tiers: ShippingRatePriceTier[]
  /**
   *
   */
  readonly isMatching?: boolean
}
export interface ShippingRateDraft {
  /**
   *
   */
  readonly price: Money
  /**
   *
   */
  readonly freeAbove?: Money
  /**
   *
   */
  readonly tiers?: ShippingRatePriceTier[]
}
export interface ParcelMeasurements {
  /**
   *
   */
  readonly heightInMillimeter?: number
  /**
   *
   */
  readonly lengthInMillimeter?: number
  /**
   *
   */
  readonly widthInMillimeter?: number
  /**
   *
   */
  readonly weightInGram?: number
}
export interface TrackingData {
  /**
   *
   */
  readonly trackingId?: string
  /**
   *
   */
  readonly carrier?: string
  /**
   *
   */
  readonly provider?: string
  /**
   *
   */
  readonly providerTransaction?: string
  /**
   *
   */
  readonly isReturn?: boolean
}
export interface DeliveryItem {
  /**
   *
   */
  readonly id: string
  /**
   *
   */
  readonly quantity: number
}
export interface Parcel {
  /**
   *
   */
  readonly id: string
  /**
   *
   */
  readonly createdAt: string
  /**
   *
   */
  readonly measurements?: ParcelMeasurements
  /**
   *
   */
  readonly trackingData?: TrackingData
  /**
   *
   */
  readonly items?: DeliveryItem[]
}
export interface Delivery {
  /**
   *
   */
  readonly id: string
  /**
   *
   */
  readonly createdAt: string
  /**
   *
   */
  readonly items: DeliveryItem[]
  /**
   *
   */
  readonly parcels: Parcel[]
  /**
   *
   */
  readonly address?: Address
}
export interface DiscountedLineItemPortion {
  /**
   *	References a cart discount by its key.
   *
   */
  readonly discount: CartDiscountKeyReference
  /**
   *
   */
  readonly discountedAmount: Money
}
export interface DiscountedLineItemPriceDraft {
  /**
   *
   */
  readonly value: Money
  /**
   *
   */
  readonly includedDiscounts: DiscountedLineItemPortion[]
}
export type ShippingMethodState = 'DoesNotMatchCart' | 'MatchesCart'
/**
 *	Maps to an order's `shippingInfo` property. This field is usually populated by the cart assosciated with
 *	the order, but when importing orders you must provide a draft representation as a part of the OrderImport.
 *
 */
export interface ShippingInfoImportDraft {
  /**
   *
   */
  readonly shippingMethodName: string
  /**
   *	TypedMoney is what is called BaseMoney in the HTTP API.
   *
   *
   */
  readonly price: TypedMoney
  /**
   *
   */
  readonly shippingRate: ShippingRateDraft
  /**
   *
   */
  readonly taxRate?: TaxRate
  /**
   *	References a tax category by its key.
   *
   */
  readonly taxCategory?: TaxCategoryKeyReference
  /**
   *	References a shipping method by its key.
   *
   */
  readonly shippingMethod?: ShippingMethodKeyReference
  /**
   *	Note that you can not add a `DeliveryItem` on import, as `LineItems` and `CustomLineItems` are not yet referencable by an `id`.
   *
   */
  readonly deliveries?: Delivery[]
  /**
   *
   */
  readonly discountedPrice?: DiscountedLineItemPriceDraft
  /**
   *
   */
  readonly shippingMethodState?: ShippingMethodState
}
export interface ExternalTaxRateDraft {
  /**
   *
   */
  readonly name: string
  /**
   *
   */
  readonly amount?: number
  /**
   *
   */
  readonly country: string
  /**
   *
   */
  readonly state?: string
  /**
   *
   */
  readonly subRates?: SubRate[]
  /**
   *
   */
  readonly includedInPrice?: boolean
}
export interface CustomLineItemTaxedPrice {
  /**
   *	TypedMoney is what is called BaseMoney in the HTTP API.
   *
   *
   */
  readonly totalNet: TypedMoney
  /**
   *	TypedMoney is what is called BaseMoney in the HTTP API.
   *
   *
   */
  readonly totalGross: TypedMoney
}
export interface CustomLineItemDraft {
  /**
   *	A localized string is a JSON object where the keys are of [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag), and the values the corresponding strings used for that language.
   *	```json
   *	{
   *	  "de": "Hundefutter",
   *	  "en": "dog food"
   *	}
   *	```
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	TypedMoney is what is called BaseMoney in the HTTP API.
   *
   *
   */
  readonly money: TypedMoney
  /**
   *
   */
  readonly taxedPrice?: CustomLineItemTaxedPrice
  /**
   *	TypedMoney is what is called BaseMoney in the HTTP API.
   *
   *
   */
  readonly totalPrice: TypedMoney
  /**
   *
   */
  readonly slug: string
  /**
   *
   */
  readonly quantity: number
  /**
   *
   */
  readonly state?: ItemState[]
  /**
   *	References a tax category by its key.
   *
   */
  readonly taxCategory?: TaxCategoryKeyReference
  /**
   *
   */
  readonly taxRate?: TaxRate
  /**
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *
   */
  readonly discountedPricePerQuantity?: DiscountedLineItemPriceDraft[]
  /**
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export interface TaxPortion {
  /**
   *
   */
  readonly name?: string
  /**
   *
   */
  readonly rate: number
  /**
   *	TypedMoney is what is called BaseMoney in the HTTP API.
   *
   *
   */
  readonly amount: TypedMoney
}
export interface TaxedPrice {
  /**
   *	Maps to `TaxedPrice.totalNet`.
   *
   */
  readonly totalNet: Money
  /**
   *	Maps to `TaxedPrice.totalGross`.
   *
   */
  readonly totalGross: Money
  /**
   *	Maps to `TaxedPrice.taxPortions`.
   *
   */
  readonly taxPortions: TaxPortion[]
}
/**
 *	Maps to `Order.taxMode`
 */
export type TaxMode = 'Disabled' | 'External' | 'ExternalAmount' | 'Platform'
/**
 *	Maps to `Order.orderState`.
 */
export type OrderState = 'Cancelled' | 'Complete' | 'Confirmed' | 'Open'
/**
 *	Maps to `Order.shipmentState`.
 */
export type ShipmentState =
  | 'Backorder'
  | 'Delayed'
  | 'Partial'
  | 'Pending'
  | 'Ready'
  | 'Shipped'
/**
 *	Maps to `Order.paymentState`.
 */
export type PaymentState =
  | 'BalanceDue'
  | 'CreditOwed'
  | 'Failed'
  | 'Paid'
  | 'Pending'
/**
 *	Maps to `Order.inventoryMode`.
 */
export type InventoryMode = 'ReserveOnOrder' | 'TrackOnly'
/**
 *	Maps to `Order.taxRoundingMode`.
 */
export type RoundingMode = 'HalfDown' | 'HalfEven' | 'HalfUp'
/**
 *	Maps to `Order.taxCalculationMode`.
 */
export type TaxCalculationMode = 'LineItemLevel' | 'UnitPriceLevel'
/**
 *	Maps to `Order.origin`.
 */
export type CartOrigin = 'Customer' | 'Merchant'
export interface SyncInfo {
  /**
   *	Maps to `SyncInfo.channel`
   *
   */
  readonly channel: ChannelKeyReference
  /**
   *	Maps to `SyncInfo.externalId`
   *
   */
  readonly externalId?: string
  /**
   *	Maps to `SyncInfo.syncedAt`
   *
   */
  readonly syncedAt: string
}
/**
 *	Maps to `DiscountCodeInfo.state`
 */
export type DiscountCodeState =
  | 'ApplicationStoppedByPreviousDiscount'
  | 'DoesNotMatchCart'
  | 'MatchesCart'
  | 'MaxApplicationReached'
  | 'NotActive'
  | 'NotValid'
export interface DiscountCodeInfo {
  /**
   *	References a discount code by its key.
   *
   */
  readonly discountCode: DiscountCodeKeyReference
  /**
   *	Maps to `DiscountCodeInfo.state`
   *
   */
  readonly state?: DiscountCodeState
}
export type ShippingRateInputType = 'Classification' | 'Score'
export type ShippingRateInput =
  | ClassificationShippingRateInput
  | ScoreShippingRateInput
export interface ClassificationShippingRateInput {
  readonly type: 'Classification'
  /**
   *
   */
  readonly key: string
  /**
   *	A localized string is a JSON object where the keys are of [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag), and the values the corresponding strings used for that language.
   *	```json
   *	{
   *	  "de": "Hundefutter",
   *	  "en": "dog food"
   *	}
   *	```
   *
   *
   */
  readonly label: LocalizedString
}
export interface ScoreShippingRateInput {
  readonly type: 'Score'
  /**
   *
   */
  readonly score: number
}
/**
 *	The data representation for an Order to be imported that is persisted as an [Order](/../api/projects/orders#top) in the Project.
 *
 *	In commercetools, you can import an Order using the
 *	[Create Order by Import](https://docs.commercetools.com/http-api-projects-orders-import.html#create-an-order-by-import)
 *	endpoint method instead of creating it from a Cart.
 *
 *	An OrderImport is a snapshot of an order at the time it was imported.
 *
 */
export interface OrderImport {
  /**
   *	Maps to `Order.orderNumber`, String that uniquely identifies an order. It should be unique across a project. Once it's set it cannot be changed.
   *
   *
   */
  readonly orderNumber: string
  /**
   *
   */
  readonly customer?: CustomerKeyReference
  /**
   *	Maps to `Order.customerEmail`.
   *
   *
   */
  readonly customerEmail?: string
  /**
   *	Maps to `Order.lineItems`.
   *
   *
   */
  readonly lineItems?: LineItemImportDraft[]
  /**
   *	Maps to `Order.customLineItems`
   *
   *
   */
  readonly customLineItems?: CustomLineItemDraft[]
  /**
   *	Maps to `Order.totalPrice`. TypedMoney is what is called BaseMoney in the HTTP API.
   *
   *
   */
  readonly totalPrice: TypedMoney
  /**
   *	Maps to `Order.taxedPrice`.
   *
   *
   */
  readonly taxedPrice?: TaxedPrice
  /**
   *	Maps to `Order.shippingAddress`.
   *
   *
   */
  readonly shippingAddress?: Address
  /**
   *	Maps to `Order.billingAddress`.
   *
   *
   */
  readonly billingAddress?: Address
  /**
   *	Maps to `Order.customerGroup`.
   *
   *
   */
  readonly customerGroup?: CustomerGroupKeyReference
  /**
   *	Maps to `Order.country`.
   *
   *
   */
  readonly country?: string
  /**
   *	Maps to `Order.orderState`.
   *
   *
   */
  readonly orderState?: OrderState
  /**
   *	Maps to `Order.shipmentState`.
   *
   *
   */
  readonly shipmentState?: ShipmentState
  /**
   *	Maps to `Order.paymentState`.
   *
   *
   */
  readonly paymentState?: PaymentState
  /**
   *	Maps to `Order.shippingInfo`.
   *
   *
   */
  readonly shippingInfo?: ShippingInfoImportDraft
  /**
   *	Maps to `Order.completedAt`.
   *
   *
   */
  readonly completedAt?: string
  /**
   *	Maps to `Order.custom`.
   *
   *
   */
  readonly custom?: Custom
  /**
   *	Maps to `Order.inventoryMode`.
   *
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	Maps to `Order.taxRoundingMode`.
   *
   *
   */
  readonly taxRoundingMode?: RoundingMode
  /**
   *	Maps to `Order.taxCalculationMode`.
   *
   *
   */
  readonly taxCalculationMode?: TaxCalculationMode
  /**
   *	Maps to `Order.origin`.
   *
   *
   */
  readonly origin?: CartOrigin
  /**
   *	Maps to `Order.itemShippingAddresses`.
   *
   *
   */
  readonly itemShippingAddresses?: Address[]
}
