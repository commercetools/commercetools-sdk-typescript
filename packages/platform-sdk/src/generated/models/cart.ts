/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  BusinessUnitKeyReference,
  BusinessUnitResourceIdentifier,
} from './business-unit'
import {
  CartDiscountReference,
  CartDiscountTarget,
  CartDiscountValue,
} from './cart-discount'
import { ChannelReference, ChannelResourceIdentifier } from './channel'
import {
  Address,
  BaseAddress,
  BaseResource,
  CentPrecisionMoney,
  CreatedBy,
  LastModifiedBy,
  LocalizedString,
  Price,
  Reference,
  TypedMoney,
  _BaseAddress,
  _Money,
} from './common'
import {
  CustomerGroupReference,
  CustomerGroupResourceIdentifier,
} from './customer-group'
import { DiscountCodeReference } from './discount-code'
import {
  Delivery,
  DeliveryDraft,
  ItemState,
  OrderReference,
  PaymentInfo,
} from './order'
import { PaymentResourceIdentifier } from './payment'
import { ProductVariant } from './product'
import { ProductTypeReference } from './product-type'
import {
  ShippingMethodReference,
  ShippingMethodResourceIdentifier,
  ShippingRate,
  ShippingRateDraft,
} from './shipping-method'
import { ShoppingListResourceIdentifier } from './shopping-list'
import { StoreKeyReference, StoreResourceIdentifier } from './store'
import {
  SubRate,
  TaxCategoryReference,
  TaxCategoryResourceIdentifier,
  TaxRate,
} from './tax-category'
import {
  CustomFields,
  CustomFieldsDraft,
  FieldContainer,
  TypeResourceIdentifier,
} from './type'

export interface Cart extends BaseResource {
  /**
   *	Unique identifier of the Cart.
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the Cart.
   *
   *
   */
  readonly version: number
  /**
   *	User-defined unique identifier of the Cart.
   *
   *
   */
  readonly key?: string
  /**
   *	`id` of the [Customer](ctp:api:type:Customer) that the Cart belongs to.
   *
   *
   */
  readonly customerId?: string
  /**
   *	Email address of the Customer that the Cart belongs to.
   *
   *
   */
  readonly customerEmail?: string
  /**
   *	[Reference](ctp:api:type:Reference) to the Customer Group of the Customer that the Cart belongs to. Used for [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
   *
   *
   */
  readonly customerGroup?: CustomerGroupReference
  /**
   *	[Anonymous session](ctp:api:type:AnonymousSession) associated with the Cart.
   *
   *
   */
  readonly anonymousId?: string
  /**
   *	[Reference](ctp:api:type:Reference) to a Business Unit the Cart belongs to.
   *
   *
   */
  readonly businessUnit?: BusinessUnitKeyReference
  /**
   *	[Reference](ctp:api:type:Reference) to a Store the Cart belongs to.
   *
   *
   */
  readonly store?: StoreKeyReference
  /**
   *	[Line Items](ctp:api:type:LineItems) added to the Cart.
   *
   *
   */
  readonly lineItems: LineItem[]
  /**
   *	[Custom Line Items](ctp:api:type:CustomLineItems) added to the Cart.
   *
   *
   */
  readonly customLineItems: CustomLineItem[]
  /**
   *	Sum of all [LineItem](ctp:api:type:LineItem) quantities, excluding [CustomLineItems](ctp:api:type:CustomLineItem). Only present when the Cart has at least one LineItem.
   *
   *
   */
  readonly totalLineItemQuantity?: number
  /**
   *	Sum of the `totalPrice` field of all [LineItems](ctp:api:type:LineItem) and [CustomLineItems](ctp:api:type:CustomLineItem), and if available, the `price` field of [ShippingInfo](ctp:api:type:ShippingInfo).
   *
   *	Taxes are included if [TaxRate](ctp:api:type:TaxRate) `includedInPrice` is `true` for each price.
   *
   *
   */
  readonly totalPrice: CentPrecisionMoney
  /**
   *	- For a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode), it is automatically set when a [shipping address is set](ctp:api:type:CartSetShippingAddressAction).
   *	- For a Cart with `External` [TaxMode](ctp:api:type:TaxMode), it is automatically set when the external Tax Rate for all Line Items, Custom Line Items, and Shipping Methods in the Cart are set.
   *
   *
   */
  readonly taxedPrice?: TaxedPrice
  /**
   *	Sum of the `taxedPrice` field of [ShippingInfo](ctp:api:type:ShippingInfo) across all Shipping Methods.
   *
   */
  readonly taxedShippingPrice?: TaxedPrice
  /**
   *	Indicates how Tax Rates are set.
   *
   *
   */
  readonly taxMode: TaxMode
  /**
   *	Indicates how monetary values are rounded when calculating taxes for `taxedPrice`.
   *
   *
   */
  readonly taxRoundingMode: RoundingMode
  /**
   *	Indicates how taxes are calculated when calculating taxes for `taxedPrice`.
   *
   *
   */
  readonly taxCalculationMode: TaxCalculationMode
  /**
   *	Indicates how stock quantities are tracked for Line Items in the Cart.
   *
   *
   */
  readonly inventoryMode: InventoryMode
  /**
   *	Current status of the Cart.
   *
   *
   */
  readonly cartState: CartState
  /**
   *	Billing address associated with the Cart.
   *
   *
   */
  readonly billingAddress?: Address
  /**
   *	Shipping address associated with the Cart. Determines eligible [ShippingMethod](ctp:api:type:ShippingMethod) rates and Tax Rates of Line Items.
   *
   *
   */
  readonly shippingAddress?: Address
  /**
   *	Indicates whether the Cart has one or multiple Shipping Methods.
   *
   */
  readonly shippingMode: ShippingMode
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Single` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Shipping-related information of a Cart with `Single` [ShippingMode](ctp:api:type:ShippingMode). Automatically set when a [Shipping Method is set](ctp:api:type:CartSetShippingMethodAction).
   *
   *
   */
  readonly shippingInfo?: ShippingInfo
  /**
   *	Input used to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it is [ClassificationShippingRateInput](ctp:api:type:ClassificationShippingRateInput).
   *	- If `CartScore`, it is [ScoreShippingRateInput](ctp:api:type:ScoreShippingRateInput).
   *	- If `CartValue`, it cannot be used.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInput
  /**
   *	Custom Fields of the Shipping Method in a Cart with `Single` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingCustomFields?: CustomFields
  /**
   *	Shipping-related information of a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode). Updated automatically each time a new [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction).
   *
   */
  readonly shipping: Shipping[]
  /**
   *	Additional shipping addresses of the Cart as specified by [LineItems](ctp:api:type:LineItem) using the `shippingDetails` field.
   *
   *	Eligible Shipping Methods or applicable Tax Rates are determined by the address in `shippingAddress`, and not `itemShippingAddresses`.
   *
   *
   */
  readonly itemShippingAddresses: Address[]
  /**
   *	Discount Codes applied to the Cart. A Cart that has `directDiscounts` cannot have `discountCodes`.
   *
   *
   */
  readonly discountCodes: DiscountCodeInfo[]
  /**
   *	Direct Discounts added to the Cart. A Cart that has `discountCodes` cannot have `directDiscounts`.
   *
   *
   */
  readonly directDiscounts: DirectDiscount[]
  /**
   *	Automatically set when a Line Item with `GiftLineItem` [LineItemMode](ctp:api:type:LineItemMode) is [removed](ctp:api:type:CartRemoveLineItemAction) from the Cart.
   *
   *
   */
  readonly refusedGifts: CartDiscountReference[]
  /**
   *	Payment information related to the Cart.
   *
   *
   */
  readonly paymentInfo?: PaymentInfo
  /**
   *	Used for [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
   *
   *
   */
  readonly country?: string
  /**
   *	Languages of the Cart. Can only contain languages supported by the [Project](ctp:api:type:Project).
   *
   *
   */
  readonly locale?: string
  /**
   *	Indicates how the Cart was created.
   *
   *
   */
  readonly origin: CartOrigin
  /**
   *	Custom Fields of the Cart.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	Number of days after which an active Cart is deleted since its last modification. Configured in [Project settings](ctp:api:type:CartsConfiguration).
   *
   *
   */
  readonly deleteDaysAfterLastModification?: number
  /**
   *	Date and time (UTC) the Cart was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the Cart was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Present on resources updated after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly createdBy?: CreatedBy
}
export interface CartDraft {
  /**
   *	Currency the Cart uses.
   *
   *
   */
  readonly currency: string
  /**
   *	User-defined unique identifier for the Cart.
   *
   *
   */
  readonly key?: string
  /**
   *	`id` of the [Customer](ctp:api:type:Customer) that the Cart belongs to.
   *
   *
   */
  readonly customerId?: string
  /**
   *	Email address of the Customer that the Cart belongs to.
   *
   *
   */
  readonly customerEmail?: string
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to the Customer Group of the Customer that the Cart belongs to. Used for [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
   *
   *	It is automatically set if the Customer referenced in `customerId` belongs to a Customer Group.
   *	It can also be set explicitly when no `customerId` is present.
   *
   *
   */
  readonly customerGroup?: CustomerGroupResourceIdentifier
  /**
   *	[Anonymous session](ctp:api:type:AnonymousSession) associated with the Cart.
   *
   *
   */
  readonly anonymousId?: string
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to the Business Unit the Cart should belong to. When the `customerId` of the Cart is also set, the [Customer](ctp:api:type:Customer) must be an [Associate](ctp:api:type:Associate) of the Business Unit.
   *
   *
   */
  readonly businessUnit?: BusinessUnitResourceIdentifier
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to the Store the Cart should belong to. Once set, it cannot be updated.
   *
   *
   */
  readonly store?: StoreResourceIdentifier
  /**
   *	[Line Items](ctp:api:type:LineItems) to add to the Cart.
   *
   *
   */
  readonly lineItems?: LineItemDraft[]
  /**
   *	[Custom Line Items](ctp:api:type:CustomLineItems) to add to the Cart.
   *
   *
   */
  readonly customLineItems?: CustomLineItemDraft[]
  /**
   *	Determines how Tax Rates are set.
   *
   *
   */
  readonly taxMode?: TaxMode
  /**
   *	External Tax Rate for the `shippingMethod` if the Cart has `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRateForShippingMethod?: ExternalTaxRateDraft
  /**
   *	Determines how monetary values are rounded when calculating taxes for `taxedPrice`.
   *
   *
   */
  readonly taxRoundingMode?: RoundingMode
  /**
   *	Determines how taxes are calculated for `taxedPrice`.
   *
   *
   */
  readonly taxCalculationMode?: TaxCalculationMode
  /**
   *	Determines how stock quantities are tracked for Line Items in the Cart.
   *
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	Billing address associated with the Cart.
   *
   *
   */
  readonly billingAddress?: _BaseAddress
  /**
   *	Shipping address associated with the Cart. Determines eligible [ShippingMethod](ctp:api:type:ShippingMethod) rates and Tax Rates of Line Items.
   *
   *
   */
  readonly shippingAddress?: _BaseAddress
  /**
   *	Shipping Method for a Cart with `Single` [ShippingMode](ctp:api:type:ShippingMode). If the referenced [ShippingMethod](ctp:api:type:ShippingMethod) has a `predicate` that does not match the Cart, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned when [creating a Cart](ctp:api:endpoint:/{projectKey}/carts:POST).
   *
   *
   */
  readonly shippingMethod?: ShippingMethodResourceIdentifier
  /**
   *	Used as an input to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it must be [ClassificationShippingRateInputDraft](ctp:api:type:ClassificationShippingRateInputDraft).
   *	- If `CartScore`, it must be [ScoreShippingRateInputDraft](ctp:api:type:ScoreShippingRateInputDraft).
   *	- If `CartValue`, it cannot be set.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	- If set to `Single`, only a single Shipping Method can be added to the Cart.
   *	- If set to `Multiple`, multiple Shipping Methods can be added to the Cart.
   *
   */
  readonly shippingMode?: ShippingMode
  /**
   *	Custom Shipping Methods for a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   */
  readonly customShipping?: CustomShippingDraft[]
  /**
   *	Shipping Methods for a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   */
  readonly shipping?: ShippingDraft[]
  /**
   *	Multiple shipping addresses of the Cart. Each address must contain a `key` that is unique in this Cart.
   *	The keys are used by [LineItems](ctp:api:type:LineItem) to reference these addresses under their `shippingDetails`.
   *
   *	Eligible Shipping Methods or applicable Tax Rates are determined by the address `shippingAddress`, and not `itemShippingAddresses`.
   *
   *
   */
  readonly itemShippingAddresses?: BaseAddress[]
  /**
   *	`code` of the existing [DiscountCodes](ctp:api:type:DiscountCode) to add to the Cart.
   *
   *
   */
  readonly discountCodes?: string[]
  /**
   *	Used for [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
   *	If used for [Create Cart in Store](ctp:api:endpoint:/{projectKey}/in-store/carts:POST), the provided country must be one of the [Store's](ctp:api:type:Store) `countries`.
   *
   *
   */
  readonly country?: string
  /**
   *	Languages of the Cart. Can only contain languages supported by the [Project](ctp:api:type:Project).
   *
   *
   */
  readonly locale?: string
  /**
   *	Indicates how the Cart was created.
   *
   *
   */
  readonly origin?: CartOrigin
  /**
   *	Number of days after which an active Cart is deleted since its last modification.
   *	If not provided, the default value for this field configured in [Project settings](ctp:api:type:CartsConfiguration) is assigned.
   *
   *	Create a [ChangeSubscription](ctp:api:type:ChangeSubscription) for Carts to receive a [ResourceDeletedDeliveryPayload](ctp:api:type:ResourceDeletedDeliveryPayload) upon deletion of the Cart.
   *
   *
   */
  readonly deleteDaysAfterLastModification?: number
  /**
   *	Custom Fields for the Cart.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
/**
 *	Indicates who created the Cart.
 *
 */
export type CartOrigin = 'Customer' | 'Merchant' | 'Quote' | string
/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [Cart](ctp:api:type:Cart).
 *
 */
export interface CartPagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	[Carts](ctp:api:type:Cart) matching the query.
   *
   *
   */
  readonly results: Cart[]
}
/**
 *	[Reference](ctp:api:type:Reference) to a [Cart](ctp:api:type:Cart).
 *
 */
export interface CartReference {
  readonly typeId: 'cart'
  /**
   *	Unique identifier of the referenced [Cart](ctp:api:type:Cart).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded Cart. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for Carts.
   *
   *
   */
  readonly obj?: Cart
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Cart](ctp:api:type:Cart).
 *
 */
export interface CartResourceIdentifier {
  readonly typeId: 'cart'
  /**
   *	Unique identifier of the referenced [Cart](ctp:api:type:Cart). Either `id` or `key` is required.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced [Cart](ctp:api:type:Cart). Either `id` or `key` is required.
   *
   *
   */
  readonly key?: string
}
/**
 *	Indicates the current status of a Cart.
 *
 */
export type CartState = 'Active' | 'Frozen' | 'Merged' | 'Ordered' | string
export interface CartUpdate {
  /**
   *	Expected version of the Cart on which the changes apply.
   *	If the expected version does not match the actual version, a [409 Conflict](/../api/errors#409-conflict) is returned.
   *
   *
   */
  readonly version: number
  /**
   *	Update actions to be performed on the Cart.
   *
   *
   */
  readonly actions: CartUpdateAction[]
}
export type CartUpdateAction =
  | CartAddCustomLineItemAction
  | CartAddCustomShippingMethodAction
  | CartAddDiscountCodeAction
  | CartAddItemShippingAddressAction
  | CartAddLineItemAction
  | CartAddPaymentAction
  | CartAddShippingMethodAction
  | CartAddShoppingListAction
  | CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction
  | CartApplyDeltaToLineItemShippingDetailsTargetsAction
  | CartChangeCustomLineItemMoneyAction
  | CartChangeCustomLineItemPriceModeAction
  | CartChangeCustomLineItemQuantityAction
  | CartChangeLineItemQuantityAction
  | CartChangeTaxCalculationModeAction
  | CartChangeTaxModeAction
  | CartChangeTaxRoundingModeAction
  | CartFreezeCartAction
  | CartRecalculateAction
  | CartRemoveCustomLineItemAction
  | CartRemoveDiscountCodeAction
  | CartRemoveItemShippingAddressAction
  | CartRemoveLineItemAction
  | CartRemovePaymentAction
  | CartRemoveShippingMethodAction
  | CartSetAnonymousIdAction
  | CartSetBillingAddressAction
  | CartSetBillingAddressCustomFieldAction
  | CartSetBillingAddressCustomTypeAction
  | CartSetBusinessUnitAction
  | CartSetCartTotalTaxAction
  | CartSetCountryAction
  | CartSetCustomFieldAction
  | CartSetCustomLineItemCustomFieldAction
  | CartSetCustomLineItemCustomTypeAction
  | CartSetCustomLineItemShippingDetailsAction
  | CartSetCustomLineItemTaxAmountAction
  | CartSetCustomLineItemTaxRateAction
  | CartSetCustomShippingMethodAction
  | CartSetCustomTypeAction
  | CartSetCustomerEmailAction
  | CartSetCustomerGroupAction
  | CartSetCustomerIdAction
  | CartSetDeleteDaysAfterLastModificationAction
  | CartSetDirectDiscountsAction
  | CartSetItemShippingAddressCustomFieldAction
  | CartSetItemShippingAddressCustomTypeAction
  | CartSetKeyAction
  | CartSetLineItemCustomFieldAction
  | CartSetLineItemCustomTypeAction
  | CartSetLineItemDistributionChannelAction
  | CartSetLineItemInventoryModeAction
  | CartSetLineItemPriceAction
  | CartSetLineItemShippingDetailsAction
  | CartSetLineItemSupplyChannelAction
  | CartSetLineItemTaxAmountAction
  | CartSetLineItemTaxRateAction
  | CartSetLineItemTotalPriceAction
  | CartSetLocaleAction
  | CartSetShippingAddressAction
  | CartSetShippingAddressCustomFieldAction
  | CartSetShippingAddressCustomTypeAction
  | CartSetShippingCustomFieldAction
  | CartSetShippingCustomTypeAction
  | CartSetShippingMethodAction
  | CartSetShippingMethodTaxAmountAction
  | CartSetShippingMethodTaxRateAction
  | CartSetShippingRateInputAction
  | CartUnfreezeCartAction
  | CartUpdateItemShippingAddressAction
/**
 *	A generic item that can be added to the Cart but is not bound to a Product that can be used for discounts (negative money), vouchers, complex cart rules, additional services, or fees.
 *	You control the lifecycle of this item.
 *
 */
export interface CustomLineItem {
  /**
   *	Unique identifier of the Custom Line Item.
   *
   *
   */
  readonly id: string
  /**
   *	User-defined unique identifier of the Custom Line Item.
   *
   *
   */
  readonly key?: string
  /**
   *	Name of the Custom Line Item.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	Money value of the Custom Line Item.
   *
   *
   */
  readonly money: TypedMoney
  /**
   *	Automatically set after the `taxRate` is set.
   *
   *
   */
  readonly taxedPrice?: TaxedItemPrice
  /**
   *	Taxed price of the Shipping Method that is automatically set after `perMethodTaxRate` is set.
   *
   */
  readonly taxedPricePortions: MethodTaxedPrice[]
  /**
   *	Total price of the Custom Line Item (`money` multiplied by `quantity`).
   *	If the Custom Line Item is discounted, the total price is `discountedPricePerQuantity` multiplied by `quantity`.
   *
   *	Includes taxes if the [TaxRate](ctp:api:type:TaxRate) `includedInPrice` is `true`.
   *
   *
   */
  readonly totalPrice: CentPrecisionMoney
  /**
   *	User-defined identifier used in a deep-link URL for the Custom Line Item.
   *	It matches the pattern `[a-zA-Z0-9_-]{2,256}`.
   *
   *
   */
  readonly slug: string
  /**
   *	Number of Custom Line Items in the [Cart](ctp:api:type:Cart) or [Order](ctp:api:type:Order).
   *
   *
   */
  readonly quantity: number
  /**
   *	State of the Custom Line Item in the [Cart](ctp:api:type:Cart) or [Order](ctp:api:type:Order).
   *
   *
   */
  readonly state: ItemState[]
  /**
   *	Used to select a Tax Rate when a Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxCategory?: TaxCategoryReference
  /**
   *	- For a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode), the `taxRate` of Custom Line Items is set automatically once a shipping address is set. The rate is based on the [TaxCategory](ctp:api:type:TaxCategory) that applies for the shipping address.
   *	- For a Cart with `External` TaxMode, the `taxRate` of Custom Line Items can be set using [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).
   *
   *
   */
  readonly taxRate?: TaxRate
  /**
   *	Tax Rate per Shipping Method for a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode). For a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode) it is automatically set after the [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction).
   *	For a Cart with `External` [TaxMode](ctp:api:type:TaxMode), the Tax Rate must be set with [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).
   *
   */
  readonly perMethodTaxRate: MethodTaxRate[]
  /**
   *	Discounted price of a single quantity of the Custom Line Item.
   *
   *
   */
  readonly discountedPricePerQuantity: DiscountedLineItemPriceForQuantity[]
  /**
   *	Custom Fields of the Custom Line Item.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	Container for Custom Line Item-specific addresses.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetails
  /**
   *	Indicates whether Cart Discounts with a matching [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget) are applied to the Custom Line Item.
   *
   *
   */
  readonly priceMode: CustomLineItemPriceMode
}
export interface CustomLineItemDraft {
  /**
   *	Name of the Custom Line Item.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	User-defined unique identifier of the Custom Line Item.
   *
   *
   */
  readonly key?: string
  /**
   *	Number of Custom Line Items to add to the Cart.
   *
   *
   */
  readonly quantity?: number
  /**
   *	Money value of the Custom Line Item.
   *	The value can be negative.
   *
   *
   */
  readonly money: _Money
  /**
   *	User-defined identifier used in a deep-link URL for the Custom Line Item.
   *	It must match the pattern `[a-zA-Z0-9_-]{2,256}`.
   *
   *
   */
  readonly slug: string
  /**
   *	Used to select a Tax Rate when a Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *	This field is required for `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	External Tax Rate for the Custom Line Item if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	Custom Fields for the Custom Line Item.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	Container for Custom Line Item-specific addresses.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
  /**
   *	- If `Standard`, Cart Discounts with a matching [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget)
   *	are applied to the Custom Line Item.
   *	- If `External`, Cart Discounts are not considered on the Custom Line Item.
   *
   *
   */
  readonly priceMode: CustomLineItemPriceMode
}
/**
 *	Determines if Cart Discounts can be applied to a Custom Line Item in the Cart.
 *
 */
export type CustomLineItemPriceMode = 'External' | 'Standard' | string
export interface CustomShippingDraft {
  /**
   *	User-defined unique identifier of the custom Shipping Method in the Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly key: string
  /**
   *	Name of the custom Shipping Method.
   *
   *
   */
  readonly shippingMethodName: string
  /**
   *	Determines the shipping rate and Tax Rate of the associated Line Items.
   *
   *
   */
  readonly shippingAddress?: _BaseAddress
  /**
   *	Determines the shipping price.
   *
   *
   */
  readonly shippingRate: ShippingRateDraft
  /**
   *	Input used to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it must be [ClassificationShippingRateInputDraft](ctp:api:type:ClassificationShippingRateInputDraft).
   *	- If `CartScore`, it must be [ScoreShippingRateInputDraft](ctp:api:type:ScoreShippingRateInputDraft).
   *	- If `CartValue`, it cannot be set.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Tax Category used to determine a shipping Tax Rate if the Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	Tax Rate used to tax a shipping expense if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	Deliveries to be shipped with the custom Shipping Method.
   *
   *
   */
  readonly deliveries?: DeliveryDraft[]
  /**
   *	Custom Fields for the custom Shipping Method.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
/**
 *	Represents a [CartDiscount](ctp:api:type:CartDiscount) that is only associated with a single Cart or Order.
 *
 */
export interface DirectDiscount {
  /**
   *	Unique identifier of the Direct Discount.
   *
   *
   */
  readonly id: string
  /**
   *	Effect of the Discount on the Cart.
   *
   *
   */
  readonly value: CartDiscountValue
  /**
   *	Segment of the Cart that is discounted.
   *
   *	Empty when the `value` is set to `giftLineItem`.
   *
   *
   */
  readonly target?: CartDiscountTarget
}
/**
 *	Represents a [CartDiscount](ctp:api:type:CartDiscount) that can only be associated with a single Cart or Order.
 *
 *	Direct Discounts are always active and valid, and have the default `Stacking` [StackingMode](ctp:api:type:StackingMode).
 *	They apply in the order in which they are listed in the `directDiscounts` array of [Carts](ctp:api:type:Cart) or [Orders](ctp:api:type:Order), and do not have a sorting order like Cart Discounts.
 *
 *	If a Direct Discount is present, any matching Cart Discounts in the Project are ignored.
 *	Additionally, a Cart or Order supports either Discount Codes or Direct Discounts at the same time.
 *
 */
export interface DirectDiscountDraft {
  /**
   *	Defines the effect the Discount will have.
   *
   *
   */
  readonly value: CartDiscountValue
  /**
   *	Defines what segment of the Cart will be discounted.
   *
   *	If `value` is set to `giftLineItem`, this must not be set.
   *
   *
   */
  readonly target?: CartDiscountTarget
}
/**
 *	[Reference](ctp:api:type:Reference) to a [DirectDiscount](ctp:api:type:DirectDiscount).
 *
 */
export interface DirectDiscountReference {
  readonly typeId: 'direct-discount'
  /**
   *	Unique identifier of the referenced [DirectDiscount](ctp:api:type:DirectDiscount).
   *
   *
   */
  readonly id: string
}
export interface DiscountCodeInfo {
  /**
   *	Discount Code associated with the Cart or Order.
   *
   *
   */
  readonly discountCode: DiscountCodeReference
  /**
   *	Indicates the state of the Discount Code applied to the Cart or Order.
   *
   *
   */
  readonly state: DiscountCodeState
}
/**
 *	Indicates the state of a Discount Code in a Cart.
 *
 *	If an Order is created from a Cart with a state other than `MatchesCart`, a [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError) error is returned.
 *
 */
export type DiscountCodeState =
  | 'ApplicationStoppedByPreviousDiscount'
  | 'DoesNotMatchCart'
  | 'MatchesCart'
  | 'MaxApplicationReached'
  | 'NotActive'
  | 'NotValid'
  | string
export interface DiscountedLineItemPortion {
  /**
   *	A [CartDiscountReference](ctp:api:type:CartDiscountReference) or [DirectDiscountReference](ctp:api:type:DirectDiscountReference) for the applicable discount on the Line Item.
   *
   *
   */
  readonly discount: Reference
  /**
   *	Money value of the discount applicable.
   *
   *
   */
  readonly discountedAmount: TypedMoney
}
export interface DiscountedLineItemPrice {
  /**
   *	Money value of the discounted Line Item or Custom Line Item.
   *
   *
   */
  readonly value: TypedMoney
  /**
   *	Discount applicable on the Line Item or Custom Line Item.
   *
   *
   */
  readonly includedDiscounts: DiscountedLineItemPortion[]
}
export interface DiscountedLineItemPriceForQuantity {
  /**
   *	Number of Line Items or Custom Line Items in the Cart.
   *
   *
   */
  readonly quantity: number
  /**
   *	Discounted price of the Line Item or Custom Line Item.
   *
   *
   */
  readonly discountedPrice: DiscountedLineItemPrice
}
export interface ExternalLineItemTotalPrice {
  /**
   *	Price of the Line Item.
   *
   *	The value is selected from the Product Variant according to the [Product](ctp:api:type:Product) `priceMode`.
   *
   *
   */
  readonly price: _Money
  /**
   *	Total price of the Line Item.
   *
   *
   */
  readonly totalPrice: _Money
}
/**
 *	Cannot be used in [LineItemDraft](ctp:api:type:LineItemDraft) or [CustomLineItemDraft](ctp:api:type:CustomLineItemDraft).
 *
 *	Can only be set by these update actions:
 *
 *	- [Set LineItem TaxAmount](ctp:api:type:CartSetLineItemTaxAmountAction), [Set CustomLineItem TaxAmount](ctp:api:type:CartSetCustomLineItemTaxAmountAction), or [Set ShippingMethod TaxAmount](ctp:api:type:CartSetShippingMethodTaxAmountAction) on Carts
 *	- [Set LineItem TaxAmount](ctp:api:type:StagedOrderSetLineItemTaxAmountAction), [Set CustomLineItem TaxAmount](ctp:api:type:StagedOrderSetCustomLineItemTaxAmountAction), or [Set ShippingMethod TaxAmount](ctp:api:type:StagedOrderSetShippingMethodTaxAmountAction) on Order Edits
 *
 */
export interface ExternalTaxAmountDraft {
  /**
   *	Total gross amount (`totalNet` + `taxPortions`) of the Line Item or Custom Line Item.
   *
   *
   */
  readonly totalGross: _Money
  /**
   *	Tax Rates and subrates of states and countries.
   *
   *
   */
  readonly taxRate: ExternalTaxRateDraft
}
/**
 *	Controls calculation of taxed prices for Line Items, Custom Line Items, and Shipping Methods as explained in [Cart tax calculation](ctp:api:type:CartTaxCalculation).
 *
 */
export interface ExternalTaxRateDraft {
  /**
   *	Name of the Tax Rate.
   *
   *
   */
  readonly name: string
  /**
   *	Percentage in the range of 0-1.
   *
   *	- If no `subRates` are specified, a value must be defined.
   *	- If `subRates` are specified, this can be omitted or its value must be the sum of all `subRates` amounts.
   *
   *
   */
  readonly amount?: number
  /**
   *	- If set to `false`, the related price is considered the net price and the provided `amount` is applied to calculate the gross price.
   *	- If set to `true`, the related price is considered the gross price, and the provided `amount` is applied to calculate the net price.
   *
   *
   */
  readonly includedInPrice?: boolean
  /**
   *	Country for which the tax applies.
   *
   *
   */
  readonly country: string
  /**
   *	State within the specified country.
   *
   *
   */
  readonly state?: string
  /**
   *	For countries (such as the US) where the total tax is a combination of multiple taxes (such as state and local taxes).
   *
   *
   */
  readonly subRates?: SubRate[]
}
/**
 *	Indicates how Line Items in a Cart are tracked.
 *
 */
export type InventoryMode = 'None' | 'ReserveOnOrder' | 'TrackOnly' | string
export interface ItemShippingDetails {
  /**
   *	Holds information on the quantity of Line Items or Custom Line Items and the address it is shipped.
   *
   *
   */
  readonly targets: ItemShippingTarget[]
  /**
   *	- `true` if the quantity of Line Items or Custom Line Items is equal to the sum of sub-quantities defined in `targets`.
   *	- `false` if the quantity of Line Items or Custom Line Items is not equal to the sum of sub-quantities defined in `targets`.
   *	  Ordering a Cart when the value is `false` returns an [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError) error.
   *
   *
   */
  readonly valid: boolean
}
/**
 *	For order creation and updates, the sum of the `targets` must match the quantity of the Line Items or Custom Line Items.
 *
 */
export interface ItemShippingDetailsDraft {
  /**
   *	Holds information on the quantity of Line Items or Custom Line Items and the address it is shipped.
   *
   *	If multiple shipping addresses are present for a Line Item or Custom Line Item, sub-quantities must be specified.
   *
   *
   */
  readonly targets: ItemShippingTarget[]
}
/**
 *	Determines the address (as a reference to an address in `itemShippingAddresses`) and the quantity shipped to the address.
 *
 *	If multiple shipping addresses are present for a Line Item or Custom Line Item, sub-quantities must be specified.
 *	An array of addresses and sub-quantities is stored per Line Item or Custom Line Item.
 *
 */
export interface ItemShippingTarget {
  /**
   *	Key of the address in the [Cart](ctp:api:type:Cart) `itemShippingAddresses`.
   *	Duplicate address keys are not allowed.
   *
   *
   */
  readonly addressKey: string
  /**
   *	Quantity of Line Items or Custom Line Items shipped to the address with the specified `addressKey`.
   *
   *	If a quantity is updated to `0` when defining [ItemShippingDetailsDraft](ctp:api:type:ItemShippingDetailsDraft), the `targets` are removed from a Line Item or Custom Line Item in the resulting [ItemShippingDetails](ctp:api:type:ItemShippingDetails).
   *
   *
   */
  readonly quantity: number
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *	It connects Line Item quantities with individual shipping addresses.
   *
   */
  readonly shippingMethodKey?: string
}
/**
 *	The representation of a [Line Item](/../api/carts-orders-overview#line-items) in a [Cart](ctp:api:type:Cart) or in an [Order](ctp:api:type:Order).
 *
 */
export interface LineItem {
  /**
   *	Unique identifier of the LineItem.
   *
   *
   */
  readonly id: string
  /**
   *	User-defined unique identifier of the LineItem.
   *
   *
   */
  readonly key?: string
  /**
   *	`id` of the [Product](ctp:api:type:Product) the Line Item is based on.
   *
   *
   */
  readonly productId: string
  /**
   *	`key` of the [Product](ctp:api:type:Product).
   *
   *	This field is only present on:
   *
   *	- Line Items in a [Cart](ctp:api:type:Cart) when the `key` is available on that specific Product at the time the LineItem was created or updated on the Cart.
   *	- Line Items in an [Order](ctp:api:type:Order) when the `key` is available on the specific Product at the time the Order was created from the Cart.
   *
   *	Present on resources created or updated after 3 December 2021.
   *
   *
   */
  readonly productKey?: string
  /**
   *	Name of the Product.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	`slug` of the current version of the Product. Updated automatically if the `slug` changes. Empty if the Product has been deleted.
   *	The `productSlug` field of LineItem is not expanded when using [Reference Expansion](/../api/general-concepts#reference-expansion).
   *
   *
   */
  readonly productSlug?: LocalizedString
  /**
   *	Product Type of the Product.
   *
   *
   */
  readonly productType: ProductTypeReference
  /**
   *	Holds the data of the Product Variant added to the Cart.
   *
   *	The data is saved at the time the Product Variant is added to the Cart and is not updated automatically when Product Variant data changes.
   *	Must be updated using the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
   *
   *
   */
  readonly variant: ProductVariant
  /**
   *	Price of a Line Item selected from the Product Variant according to the [Product](ctp:api:type:Product) `priceMode`. If the `priceMode` is `Embedded` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum) and the `variant` field hasn't been updated, the price may not correspond to a price in `variant.prices`.
   *
   *
   */
  readonly price: Price
  /**
   *	Number of Line Items of the given Product Variant present in the [Cart](ctp:api:type:Cart) or [Order](ctp:api:type:Order).
   *
   *
   */
  readonly quantity: number
  /**
   *	Total price of this Line Item equalling `price` multiplied by `quantity`. If the Line Item is discounted, the total price is the `discountedPricePerQuantity` multiplied by `quantity`.
   *	Includes taxes if the [TaxRate](ctp:api:type:TaxRate) `includedInPrice` is `true`.
   *
   *
   */
  readonly totalPrice: CentPrecisionMoney
  /**
   *	Discounted price of a single quantity of the Line Item.
   *
   *
   */
  readonly discountedPricePerQuantity: DiscountedLineItemPriceForQuantity[]
  /**
   *	Automatically set after `taxRate` is set.
   *
   *
   */
  readonly taxedPrice?: TaxedItemPrice
  /**
   *	Taxed price of the Shipping Method that is automatically set after `perMethodTaxRate` is set.
   *
   */
  readonly taxedPricePortions: MethodTaxedPrice[]
  /**
   *	State of the Line Item in the [Cart](ctp:api:type:Cart) or the [Order](ctp:api:type:Order).
   *
   *
   */
  readonly state: ItemState[]
  /**
   *	- For a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode), the `taxRate` of Line Items is set automatically once a shipping address is set. The rate is based on the [TaxCategory](ctp:api:type:TaxCategory) that applies for the shipping address.
   *	- For a Cart with `External` TaxMode, the `taxRate` of Line Items can be set using [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).
   *
   *
   */
  readonly taxRate?: TaxRate
  /**
   *	Tax Rate per Shipping Method for a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode). For a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode) it is automatically set after the [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction).
   *	For a Cart with `External` [TaxMode](ctp:api:type:TaxMode), the Tax Rate must be set with [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).
   *
   */
  readonly perMethodTaxRate: MethodTaxRate[]
  /**
   *	Identifies [Inventory entries](/../api/projects/inventory) that are reserved. The referenced Channel has the `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly supplyChannel?: ChannelReference
  /**
   *	Used to [select](ctp:api:type:LineItemPriceSelection) a Product Price. The referenced Channel has the `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly distributionChannel?: ChannelReference
  /**
   *	Indicates how the Price for the Line Item is set.
   *
   *
   */
  readonly priceMode: LineItemPriceMode
  /**
   *	Indicates how the Line Item is added to the Cart.
   *
   *
   */
  readonly lineItemMode: LineItemMode
  /**
   *	Inventory mode specific to this Line Item only, and valid for the entire `quantity` of the Line Item.
   *	Only present if the inventory mode is different from the `inventoryMode` specified on the [Cart](ctp:api:type:Cart).
   *
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	Container for Line Item-specific addresses.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetails
  /**
   *	Custom Fields of the Line Item.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	Date and time (UTC) the Line Item was added to the Cart.
   *
   *
   */
  readonly addedAt?: string
  /**
   *	Date and time (UTC) the Line Item was last updated.
   *
   *
   */
  readonly lastModifiedAt?: string
}
/**
 *	For Product Variant identification, either the `productId` and `variantId`, or `sku` must be provided.
 *
 */
export interface LineItemDraft {
  /**
   *	User-defined unique identifier of the LineItem.
   *
   *
   */
  readonly key?: string
  /**
   *	`id` of a published [Product](ctp:api:type:Product).
   *
   *
   */
  readonly productId?: string
  /**
   *	`id` of the [ProductVariant](ctp:api:type:ProductVariant) in the Product.
   *	If not provided, the Master Variant is used.
   *
   *
   */
  readonly variantId?: number
  /**
   *	`sku` of the [ProductVariant](ctp:api:type:ProductVariant).
   *
   *
   */
  readonly sku?: string
  /**
   *	Quantity of the Product Variant to add to the Cart.
   *
   *
   */
  readonly quantity?: number
  /**
   *	Date and time (UTC) the Product Variant is added to the Cart.
   *	If not set, it defaults to the current date and time.
   *
   *	Optional for backwards compatibility reasons.
   *
   *
   */
  readonly addedAt?: string
  /**
   *	Used to [select](ctp:api:type:LineItemPriceSelection) a Product Price.
   *	The referenced Channel must have the `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *	If the Cart is bound to a [Store](ctp:api:type:Store) with `distributionChannels` set,
   *	the Channel must match one of the Store's distribution channels.
   *
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
  /**
   *	Used to identify [Inventory entries](/../api/projects/inventory) that must be reserved.
   *	The referenced Channel must have the `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
  /**
   *	Sets the [LineItem](ctp:api:type:LineItem) `price` value, and the `priceMode` to `ExternalPrice` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
   *
   *
   */
  readonly externalPrice?: _Money
  /**
   *	Sets the [LineItem](ctp:api:type:LineItem) `price` and `totalPrice` values, and the `priceMode` to `ExternalTotal` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
   *
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
  /**
   *	Sets the external Tax Rate for the Line Item, if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	Sets the external Tax Rates for individual Shipping Methods, if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode) and `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly perMethodExternalTaxRate?: MethodExternalTaxRateDraft[]
  /**
   *	Inventory mode specific to the Line Item only, and valid for the entire `quantity` of the Line Item.
   *	Set only if the inventory mode should be different from the `inventoryMode` specified on the [Cart](ctp:api:type:Cart).
   *
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	Container for Line Item-specific addresses.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
  /**
   *	Custom Fields for the Line Item.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
/**
 *	Indicates how a Line Item is added to a Cart.
 *
 */
export type LineItemMode = 'GiftLineItem' | 'Standard' | string
/**
 *	This mode indicates how the price is set for the Line Item.
 *
 */
export type LineItemPriceMode =
  | 'ExternalPrice'
  | 'ExternalTotal'
  | 'Platform'
  | string
export interface MethodExternalTaxRateDraft {
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingMethodKey: string
  /**
   *	External Tax Rate for the Shipping Method, if the Cart has `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxRate?: ExternalTaxRateDraft
}
export interface MethodTaxRate {
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingMethodKey: string
  /**
   *	Tax Rate for the Shipping Method.
   *
   *
   */
  readonly taxRate?: TaxRate
}
export interface MethodTaxedPrice {
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingMethodKey: string
  /**
   *	Taxed price for the Shipping Method.
   *
   *
   */
  readonly taxedPrice?: TaxedItemPrice
}
/**
 *	Used for [replicating an existing Cart](/../api/projects/carts#replicate-cart) or Order.
 *
 */
export interface ReplicaCartDraft {
  /**
   *	[Reference](ctp:api:type:Reference) to a [Cart](ctp:api:type:Cart) or [Order](ctp:api:type:Order) that is replicated.
   *
   *
   */
  readonly reference: CartReference | OrderReference
  /**
   *	User-defined unique identifier for the Cart.
   *
   *
   */
  readonly key?: string
}
/**
 *	Determines how monetary values are rounded.
 *
 */
export type RoundingMode = 'HalfDown' | 'HalfEven' | 'HalfUp' | string
export interface Shipping {
  /**
   *	User-defined unique identifier of the Shipping in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey: string
  /**
   *	Automatically set when the [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction).
   *
   *
   */
  readonly shippingInfo: ShippingInfo
  /**
   *	Determines the shipping rates and Tax Rates of associated Line Items.
   *
   *
   */
  readonly shippingAddress: Address
  /**
   *	Used as an input to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it is [ClassificationShippingRateInput](ctp:api:type:ClassificationShippingRateInput).
   *	- If `CartScore`, it is [ScoreShippingRateInput](ctp:api:type:ScoreShippingRateInput).
   *	- If `CartValue`, it cannot be used.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInput
  /**
   *	Custom Fields of Shipping with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingCustomFields?: CustomFields
}
/**
 *	Wraps all shipping-related information (such as address, rate, deliveries) per Shipping Method for Carts with multiple Shipping Methods.
 *
 */
export interface ShippingDraft {
  /**
   *	User-defined unique identifier for the Shipping in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly key: string
  /**
   *	Shipping Methods added to the Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingMethod?: ShippingMethodReference
  /**
   *	Determines the shipping rate and Tax Rate of the associated Line Items.
   *
   *
   */
  readonly shippingAddress: _BaseAddress
  /**
   *	Input used to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it must be [ClassificationShippingRateInputDraft](ctp:api:type:ClassificationShippingRateInputDraft).
   *	- If `CartScore`, it must be [ScoreShippingRateInputDraft](ctp:api:type:ScoreShippingRateInputDraft).
   *	- If `CartValue`, it cannot be set.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Tax Rate used for taxing a shipping expense if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	Deliveries to be shipped with the Shipping Method.
   *
   *
   */
  readonly deliveries?: DeliveryDraft[]
  /**
   *	Custom Fields for Shipping.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
export interface ShippingInfo {
  /**
   *	Name of the Shipping Method.
   *
   *
   */
  readonly shippingMethodName: string
  /**
   *	Determined based on the [ShippingRate](ctp:api:type:ShippingRate) and its tiered prices, and either the sum of [LineItem](ctp:api:type:LineItem) prices or the `shippingRateInput` field.
   *
   *
   */
  readonly price: CentPrecisionMoney
  /**
   *	Used to determine the price.
   *
   *
   */
  readonly shippingRate: ShippingRate
  /**
   *	Automatically set after the `taxRate` is set.
   *
   *
   */
  readonly taxedPrice?: TaxedItemPrice
  /**
   *	Automatically set in the `Platform` [TaxMode](ctp:api:type:TaxMode) after the [shipping address is set](ctp:api:type:CartSetShippingAddressAction).
   *
   *	For the `External` [TaxMode](ctp:api:type:TaxMode) the Tax Rate must be set explicitly with the [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).
   *
   *
   */
  readonly taxRate?: TaxRate
  /**
   *	Used to select a Tax Rate when a Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxCategory?: TaxCategoryReference
  /**
   *	Not set if a custom Shipping Method is used.
   *
   *
   */
  readonly shippingMethod?: ShippingMethodReference
  /**
   *	Information on how items are delivered to customers.
   *
   *
   */
  readonly deliveries?: Delivery[]
  /**
   *	Discounted price of the Shipping Method.
   *
   *
   */
  readonly discountedPrice?: DiscountedLineItemPrice
  /**
   *	Indicates whether the [ShippingMethod](ctp:api:type:ShippingMethod) referenced in this ShippingInfo is allowed for the Cart.
   *
   *
   */
  readonly shippingMethodState: ShippingMethodState
}
/**
 *	Determines whether a [ShippingMethod](ctp:api:type:ShippingMethod) is allowed for a Cart.
 *
 */
export type ShippingMethodState = 'DoesNotMatchCart' | 'MatchesCart' | string
export type ShippingMode = 'Multiple' | 'Single' | string
export type ShippingRateInput =
  | ClassificationShippingRateInput
  | ScoreShippingRateInput
export interface ClassificationShippingRateInput {
  readonly type: 'Classification'
  /**
   *	Key of the value used as a programmatic identifier.
   *
   *
   */
  readonly key: string
  /**
   *	Descriptive localized label of the value.
   *
   *
   */
  readonly label: LocalizedString
}
export interface ScoreShippingRateInput {
  readonly type: 'Score'
  /**
   *	Abstract value for categorizing a Cart.
   *
   *
   */
  readonly score: number
}
/**
 *	Generic type holding specifc ShippingRateInputDraft types.
 */
export type ShippingRateInputDraft =
  | ClassificationShippingRateInputDraft
  | ScoreShippingRateInputDraft
export interface ClassificationShippingRateInputDraft {
  readonly type: 'Classification'
  /**
   *	Key of the value used as a programmatic identifier.
   *
   *
   */
  readonly key: string
}
export interface ScoreShippingRateInputDraft {
  readonly type: 'Score'
  /**
   *	Abstract value for categorizing a Cart.
   *
   *
   */
  readonly score: number
}
/**
 *	Determines in which [Tax calculation mode](/carts-orders-overview#tax-calculation-mode) taxed prices are calculated.
 *
 */
export type TaxCalculationMode = 'LineItemLevel' | 'UnitPriceLevel' | string
/**
 *	Indicates how taxes are set on the Cart.
 *
 */
export type TaxMode =
  | 'Disabled'
  | 'External'
  | 'ExternalAmount'
  | 'Platform'
  | string
/**
 *	The tax portions are calculated from the [TaxRates](ctp:api:type:TaxRate).
 *	If a Tax Rate has [SubRates](ctp:api:type:SubRate), they are used and can be identified by name.
 *	Tax portions from Line Items with the same `rate` and `name` are accumulated to the same tax portion.
 *
 */
export interface TaxPortion {
  /**
   *	Name of the tax portion.
   *
   *
   */
  readonly name?: string
  /**
   *	A number in the range 0-1.
   *
   *
   */
  readonly rate: number
  /**
   *	Money value of the tax portion.
   *
   *
   */
  readonly amount: CentPrecisionMoney
}
/**
 *	Represents the portions that sum up to the `totalGross` field of a [TaxedPrice](ctp:api:type:TaxedPrice).
 *
 *	The portions are calculated from the [TaxRates](ctp:api:type:TaxRate).
 *	If a Tax Rate has [SubRates](ctp:api:type:SubRate), they are used and can be identified by name.
 *	Tax portions from Line Items with the same `rate` and `name` will be accumulated to the same tax portion.
 *
 */
export interface TaxPortionDraft {
  /**
   *	Name of the tax portion.
   *
   *
   */
  readonly name?: string
  /**
   *	A number in the range 0-1.
   *
   *
   */
  readonly rate: number
  /**
   *	Money value for the tax portion.
   *
   *
   */
  readonly amount: _Money
}
export interface TaxedItemPrice {
  /**
   *	Total net amount of the Line Item or Custom Line Item.
   *
   *
   */
  readonly totalNet: CentPrecisionMoney
  /**
   *	Total gross amount of the Line Item or Custom Line Item.
   *
   *
   */
  readonly totalGross: CentPrecisionMoney
  /**
   *	Total tax applicable for the Line Item or Custom Line Item.
   *	Automatically calculated as the difference between the `totalGross` and `totalNet` values.
   *
   *
   */
  readonly totalTax?: CentPrecisionMoney
}
export interface TaxedPrice {
  /**
   *	Total net price of the Cart or Order.
   *
   *
   */
  readonly totalNet: CentPrecisionMoney
  /**
   *	Total gross price of the Cart or Order.
   *
   *
   */
  readonly totalGross: CentPrecisionMoney
  /**
   *	Taxable portions added to the total net price.
   *
   *	Calculated from the [TaxRates](ctp:api:type:TaxRate).
   *
   *
   */
  readonly taxPortions: TaxPortion[]
  /**
   *	Total tax applicable for the Cart or Order.
   *
   *	Automatically calculated as the difference between the `totalGross` and `totalNet` values.
   *
   *
   */
  readonly totalTax?: CentPrecisionMoney
}
export interface TaxedPriceDraft {
  /**
   *	Total net price of the Cart or Order.
   *
   *
   */
  readonly totalNet: _Money
  /**
   *	Total gross price of the Cart or Order.
   *
   *
   */
  readonly totalGross: _Money
  /**
   *	Taxable portions added to the `totalGross`.
   *
   *	Calculated from the [TaxRates](ctp:api:type:TaxRate).
   *
   *
   */
  readonly taxPortions: TaxPortionDraft[]
}
/**
 *	If the Cart already contains a [CustomLineItem](ctp:api:type:CustomLineItem) with the same `slug`, `name`, `money`, `taxCategory`, `state`,
 *	and Custom Fields, then only the quantity of the existing Custom Line Item is increased.
 *	If [CustomLineItem](ctp:api:type:CustomLineItem) `shippingDetails` are set, they are merged with the `targets` that already exist on the
 *	[ItemShippingDetails](ctp:api:type:ItemShippingDetails) of the Custom Line Item.
 *	In case of overlapping address keys the [ItemShippingTarget](ctp:api:type:ItemShippingTarget) `quantity` is summed up.
 *
 *	If the Cart already contains a Custom Line Item with the same slug that is otherwise not identical, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
 *
 *	If the Tax Rate is not set, a [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError) error is returned.
 *
 */
export interface CartAddCustomLineItemAction {
  readonly action: 'addCustomLineItem'
  /**
   *	Money value of the Custom Line Item.
   *	The value can be negative.
   *
   *
   */
  readonly money: _Money
  /**
   *	Name of the Custom Line Item.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	User-defined unique identifier of the Custom Line Item.
   *
   *
   */
  readonly key?: string
  /**
   *	Number of Custom Line Items to add to the Cart.
   *
   *
   */
  readonly quantity?: number
  /**
   *	User-defined identifier used in a deep-link URL for the Custom Line Item.
   *	It must match the pattern `[a-zA-Z0-9_-]{2,256}`.
   *
   *
   */
  readonly slug: string
  /**
   *	Used to select a Tax Rate when a Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *	If [TaxMode](ctp:api:type:TaxMode) is `Platform`, this field must not be empty.
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	An external Tax Rate can be set if the Cart has `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	Container for Custom Line Item-specific addresses.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
  /**
   *	Custom Fields for the Custom Line Item.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	- If `Standard`, Cart Discounts with a matching [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget)
   *	are applied to the Custom Line Item.
   *	- If `External`, Cart Discounts are not considered on the Custom Line Item.
   *
   *
   */
  readonly priceMode?: CustomLineItemPriceMode
}
/**
 *	To add a custom Shipping Method (independent of the [ShippingMethods](ctp:api:type:ShippingMethod) managed through
 *	the [Shipping Methods API](/projects/shippingMethods)) to the Cart, it **must have** the `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
 *
 */
export interface CartAddCustomShippingMethodAction {
  readonly action: 'addCustomShippingMethod'
  /**
   *	User-defined identifier for the custom Shipping Method that must be unique across the Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey: string
  /**
   *	Name of the custom Shipping Method.
   *
   *
   */
  readonly shippingMethodName: string
  /**
   *	Determines the shipping rate and Tax Rate of the associated Line Items.
   *
   *
   */
  readonly shippingAddress: _BaseAddress
  /**
   *	Determines the shipping price.
   *
   *
   */
  readonly shippingRate: ShippingRateDraft
  /**
   *	Input used to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it must be [ClassificationShippingRateInputDraft](ctp:api:type:ClassificationShippingRateInputDraft).
   *	- If `CartScore`, it must be [ScoreShippingRateInputDraft](ctp:api:type:ScoreShippingRateInputDraft).
   *	- If `CartValue`, it cannot be set.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Tax Category used to determine a shipping Tax Rate if the Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	Tax Rate used to tax a shipping expense if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	Deliveries to be shipped with the custom Shipping Method.
   *
   *
   */
  readonly deliveries?: DeliveryDraft[]
  /**
   *	Custom Fields for the custom Shipping Method.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
/**
 *	Adds a [DiscountCode](ctp:api:type:DiscountCode) to the Cart to activate the related [Cart Discounts](/../api/projects/cartDiscounts).
 *	Adding a Discount Code is only possible if no [DirectDiscount](ctp:api:type:DirectDiscount) has been applied to the Cart.
 *	Discount Codes can be added to [frozen Carts](ctp:api:type:FrozenCarts), but their [DiscountCodeState](ctp:api:type:DiscountCodeState) is then `DoesNotMatchCart`.
 *
 *	The maximum number of Discount Codes in a Cart is restricted by a [limit](/../api/limits#carts).
 *
 *	Specific Error Code: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
 *
 */
export interface CartAddDiscountCodeAction {
  readonly action: 'addDiscountCode'
  /**
   *	`code` of a [DiscountCode](ctp:api:type:DiscountCode).
   *
   *
   */
  readonly code: string
}
/**
 *	Adds an address to a Cart when shipping to multiple addresses is desired.
 *
 */
export interface CartAddItemShippingAddressAction {
  readonly action: 'addItemShippingAddress'
  /**
   *	Address to append to `itemShippingAddresses`.
   *
   *	The new Address must have a `key` that is unique across this Cart.
   *
   *
   */
  readonly address: _BaseAddress
}
/**
 *	If the Cart contains a [LineItem](ctp:api:type:LineItem) for a Product Variant with the same [LineItemMode](ctp:api:type:LineItemMode), [Custom Fields](/../api/projects/custom-fields), supply and distribution channel, then only the quantity of the existing Line Item is increased.
 *	If [LineItem](ctp:api:type:LineItem) `shippingDetails` is set, it is merged. All addresses will be present afterwards and, for address keys present in both shipping details, the quantity will be summed up.
 *	A new Line Item is added when the `externalPrice` or `externalTotalPrice` is set in this update action.
 *	The [LineItem](ctp:api:type:LineItem) price is set as described in [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
 *
 *	If the Tax Rate is not set, a [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError) error is returned.
 *
 *	If the Line Items do not have a Price according to the [Product](ctp:api:type:Product) `priceMode` value for a selected currency and/or country, Customer Group, or Channel, a [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) error is returned.
 *
 */
export interface CartAddLineItemAction {
  readonly action: 'addLineItem'
  /**
   *	User-defined unique identifier of the LineItem.
   *
   *
   */
  readonly key?: string
  /**
   *	`id` of the published [Product](ctp:api:type:Product).
   *
   *	Either the `productId` and `variantId`, or `sku` must be provided.
   *
   *
   */
  readonly productId?: string
  /**
   *	`id` of the [ProductVariant](ctp:api:type:ProductVariant) in the Product.
   *	If not provided, the Master Variant is used.
   *
   *	Either the `productId` and `variantId`, or `sku` must be provided.
   *
   *
   */
  readonly variantId?: number
  /**
   *	SKU of the [ProductVariant](ctp:api:type:ProductVariant).
   *
   *	Either the `productId` and `variantId`, or `sku` must be provided.
   *
   *
   */
  readonly sku?: string
  /**
   *	Quantity of the Product Variant to add to the Cart.
   *
   *
   */
  readonly quantity?: number
  /**
   *	Date and time (UTC) the Product Variant is added to the Cart.
   *	If not set, it defaults to the current date and time.
   *
   *	Optional for backwards compatibility reasons.
   *
   *
   */
  readonly addedAt?: string
  /**
   *	Used to [select](ctp:api:type:LineItemPriceSelection) a Product Price.
   *	The Channel must have the `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *	If the Cart is bound to a [Store](ctp:api:type:Store) with `distributionChannels` set, the Channel must match one of the Store's distribution channels.
   *
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
  /**
   *	Used to identify [Inventory entries](/../api/projects/inventory) that must be reserved.
   *	The Channel must have the `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
  /**
   *	Sets the [LineItem](ctp:api:type:LineItem) `price` value, and the `priceMode` to `ExternalPrice` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
   *
   *
   */
  readonly externalPrice?: _Money
  /**
   *	Sets the [LineItem](ctp:api:type:LineItem) `price` and `totalPrice` values, and the `priceMode` to `ExternalTotal` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
   *
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
  /**
   *	External Tax Rate for the Line Item, if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	Inventory mode specific to the Line Item only, and valid for the entire `quantity` of the Line Item.
   *	Set only if the inventory mode should be different from the `inventoryMode` specified on the [Cart](ctp:api:type:Cart).
   *
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	Container for Line Item-specific addresses.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
  /**
   *	Custom Fields for the Line Item.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
export interface CartAddPaymentAction {
  readonly action: 'addPayment'
  /**
   *	Payment to add to the Cart.
   *	Must not be assigned to another Order or active Cart already.
   *
   *
   */
  readonly payment: PaymentResourceIdentifier
}
/**
 *	Adds a Shipping Method for a specified shipping address to a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
 *
 */
export interface CartAddShippingMethodAction {
  readonly action: 'addShippingMethod'
  /**
   *	User-defined identifier for the [Shipping](ctp:api:type:Shipping) that must be unique across the Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey: string
  /**
   *	RecourceIdentifier to a [ShippingMethod](ctp:api:type:ShippingMethod) to add to the Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *	If the referenced Shipping Method has a predicate that does not match the Cart, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   *
   */
  readonly shippingMethod: ShippingMethodResourceIdentifier
  /**
   *	Determines the shipping rate and Tax Rate of the Line Items.
   *
   *
   */
  readonly shippingAddress: _BaseAddress
  /**
   *	Input used to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it must be [ClassificationShippingRateInputDraft](ctp:api:type:ClassificationShippingRateInputDraft).
   *	- If `CartScore`, it must be [ScoreShippingRateInputDraft](ctp:api:type:ScoreShippingRateInputDraft).
   *	- If `CartValue`, it cannot be set.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Tax Rate used to tax a shipping expense if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	Deliveries to be shipped with the referenced Shipping Method.
   *
   *
   */
  readonly deliveries?: DeliveryDraft[]
  /**
   *	Custom Fields for the Shipping Method.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
/**
 *	Adds all [LineItems](ctp:api:type:LineItem) of a [ShoppingList](ctp:api:type:ShoppingList) to the Cart.
 *
 */
export interface CartAddShoppingListAction {
  readonly action: 'addShoppingList'
  /**
   *	Shopping List that contains the Line Items to be added.
   *
   *
   */
  readonly shoppingList: ShoppingListResourceIdentifier
  /**
   *	`distributionChannel` to set for all [LineItems](ctp:api:type:LineItem) that are added to the Cart.
   *	The Channel must have the `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
  /**
   *	`supplyChannel` to set for all [LineItems](ctp:api:type:LineItem) that are added to the Cart.
   *	The Channel must have the `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
}
export interface CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction {
  readonly action: 'applyDeltaToCustomLineItemShippingDetailsTargets'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	Using positive or negative quantities increases or decreases the number of items shipped to an address.
   *
   *
   */
  readonly targetsDelta: ItemShippingTarget[]
}
/**
 *	To override the shipping details, see [Set LineItem ShippingDetails](ctp:api:type:CartSetLineItemShippingDetailsAction).
 *
 */
export interface CartApplyDeltaToLineItemShippingDetailsTargetsAction {
  readonly action: 'applyDeltaToLineItemShippingDetailsTargets'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Using positive or negative quantities increases or decreases the number of items shipped to an address.
   *
   *
   */
  readonly targetsDelta: ItemShippingTarget[]
}
export interface CartChangeCustomLineItemMoneyAction {
  readonly action: 'changeCustomLineItemMoney'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	Value to set. Must not be empty. Can be a negative amount.
   *
   *
   */
  readonly money: _Money
}
export interface CartChangeCustomLineItemPriceModeAction {
  readonly action: 'changeCustomLineItemPriceMode'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	New value to set. Must not be empty.
   *
   *
   */
  readonly mode: CustomLineItemPriceMode
}
/**
 *	When multiple shipping addresses are set for a Custom Line Item,
 *	use the [Add CustomLineItem](ctp:api:type:CartAddCustomLineItemAction) update action to change the shipping details.
 *	Since it is not possible for the API to infer how the overall change in the Custom Line Item quantity should be distributed over the sub-quantities,
 *	the `shippingDetails` field is kept in its current state to avoid data loss.
 *
 *	To change the Custom Line Item quantity and shipping details together,
 *	use this update action in combination with the [Set CustomLineItem ShippingDetails](ctp:api:type:CartSetCustomLineItemShippingDetailsAction) update action
 *	in a single Cart update command.
 *
 */
export interface CartChangeCustomLineItemQuantityAction {
  readonly action: 'changeCustomLineItemQuantity'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	New value to set.
   *
   *	If `0`, the Custom Line Item is removed from the Cart.
   *
   *
   */
  readonly quantity: number
}
/**
 *	When multiple shipping addresses are set for a Line Item,
 *	use the [Remove LineItem](ctp:api:type:CartRemoveLineItemAction) and [Add LineItem](ctp:api:type:CartAddLineItemAction) update action
 *	to change the shipping details.
 *	Since it is not possible for the API to infer how the overall change in the Line Item quantity should be distributed over the sub-quantities,
 *	the `shippingDetails` field is kept in its current state to avoid data loss.
 *
 *	To change the Line Item quantity and shipping details together,
 *	use this update action in combination with the [Set LineItem ShippingDetails](ctp:api:type:CartSetLineItemShippingDetailsAction) update action
 *	in a single Cart update command.
 *
 *	The [LineItem](ctp:api:type:LineItem) price is set as described in [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
 *
 */
export interface CartChangeLineItemQuantityAction {
  readonly action: 'changeLineItemQuantity'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	New value to set.
   *
   *	If `0`, the Line Item is removed from the Cart.
   *
   *
   */
  readonly quantity: number
  /**
   *	Sets the [LineItem](ctp:api:type:LineItem) `price` to the given value when changing the quantity of a Line Item with the `ExternalPrice` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
   *
   *	The LineItem price is updated as described in LineItem Price selection.
   *
   *
   */
  readonly externalPrice?: _Money
  /**
   *	Sets the [LineItem](ctp:api:type:LineItem) `price` and `totalPrice` to the given value when changing the quantity of a Line Item with the `ExternalTotal` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
   *
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
}
/**
 *	Changing the tax calculation mode leads to [recalculation of taxes](/../api/carts-orders-overview#cart-tax-calculation).
 *
 */
export interface CartChangeTaxCalculationModeAction {
  readonly action: 'changeTaxCalculationMode'
  /**
   *	New value to set.
   *
   *
   */
  readonly taxCalculationMode: TaxCalculationMode
}
/**
 *	- When `External` [TaxMode](ctp:api:type:TaxMode) is changed to `Platform` or `Disabled`, all previously set external Tax Rates are removed.
 *	- When set to `Platform`, Line Items, Custom Line Items, and Shipping Method require a Tax Category with a Tax Rate for the Cart's `shippingAddress`.
 *
 */
export interface CartChangeTaxModeAction {
  readonly action: 'changeTaxMode'
  /**
   *	The new TaxMode.
   *
   *
   */
  readonly taxMode: TaxMode
}
/**
 *	Changing the tax rounding mode leads to [recalculation of taxes](/../api/carts-orders-overview#cart-tax-calculation).
 *
 */
export interface CartChangeTaxRoundingModeAction {
  readonly action: 'changeTaxRoundingMode'
  /**
   *	New value to set.
   *
   *
   */
  readonly taxRoundingMode: RoundingMode
}
/**
 *	Changes the [CartState](ctp:api:type:CartState) from `Active` to `Frozen`. Results in a [Frozen Cart](ctp:api:type:FrozenCarts).
 *	Fails with [InvalidOperation](ctp:api:type:InvalidOperation) error when the Cart is empty.
 *
 */
export interface CartFreezeCartAction {
  readonly action: 'freezeCart'
}
/**
 *	This update action does not set any Cart field in particular, but it triggers several [Cart updates](/../api/carts-orders-overview#cart-updates)
 *	to bring prices and discounts to the latest state. Those can become stale over time when no Cart updates have been performed for a while and
 *	prices on related Products have changed in the meanwhile.
 *
 *	If the `priceMode` of the [Product](ctp:api:type:Product) related to a Line Item is of `Embedded` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum),
 *	the updated `price` of that [LineItem](ctp:api:type:LineItem) may not correspond to a Price in the `variant.prices` anymore.
 *
 */
export interface CartRecalculateAction {
  readonly action: 'recalculate'
  /**
   *	- Leave empty or set to `false` to only update the Prices and TaxRates of the Line Items.
   *	- Set to `true` to update the Line Items' product data (like `name`, `variant` and `productType`) also.
   *
   *
   */
  readonly updateProductData?: boolean
}
/**
 *	This update action does not support specifying quantities, unlike the [Remove LineItem](ctp:api:type:CartRemoveLineItemAction) update action.
 *
 *	If `shippingDetails` must be partially removed, use the [Change CustomLineItem Quantity](ctp:api:type:CartChangeCustomLineItemQuantityAction) update action.
 *
 */
export interface CartRemoveCustomLineItemAction {
  readonly action: 'removeCustomLineItem'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
}
export interface CartRemoveDiscountCodeAction {
  readonly action: 'removeDiscountCode'
  /**
   *	Discount Code to remove from the Cart.
   *
   *
   */
  readonly discountCode: DiscountCodeReference
}
/**
 *	An address can only be removed if it is not referenced in any [ItemShippingTarget](ctp:api:type:ItemShippingTarget) of the Cart.
 *
 */
export interface CartRemoveItemShippingAddressAction {
  readonly action: 'removeItemShippingAddress'
  /**
   *	`key` of the Address to remove from `itemShippingAddresses`.
   *
   *
   */
  readonly addressKey: string
}
/**
 *	The [LineItem](ctp:api:type:LineItem) price is updated as described in [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
 *
 */
export interface CartRemoveLineItemAction {
  readonly action: 'removeLineItem'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Amount to subtract from the LineItem's `quantity`.
   *	If absent, the LineItem is removed from the Cart.
   *
   *
   */
  readonly quantity?: number
  /**
   *	Sets the [LineItem](ctp:api:type:LineItem) `price` to the given value when decreasing the quantity of a Line Item with the `ExternalPrice` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
   *
   *
   */
  readonly externalPrice?: _Money
  /**
   *	Sets the [LineItem](ctp:api:type:LineItem) `price` and `totalPrice` to the given value when decreasing the quantity of a Line Item with the `ExternalTotal` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
   *
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
  /**
   *	Container for Line Item-specific addresses to remove.
   *
   *
   */
  readonly shippingDetailsToRemove?: ItemShippingDetailsDraft
}
export interface CartRemovePaymentAction {
  readonly action: 'removePayment'
  /**
   *	Payment to remove from the Cart.
   *
   *
   */
  readonly payment: PaymentResourceIdentifier
}
/**
 *	Removes a Shipping Method from a Cart that has the `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
 *
 */
export interface CartRemoveShippingMethodAction {
  readonly action: 'removeShippingMethod'
  /**
   *	User-defined unique identifier of the Shipping Method to remove from the Cart.
   *
   *
   */
  readonly shippingKey: string
}
export interface CartSetAnonymousIdAction {
  readonly action: 'setAnonymousId'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly anonymousId?: string
}
export interface CartSetBillingAddressAction {
  readonly action: 'setBillingAddress'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly address?: _BaseAddress
}
export interface CartSetBillingAddressCustomFieldAction {
  readonly action: 'setBillingAddressCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetBillingAddressCustomTypeAction {
  readonly action: 'setBillingAddressCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `billingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `billingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `billingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	Updates the Business Unit on the Cart. The Cart must have an existing Business Unit assigned already.
 *
 */
export interface CartSetBusinessUnitAction {
  readonly action: 'setBusinessUnit'
  /**
   *	New Business Unit to assign to the Cart, which must have access to the [Store](/../api/projects/stores) that is set on the Cart.
   *
   *
   */
  readonly businessUnit: BusinessUnitResourceIdentifier
}
/**
 *	This update action results in the `taxedPrice` field being added to the Cart when the `ExternalAmount` [TaxMode](ctp:api:type:TaxMode) is used.
 *
 */
export interface CartSetCartTotalTaxAction {
  readonly action: 'setCartTotalTax'
  /**
   *	The Cart's total gross price becoming the `totalGross` field (`totalNet` + taxes) on the Cart's `taxedPrice`.
   *
   *
   */
  readonly externalTotalGross: _Money
  /**
   *	Set if the `externalTotalGross` price is a sum of portions with different tax rates.
   *
   *
   */
  readonly externalTaxPortions?: TaxPortionDraft[]
}
/**
 *	Setting the country can lead to changes in the [LineItem](ctp:api:type:LineItem) prices.
 *
 */
export interface CartSetCountryAction {
  readonly action: 'setCountry'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *	If the Cart is bound to a `store`, the provided value must be included in the [Store's](ctp:api:type:Store) `countries`.
   *	Otherwise a [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError) error is returned.
   *
   *
   */
  readonly country?: string
}
export interface CartSetCustomFieldAction {
  readonly action: 'setCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetCustomLineItemCustomFieldAction {
  readonly action: 'setCustomLineItemCustomField'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetCustomLineItemCustomTypeAction {
  readonly action: 'setCustomLineItemCustomType'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the CustomLineItem with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the CustomLineItem.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the CustomLineItem.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetCustomLineItemShippingDetailsAction {
  readonly action: 'setCustomLineItemShippingDetails'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
/**
 *	Can be used if the Cart has the `ExternalAmount` [TaxMode](ctp:api:type:TaxMode).
 *
 */
export interface CartSetCustomLineItemTaxAmountAction {
  readonly action: 'setCustomLineItemTaxAmount'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly externalTaxAmount?: ExternalTaxAmountDraft
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) used for this Custom Line Item.
   *	This is required for Carts with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
}
/**
 *	Can be used if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
 *
 */
export interface CartSetCustomLineItemTaxRateAction {
  readonly action: 'setCustomLineItemTaxRate'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	`key` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update. Either `customLineItemId` or `customLineItemKey` is required.
   *
   *
   */
  readonly customLineItemKey?: string
  /**
   *	Value to set.
   *	If empty, an existing value is removed.
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) used for this Custom Line Item.
   *	This is required for Carts with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
}
/**
 *	To set the Cart's custom Shipping Method (independent of the [ShippingMethods](ctp:api:type:ShippingMethod) managed through
 *	the [Shipping Methods API](/projects/shippingMethods)) the Cart must have
 *	the `Single` [ShippingMode](ctp:api:type:ShippingMode) and a `shippingAddress`.
 *
 *	To unset a custom Shipping Method on a Cart, use the [Set ShippingMethod](ctp:api:type:CartSetShippingMethodAction) update action
 *	without the `shippingMethod` field instead.
 *
 */
export interface CartSetCustomShippingMethodAction {
  readonly action: 'setCustomShippingMethod'
  /**
   *	Name of the custom Shipping Method.
   *
   *
   */
  readonly shippingMethodName: string
  /**
   *	Determines the shipping price.
   *
   *
   */
  readonly shippingRate: ShippingRateDraft
  /**
   *	Tax Category used to determine the Tax Rate when the Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	External Tax Rate for the `shippingRate` to be set if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
}
export interface CartSetCustomTypeAction {
  readonly action: 'setCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Cart with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Cart.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Cart.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetCustomerEmailAction {
  readonly action: 'setCustomerEmail'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly email?: string
}
/**
 *	This update action can only be used if a Customer is not assigned to a Cart.
 *	If a Customer is already assigned, the Cart has the same Customer Group as the assigned Customer.
 *
 *	Setting the Customer Group also updates the [LineItem](ctp:api:type:LineItem) `prices` according to the Customer Group.
 *
 */
export interface CartSetCustomerGroupAction {
  readonly action: 'setCustomerGroup'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly customerGroup?: CustomerGroupResourceIdentifier
}
/**
 *	Setting the Cart's `customerId` can lead to updates on all its [LineItem](ctp:api:type:LineItem) `prices`.
 *
 *	If the Customer with the specified `id` cannot be found, this update action returns a
 *	[ReferencedResourceNotFound](ctp:api:type:ReferencedResourceNotFoundError) error.
 *
 */
export interface CartSetCustomerIdAction {
  readonly action: 'setCustomerId'
  /**
   *	`id` of an existing [Customer](ctp:api:type:Customer). If empty, any value is removed.
   *
   *
   */
  readonly customerId?: string
}
/**
 *	Number of days after which a Cart with `Active` [CartState](ctp:api:type:CartState) is deleted since its last modification.
 *
 *	If a [ChangeSubscription](ctp:api:type:ChangeSubscription) exists for Carts, a [ResourceDeletedDeliveryPayload](ctp:api:type:ResourceDeletedDeliveryPayload) is sent.
 *
 */
export interface CartSetDeleteDaysAfterLastModificationAction {
  readonly action: 'setDeleteDaysAfterLastModification'
  /**
   *	Value to set.
   *	If not provided, the default value for this field configured in [Project settings](ctp:api:type:CartsConfiguration) is assigned.
   *
   *
   */
  readonly deleteDaysAfterLastModification?: number
}
/**
 *	Adds a [DirectDiscount](ctp:api:type:DirectDiscount), but only if no [DiscountCode](ctp:api:type:DiscountCode) has been added to the Cart.
 *	Either a Discount Code or a Direct Discount can exist on a Cart at the same time.
 *
 */
export interface CartSetDirectDiscountsAction {
  readonly action: 'setDirectDiscounts'
  /**
   *	- If set, all existing Direct Discounts are replaced.
   *	  The discounts apply in the order they are added to the list.
   *	- If empty, all existing Direct Discounts are removed and all affected prices on the Cart or Order are recalculated.
   *
   *
   */
  readonly discounts: DirectDiscountDraft[]
}
export interface CartSetItemShippingAddressCustomFieldAction {
  readonly action: 'setItemShippingAddressCustomField'
  /**
   *	`key` of the [Address](ctp:api:type:Address) in `itemShippingAddress`.
   *
   *
   */
  readonly addressKey: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetItemShippingAddressCustomTypeAction {
  readonly action: 'setItemShippingAddressCustomType'
  /**
   *	`key` of the [Address](ctp:api:type:Address) in `itemShippingAddress`.
   *
   *
   */
  readonly addressKey: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `itemShippingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `itemShippingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `itemShippingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetKeyAction {
  readonly action: 'setKey'
  /**
   *	Value to set.
   *	If empty, any existing key will be removed.
   *
   *
   */
  readonly key?: string
}
export interface CartSetLineItemCustomFieldAction {
  readonly action: 'setLineItemCustomField'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetLineItemCustomTypeAction {
  readonly action: 'setLineItemCustomType'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Line Item with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Line Item.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Line Item.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	Setting a distribution channel for a [LineItem](ctp:api:type:LineItem) can lead to an updated `price` as described in [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
 *
 */
export interface CartSetLineItemDistributionChannelAction {
  readonly action: 'setLineItemDistributionChannel'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	- If present, a [Reference](ctp:api:type:Reference) to the Channel is set for the [LineItem](ctp:api:type:LineItem) specified by `lineItemId`.
   *	- If not present, the current [Reference](ctp:api:type:Reference) to a distribution channel is removed from the [LineItem](ctp:api:type:LineItem) specified by `lineItemId`.
   *	  The Channel must have the `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
}
export interface CartSetLineItemInventoryModeAction {
  readonly action: 'setLineItemInventoryMode'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Inventory mode specific to the Line Item only, and valid for the entire `quantity` of the Line Item.
   *	Set only if the inventory mode should be different from the `inventoryMode` specified on the [Cart](ctp:api:type:Cart).
   *
   *
   */
  readonly inventoryMode?: InventoryMode
}
/**
 *	Sets the [LineItem](ctp:api:type:LineItem) `price` and changes the `priceMode` to `ExternalPrice` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
 *
 */
export interface CartSetLineItemPriceAction {
  readonly action: 'setLineItemPrice'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Value to set.
   *	If `externalPrice` is not given and the `priceMode` is `ExternalPrice`, the external price is unset and the `priceMode` is set to `Platform`.
   *
   *
   */
  readonly externalPrice?: _Money
}
export interface CartSetLineItemShippingDetailsAction {
  readonly action: 'setLineItemShippingDetails'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Value to set.
   *	If empty, the existing value is removed.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
/**
 *	Performing this action has no impact on inventory that should be reserved.
 *
 */
export interface CartSetLineItemSupplyChannelAction {
  readonly action: 'setLineItemSupplyChannel'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	- If present, a [Reference](ctp:api:type:Reference) to the Channel is set for the [LineItem](ctp:api:type:LineItem) specified by `lineItemId`.
   *	- If not present, the current [Reference](ctp:api:type:Reference) to a supply channel will be removed from the [LineItem](ctp:api:type:LineItem) specified by `lineItemId`.
   *	  The Channel must have the `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
}
/**
 *	Can be used if the Cart has the `ExternalAmount` [TaxMode](ctp:api:type:TaxMode).
 *
 */
export interface CartSetLineItemTaxAmountAction {
  readonly action: 'setLineItemTaxAmount'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly externalTaxAmount?: ExternalTaxAmountDraft
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) used for this Line Item.
   *	This is required for Carts with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
}
/**
 *	Can be used if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
 *
 */
export interface CartSetLineItemTaxRateAction {
  readonly action: 'setLineItemTaxRate'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) used for this Line Item.
   *	This is required for Carts with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
}
/**
 *	Sets the [LineItem](ctp:api:type:LineItem) `totalPrice` and `price`, and changes the `priceMode` to `ExternalTotal` [LineItemPriceMode](ctp:api:type:LineItemPriceMode).
 *
 */
export interface CartSetLineItemTotalPriceAction {
  readonly action: 'setLineItemTotalPrice'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Value to set.
   *	If `externalTotalPrice` is not given and the `priceMode` is `ExternalTotal`, the external price is unset and the `priceMode` is set to `Platform`.
   *
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
}
export interface CartSetLocaleAction {
  readonly action: 'setLocale'
  /**
   *	Value to set.
   *	Must be one of the [Project](ctp:api:type:Project)'s `languages`.
   *	If empty, any existing value will be removed.
   *
   *
   */
  readonly locale?: string
}
/**
 *	Setting the shipping address also sets the [TaxRate](ctp:api:type:TaxRate) of Line Items and calculates the [TaxedPrice](ctp:api:type:TaxedPrice).
 *
 *	If a matching price cannot be found for the given shipping address during [Line Item Price selection](ctp:api:type:LineItemPriceSelection),
 *	a [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError) error is returned.
 *
 *	If you want to allow shipping to states inside a country that are not explicitly covered by a TaxRate,
 *	set the `countryTaxRateFallbackEnabled` field to `true` in the [CartsConfiguration](ctp:api:type:CartsConfiguration) by using
 *	the [Change CountryTaxRateFallbackEnabled](ctp:api:type:ProjectChangeCountryTaxRateFallbackEnabledAction) update action.
 *
 */
export interface CartSetShippingAddressAction {
  readonly action: 'setShippingAddress'
  /**
   *	Value to set.
   *	If not set, the shipping address is unset, and the `taxedPrice` and `taxRate` are unset in all Line Items of the Cart.
   *
   *
   */
  readonly address?: _BaseAddress
}
export interface CartSetShippingAddressCustomFieldAction {
  readonly action: 'setShippingAddressCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetShippingAddressCustomTypeAction {
  readonly action: 'setShippingAddressCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `shippingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `shippingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `shippingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetShippingCustomFieldAction {
  readonly action: 'setShippingCustomField'
  /**
   *	The `shippingKey` of the [Shipping](ctp:api:type:Shipping) to customize. Used to specify which Shipping Method to customize
   *	on a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *	Leave this empty to customize the one and only ShippingMethod on a `Single` ShippingMode Cart.
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Trying to remove a field that does not exist will fail with an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
/**
 *	This action sets, overwrites, or removes any existing Custom Type and Custom Fields for the Cart's `shippingMethod` or `shipping`.
 *
 */
export interface CartSetShippingCustomTypeAction {
  readonly action: 'setShippingCustomType'
  /**
   *	The `shippingKey` of the [Shipping](ctp:api:type:Shipping) to customize. Used to specify which Shipping Method to customize
   *	on a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *	Leave this empty to customize the one and only ShippingMethod on a `Single` ShippingMode Cart.
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the specified ShippingMethod with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the ShippingMethod.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `shippingMethod`.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	To set the Cart's Shipping Method the Cart must have the `Single` [ShippingMode](ctp:api:type:ShippingMode) and a `shippingAddress`.
 *
 */
export interface CartSetShippingMethodAction {
  readonly action: 'setShippingMethod'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *	If the referenced Shipping Method has a predicate that does not match the Cart, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
   *
   *
   */
  readonly shippingMethod?: ShippingMethodResourceIdentifier
  /**
   *	An external Tax Rate can be set if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
}
/**
 *	A Shipping Method tax amount can be set if the Cart has the `ExternalAmount` [TaxMode](ctp:api:type:TaxMode).
 *
 */
export interface CartSetShippingMethodTaxAmountAction {
  readonly action: 'setShippingMethodTaxAmount'
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) to update. This is required for Carts with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly externalTaxAmount?: ExternalTaxAmountDraft
}
/**
 *	A Shipping Method Tax Rate can be set if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
 *
 */
export interface CartSetShippingMethodTaxRateAction {
  readonly action: 'setShippingMethodTaxRate'
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) to update. This is required for Carts with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
}
/**
 *	Input used to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
 *	If no matching tier can be found, or the input is not set, the default price for the shipping rate is used.
 *
 */
export interface CartSetShippingRateInputAction {
  readonly action: 'setShippingRateInput'
  /**
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it must be [ClassificationShippingRateInputDraft](ctp:api:type:ClassificationShippingRateInputDraft).
   *	- If `CartScore`, it must be [ScoreShippingRateInputDraft](ctp:api:type:ScoreShippingRateInputDraft).
   *	- If `CartValue`, it cannot be set.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
}
/**
 *	Changes the [CartState](ctp:api:type:CartState) from `Frozen` to `Active`. Reactivates a [Frozen Cart](ctp:api:type:FrozenCarts).
 *	This action updates all prices in the Cart according to latest Prices on related Product Variants and Shipping Methods and by applying all discounts currently being active and applicable for the Cart.
 *
 */
export interface CartUnfreezeCartAction {
  readonly action: 'unfreezeCart'
}
/**
 *	Updates an address in `itemShippingAddresses` by keeping the Address `key`.
 *
 */
export interface CartUpdateItemShippingAddressAction {
  readonly action: 'updateItemShippingAddress'
  /**
   *	The new Address with the same `key` as the Address it will replace.
   *
   *
   */
  readonly address: _BaseAddress
}
/**
 *	The scope controls which part of the product information is published.
 */
export type ProductPublishScope = 'All' | 'Prices' | string
