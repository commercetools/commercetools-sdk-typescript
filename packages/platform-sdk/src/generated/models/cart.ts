/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  BusinessUnitKeyReference,
  BusinessUnitResourceIdentifier,
} from './business-unit'
import {
  CartDiscountReference,
  CartDiscountTarget,
  CartDiscountValue,
} from './cart-discount'
import { ChannelReference, ChannelResourceIdentifier } from './channel'
import {
  Address,
  BaseAddress,
  BaseResource,
  CreatedBy,
  LastModifiedBy,
  LocalizedString,
  Money,
  Price,
  TypedMoney,
} from './common'
import {
  CustomerGroupReference,
  CustomerGroupResourceIdentifier,
} from './customer-group'
import { DiscountCodeReference } from './discount-code'
import { Delivery, ItemState, OrderReference, PaymentInfo } from './order'
import { PaymentResourceIdentifier } from './payment'
import { ProductVariant } from './product'
import { ProductTypeReference } from './product-type'
import {
  ShippingMethodReference,
  ShippingMethodResourceIdentifier,
  ShippingRate,
  ShippingRateDraft,
} from './shipping-method'
import { ShoppingListResourceIdentifier } from './shopping-list'
import { StoreKeyReference, StoreResourceIdentifier } from './store'
import {
  SubRate,
  TaxCategoryReference,
  TaxCategoryResourceIdentifier,
  TaxRate,
} from './tax-category'
import {
  CustomFields,
  CustomFieldsDraft,
  FieldContainer,
  TypeResourceIdentifier,
} from './type'

export interface Cart extends BaseResource {
  /**
   *	Unique identifier of the Cart.
   *
   */
  readonly id: string
  /**
   *	User-defined unique identifier of the Cart.
   *
   */
  readonly key?: string
  /**
   *	The current version of the cart.
   *
   */
  readonly version: number
  /**
   *
   */
  readonly createdAt: string
  /**
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Present on resources updated after 1 February 2019 except for [events not tracked](/client-logging#events-tracked).
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/client-logging#events-tracked).
   *
   *
   */
  readonly createdBy?: CreatedBy
  /**
   *
   */
  readonly customerId?: string
  /**
   *
   */
  readonly customerEmail?: string
  /**
   *	Identifies carts and orders belonging to an anonymous session (the customer has not signed up/in yet).
   *
   */
  readonly anonymousId?: string
  /**
   *	The Business Unit the Cart belongs to.
   *
   *
   */
  readonly businessUnit?: BusinessUnitKeyReference
  /**
   *
   */
  readonly store?: StoreKeyReference
  /**
   *
   */
  readonly lineItems: LineItem[]
  /**
   *
   */
  readonly customLineItems: CustomLineItem[]
  /**
   *	The sum of all `totalPrice` fields of the `lineItems` and `customLineItems`, as well as the `price` field of `shippingInfo` (if it exists).
   *	`totalPrice` may or may not include the taxes: it depends on the taxRate.includedInPrice property of each price.
   *
   */
  readonly totalPrice: TypedMoney
  /**
   *	Not set until the shipping address is set.
   *	Will be set automatically in the `Platform` TaxMode.
   *	For the `External` tax mode it will be set  as soon as the external tax rates for all line items, custom line items, and shipping in the cart are set.
   *
   */
  readonly taxedPrice?: TaxedPrice
  /**
   *	Sum of `taxedPrice` of [ShippingInfo](ctp:api:type:ShippingInfo) across all Shipping Methods.
   *	For `Platform` [TaxMode](ctp:api:type:TaxMode), it is set automatically only if [shipping address is set](ctp:api:type:CartSetShippingAddressAction) or [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction) to the Cart.
   *
   */
  readonly taxedShippingPrice?: TaxedPrice
  /**
   *
   */
  readonly cartState: CartState
  /**
   *	The shipping address is used to determine the eligible shipping methods and rates as well as the tax rate of the line items.
   *
   */
  readonly shippingAddress?: Address
  /**
   *
   */
  readonly billingAddress?: Address
  /**
   *	Indicates whether one or multiple Shipping Methods are added to the Cart.
   *
   */
  readonly shippingMode: ShippingMode
  /**
   *	Holds all shipping-related information per Shipping Method of a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *	It is automatically updated after the [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction).
   *
   */
  readonly shipping: Shipping[]
  /**
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *
   */
  readonly taxMode: TaxMode
  /**
   *	When calculating taxes for `taxedPrice`, the selected mode is used for rounding.
   *
   */
  readonly taxRoundingMode: RoundingMode
  /**
   *	When calculating taxes for `taxedPrice`, the selected mode is used for calculating the price with `LineItemLevel` (horizontally) or `UnitPriceLevel` (vertically) calculation mode.
   *
   */
  readonly taxCalculationMode: TaxCalculationMode
  /**
   *	Set automatically when the customer is set and the customer is a member of a customer group.
   *	Used for product variant
   *	price selection.
   *
   */
  readonly customerGroup?: CustomerGroupReference
  /**
   *	A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   *	Used for product variant price selection.
   *
   */
  readonly country?: string
  /**
   *	Shipping-related information of a Cart with `Single` [ShippingMode](ctp:api:type:ShippingMode).
   *	Set automatically once the ShippingMethod is set.
   *
   *
   */
  readonly shippingInfo?: ShippingInfo
  /**
   *
   */
  readonly discountCodes?: DiscountCodeInfo[]
  /**
   *
   */
  readonly directDiscounts?: DirectDiscount[]
  /**
   *
   */
  readonly custom?: CustomFields
  /**
   *
   */
  readonly paymentInfo?: PaymentInfo
  /**
   *
   */
  readonly locale?: string
  /**
   *	The cart will be deleted automatically if it hasn't been modified for the specified amount of days and it is in the `Active` CartState.
   *
   */
  readonly deleteDaysAfterLastModification?: number
  /**
   *	Automatically filled when a line item with LineItemMode `GiftLineItem` is removed from the cart.
   *
   */
  readonly refusedGifts: CartDiscountReference[]
  /**
   *	The origin field indicates how this cart was created.
   *	The value `Customer` indicates, that the cart was created by the customer.
   *
   */
  readonly origin: CartOrigin
  /**
   *	The shippingRateInput is used as an input to select a ShippingRatePriceTier.
   *
   */
  readonly shippingRateInput?: ShippingRateInput
  /**
   *	Contains addresses for carts with multiple shipping addresses.
   *	Line items reference these addresses under their `shippingDetails`.
   *	The addresses captured here are not used to determine eligible shipping methods or the applicable tax rate.
   *	Only the cart's `shippingAddress` is used for this.
   *
   */
  readonly itemShippingAddresses?: Address[]
  /**
   *	The sum off all the [Line Items](ctp:api:type:LineItem) quantities. Does not take [Custom Line Items](ctp:api:type:CustomLineItem) into consideration.
   *
   */
  readonly totalLineItemQuantity?: number
}
export interface CartDraft {
  /**
   *	A three-digit currency code as per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   */
  readonly currency: string
  /**
   *	User-defined unique identifier for the Cart.
   *
   *
   */
  readonly key?: string
  /**
   *	Id of an existing Customer.
   *
   */
  readonly customerId?: string
  /**
   *
   */
  readonly customerEmail?: string
  /**
   *	Will be set automatically when the `customerId` is set and the customer is a member of a customer group.
   *	Can be set explicitly when no `customerId` is present.
   *
   */
  readonly customerGroup?: CustomerGroupResourceIdentifier
  /**
   *	Assigns the new cart to an anonymous session (the customer has not signed up/in yet).
   *
   */
  readonly anonymousId?: string
  /**
   *	The Business Unit the Cart belongs to.
   *
   *
   */
  readonly businessUnit?: BusinessUnitResourceIdentifier
  /**
   *	Assigns the new cart to the store.
   *	The store assignment can not be modified.
   *
   */
  readonly store?: StoreResourceIdentifier
  /**
   *	A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   *
   */
  readonly country?: string
  /**
   *	Default inventory mode is `None`.
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	The default tax mode is `Platform`.
   *
   */
  readonly taxMode?: TaxMode
  /**
   *	The default tax rounding mode is `HalfEven`.
   *
   */
  readonly taxRoundingMode?: RoundingMode
  /**
   *	The default tax calculation mode is `LineItemLevel`.
   *
   */
  readonly taxCalculationMode?: TaxCalculationMode
  /**
   *
   */
  readonly lineItems?: LineItemDraft[]
  /**
   *
   */
  readonly customLineItems?: CustomLineItemDraft[]
  /**
   *	The shipping address is used to determine the eligible shipping methods and rates as well as the tax rate of the line items.
   *
   */
  readonly shippingAddress?: BaseAddress
  /**
   *
   */
  readonly billingAddress?: BaseAddress
  /**
   *
   */
  readonly shippingMethod?: ShippingMethodResourceIdentifier
  /**
   *	An external tax rate can be set for the `shippingMethod` if the cart has the `External` TaxMode.
   *
   */
  readonly externalTaxRateForShippingMethod?: ExternalTaxRateDraft
  /**
   *	The custom fields.
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	Must be one of the languages supported for this project
   *
   */
  readonly locale?: string
  /**
   *	The cart will be deleted automatically if it hasn't been modified for the specified amount of days and it is in the `Active` CartState.
   *	If a ChangeSubscription for carts exists, a `ResourceDeleted` notification will be sent.
   *
   */
  readonly deleteDaysAfterLastModification?: number
  /**
   *	The default origin is `Customer`.
   *
   */
  readonly origin?: CartOrigin
  /**
   *	- If `Single`, only a single Shipping Method can be added to the Cart.
   *	- If `Multiple`, multiple Shipping Methods can be added to the Cart.
   *
   */
  readonly shippingMode?: ShippingMode
  /**
   *	Custom Shipping Methods for a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   */
  readonly customShipping?: CustomShippingDraft[]
  /**
   *	Shipping Methods for a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   */
  readonly shipping?: ShippingDraft[]
  /**
   *	The shippingRateInput is used as an input to select a ShippingRatePriceTier.
   *	Based on the definition of ShippingRateInputType.
   *	If CartClassification is defined, it must be ClassificationShippingRateInput.
   *	If CartScore is defined, it must be ScoreShippingRateInput.
   *	Otherwise it can not bet set.
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Contains addresses for carts with multiple shipping addresses.
   *	Each address must contain a key which is unique in this cart.
   *	Line items will use these keys to reference the addresses under their `shippingDetails`.
   *	The addresses captured here are not used to determine eligible shipping methods or the applicable tax rate.
   *	Only the cart's `shippingAddress` is used for this.
   *
   */
  readonly itemShippingAddresses?: BaseAddress[]
  /**
   *	The code of existing DiscountCodes.
   *
   */
  readonly discountCodes?: string[]
}
export type CartOrigin = 'Customer' | 'Merchant' | 'Quote' | string
export interface CartPagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *
   */
  readonly count: number
  /**
   *
   */
  readonly total?: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *
   */
  readonly results: Cart[]
}
/**
 *	[Reference](ctp:api:type:Reference) to a [Cart](ctp:api:type:Cart).
 *
 */
export interface CartReference {
  readonly typeId: 'cart'
  /**
   *	Unique identifier of the referenced [Cart](ctp:api:type:Cart).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded Cart. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for Carts.
   *
   *
   */
  readonly obj?: Cart
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Cart](ctp:api:type:Cart).
 *
 */
export interface CartResourceIdentifier {
  readonly typeId: 'cart'
  /**
   *	Unique identifier of the referenced [Cart](ctp:api:type:Cart). Either `id` or `key` is required.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced [Cart](ctp:api:type:Cart). Either `id` or `key` is required.
   *
   *
   */
  readonly key?: string
}
export type CartState = 'Active' | 'Merged' | 'Ordered' | string
export interface CartUpdate {
  /**
   *
   */
  readonly version: number
  /**
   *
   */
  readonly actions: CartUpdateAction[]
}
export type CartUpdateAction =
  | CartAddCustomLineItemAction
  | CartAddCustomShippingMethodAction
  | CartAddDiscountCodeAction
  | CartAddItemShippingAddressAction
  | CartAddLineItemAction
  | CartAddPaymentAction
  | CartAddShippingMethodAction
  | CartAddShoppingListAction
  | CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction
  | CartApplyDeltaToLineItemShippingDetailsTargetsAction
  | CartChangeCustomLineItemMoneyAction
  | CartChangeCustomLineItemPriceModeAction
  | CartChangeCustomLineItemQuantityAction
  | CartChangeLineItemQuantityAction
  | CartChangeTaxCalculationModeAction
  | CartChangeTaxModeAction
  | CartChangeTaxRoundingModeAction
  | CartRecalculateAction
  | CartRemoveCustomLineItemAction
  | CartRemoveDiscountCodeAction
  | CartRemoveItemShippingAddressAction
  | CartRemoveLineItemAction
  | CartRemovePaymentAction
  | CartRemoveShippingMethodAction
  | CartSetAnonymousIdAction
  | CartSetBillingAddressAction
  | CartSetBillingAddressCustomFieldAction
  | CartSetBillingAddressCustomTypeAction
  | CartSetCartTotalTaxAction
  | CartSetCountryAction
  | CartSetCustomFieldAction
  | CartSetCustomLineItemCustomFieldAction
  | CartSetCustomLineItemCustomTypeAction
  | CartSetCustomLineItemShippingDetailsAction
  | CartSetCustomLineItemTaxAmountAction
  | CartSetCustomLineItemTaxRateAction
  | CartSetCustomShippingMethodAction
  | CartSetCustomTypeAction
  | CartSetCustomerEmailAction
  | CartSetCustomerGroupAction
  | CartSetCustomerIdAction
  | CartSetDeleteDaysAfterLastModificationAction
  | CartSetDeliveryAddressCustomFieldAction
  | CartSetDeliveryAddressCustomTypeAction
  | CartSetDirectDiscountsAction
  | CartSetItemShippingAddressCustomFieldAction
  | CartSetItemShippingAddressCustomTypeAction
  | CartSetKeyAction
  | CartSetLineItemCustomFieldAction
  | CartSetLineItemCustomTypeAction
  | CartSetLineItemDistributionChannelAction
  | CartSetLineItemPriceAction
  | CartSetLineItemShippingDetailsAction
  | CartSetLineItemSupplyChannelAction
  | CartSetLineItemTaxAmountAction
  | CartSetLineItemTaxRateAction
  | CartSetLineItemTotalPriceAction
  | CartSetLocaleAction
  | CartSetShippingAddressAction
  | CartSetShippingAddressCustomFieldAction
  | CartSetShippingAddressCustomTypeAction
  | CartSetShippingCustomFieldAction
  | CartSetShippingCustomTypeAction
  | CartSetShippingMethodAction
  | CartSetShippingMethodTaxAmountAction
  | CartSetShippingMethodTaxRateAction
  | CartSetShippingRateInputAction
  | CartUpdateItemShippingAddressAction
export interface CustomLineItem {
  /**
   *	Unique identifier of the CustomLineItem.
   *
   */
  readonly id: string
  /**
   *	The name of this CustomLineItem.
   *
   */
  readonly name: LocalizedString
  /**
   *	The cost to add to the cart.
   *	The amount can be negative.
   *
   */
  readonly money: TypedMoney
  /**
   *	Set once the `taxRate` is set.
   *
   */
  readonly taxedPrice?: TaxedItemPrice
  /**
   *	The total price of this custom line item.
   *	If custom line item is discounted, then the `totalPrice` would be the discounted custom line item price multiplied by `quantity`.
   *	Otherwise a total price is just a `money` multiplied by the `quantity`.
   *	`totalPrice` may or may not include the taxes: it depends on the taxRate.includedInPrice property.
   *
   */
  readonly totalPrice: TypedMoney
  /**
   *	A unique String in the cart to identify this CustomLineItem.
   *
   */
  readonly slug: string
  /**
   *	The amount of a CustomLineItem in the cart.
   *	Must be a positive integer.
   *
   */
  readonly quantity: number
  /**
   *
   */
  readonly state: ItemState[]
  /**
   *
   */
  readonly taxCategory?: TaxCategoryReference
  /**
   *	Will be set automatically in the `Platform` TaxMode once the shipping address is set is set.
   *	For the `External` tax mode the tax rate has to be set explicitly with the ExternalTaxRateDraft.
   *
   */
  readonly taxRate?: TaxRate
  /**
   *
   */
  readonly discountedPricePerQuantity: DiscountedLineItemPriceForQuantity[]
  /**
   *
   */
  readonly custom?: CustomFields
  /**
   *	Container for custom line item specific address(es).
   *	CustomLineItem fields that can be used in query predicates: `slug`, `name`, `quantity`,
   *	`money`, `state`, `discountedPricePerQuantity`.
   *
   */
  readonly shippingDetails?: ItemShippingDetails
  /**
   *	Specifies whether Cart Discounts with a matching [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget)
   *	are applied to the Custom Line Item.
   *
   *
   */
  readonly priceMode: CustomLineItemPriceMode
}
export interface CustomLineItemDraft {
  /**
   *
   */
  readonly name: LocalizedString
  /**
   *	The amount of a CustomLineItemin the cart.
   *	Must be a positive integer.
   *
   */
  readonly quantity: number
  /**
   *
   */
  readonly money: Money
  /**
   *
   */
  readonly slug: string
  /**
   *	The given tax category will be used to select a tax rate when a cart has the TaxMode `Platform`.
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	An external tax rate can be set if the cart has the `External` TaxMode.
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	The custom fields.
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	Container for custom line item specific address(es).
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
  /**
   *	- If `Standard`, Cart Discounts with a matching [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget)
   *	are applied to the Custom Line Item.
   *	- If `External`, Cart Discounts are not considered on the Custom Line Item.
   *
   *
   */
  readonly priceMode: CustomLineItemPriceMode
}
export type CustomLineItemPriceMode = 'External' | 'Standard' | string
export interface CustomShippingDraft {
  /**
   *	User-defined unique identifier of the custom Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly key: string
  /**
   *	Name of the custom Shipping Method.
   *
   *
   */
  readonly shippingMethodName: string
  /**
   *	Determines the shipping rate and Tax Rate of the associated Line Items.
   *
   *
   */
  readonly shippingAddress?: BaseAddress
  /**
   *	Determines the shipping price.
   *
   *
   */
  readonly shippingRate: ShippingRateDraft
  /**
   *	Used as an input to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *
   *	- Must be [ClassificationShippingRateInput](ctp:api:type:ClassificationShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartClassificationType](ctp:api:type:CartClassificationType).
   *	- Must be [ScoreShippingRateInput](ctp:api:type:ScoreShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartScoreType](ctp:api:type:CartScoreType).
   *
   *	The `shippingRateInput` cannot be set on the Cart if [CartValueType](ctp:api:type:CartValueType) is defined.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Tax Category used to determine a shipping Tax Rate if a Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	Tax Rate used to tax a shipping expense if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: string
  /**
   *	Deliveries tied to a Shipping Method in a multi-shipping method Cart.
   *	It holds information on how items are delivered to customers.
   *
   *
   */
  readonly deliveries: Delivery[]
  /**
   *	Custom Fields for the custom Shipping Method.
   *
   *
   */
  readonly custom?: string
}
export interface DirectDiscount {
  /**
   *	The unique ID of the cart discount.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly value: CartDiscountValue
  /**
   *	Empty when the `value` has type `giftLineItem`, otherwise a CartDiscountTarget is set.
   *
   */
  readonly target?: CartDiscountTarget
}
export interface DirectDiscountDraft {
  /**
   *
   */
  readonly value: CartDiscountValue
  /**
   *	Empty when the `value` has type `giftLineItem`, otherwise a CartDiscountTarget is set.
   *
   */
  readonly target?: CartDiscountTarget
}
export interface DiscountCodeInfo {
  /**
   *
   */
  readonly discountCode: DiscountCodeReference
  /**
   *
   */
  readonly state: DiscountCodeState
}
export type DiscountCodeState =
  | 'ApplicationStoppedByPreviousDiscount'
  | 'DoesNotMatchCart'
  | 'MatchesCart'
  | 'MaxApplicationReached'
  | 'NotActive'
  | 'NotValid'
  | string
export interface DiscountedLineItemPortion {
  /**
   *
   */
  readonly discount: CartDiscountReference
  /**
   *
   */
  readonly discountedAmount: TypedMoney
}
export interface DiscountedLineItemPrice {
  /**
   *
   */
  readonly value: TypedMoney
  /**
   *
   */
  readonly includedDiscounts: DiscountedLineItemPortion[]
}
export interface DiscountedLineItemPriceForQuantity {
  /**
   *
   */
  readonly quantity: number
  /**
   *
   */
  readonly discountedPrice: DiscountedLineItemPrice
}
export interface ExternalLineItemTotalPrice {
  /**
   *
   */
  readonly price: Money
  /**
   *
   */
  readonly totalPrice: Money
}
export interface ExternalTaxAmountDraft {
  /**
   *	The total gross amount of the item (totalNet + taxes).
   *
   */
  readonly totalGross: Money
  /**
   *
   */
  readonly taxRate: ExternalTaxRateDraft
}
export interface ExternalTaxRateDraft {
  /**
   *
   */
  readonly name: string
  /**
   *	Percentage in the range of [0..1].
   *	Must be supplied if no `subRates` are specified.
   *	If `subRates` are specified
   *	then the `amount` can be omitted or it must be the sum of the amounts of all `subRates`.
   *
   */
  readonly amount?: number
  /**
   *	A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   *
   */
  readonly country: string
  /**
   *	The state in the country
   *
   */
  readonly state?: string
  /**
   *	For countries (e.g.
   *	the US) where the total tax is a combination of multiple taxes (e.g.
   *	state and local taxes).
   *
   */
  readonly subRates?: SubRate[]
  /**
   *	The default value for `includedInPrice` is FALSE.
   *
   */
  readonly includedInPrice?: boolean
}
export type InventoryMode = 'None' | 'ReserveOnOrder' | 'TrackOnly' | string
export interface ItemShippingDetails {
  /**
   *	Used to map what sub-quantity should be shipped to which address.
   *	Duplicate address keys are not allowed.
   *
   */
  readonly targets: ItemShippingTarget[]
  /**
   *	`true` if the quantity of the Line Item or Custom Line Item is equal to the sum of the sub-quantities in `targets`, else it is `false`.
   *	Ordering a Cart with value as `false` returns an [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError) error.
   *
   */
  readonly valid: boolean
}
export interface ItemShippingDetailsDraft {
  /**
   *	Used to capture one or more (custom) line item specific shipping addresses.
   *	By specifying sub-quantities, it is possible to set multiple shipping addresses for one line item.
   *	A cart can have `shippingDetails` where the `targets` sum does not match the quantity of the line item or custom line item.
   *	For the order creation and order updates the `targets` sum must match the quantity.
   *
   */
  readonly targets: ItemShippingTarget[]
}
export interface ItemShippingTarget {
  /**
   *	The key of the address in the cart's `itemShippingAddresses`
   *
   */
  readonly addressKey: string
  /**
   *	The quantity of items that should go to the address with the specified `addressKey`.
   *	Only positive values are allowed.
   *	Using `0` as quantity is also possible in a draft object, but the element will not be present in the resulting ItemShippingDetails.
   *
   */
  readonly quantity: number
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *	It connects Line Item quantities with individual shipping addresses.
   *
   */
  readonly shippingMethodKey?: string
}
export interface LineItem {
  /**
   *	Unique identifier of the LineItem.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly productId: string
  /**
   *	User-defined unique identifier of the [Product](ctp:api:type:Product).
   *	Only present on Line Items in a [Cart](ctp:api:type:Cart) when the `key` is available on that specific Product at the time the Line Item is created or updated on the Cart. On [Order](/ctp:api:type:Order) resources this field is only present when the `key` is available on the specific Product at the time the Order is created from the Cart. This field is in general not present on Carts that had no updates until 3 December 2021 and on Orders created before this date.
   *
   */
  readonly productKey?: string
  /**
   *	The product name.
   *
   */
  readonly name: LocalizedString
  /**
   *	The slug of a product is inserted on the fly.
   *	It is always up-to-date and can therefore be used to link to the product detail page of the product.
   *	It is empty if the product has been deleted.
   *	The slug is also empty if the cart or order is retrieved via Reference Expansion or is a snapshot in a Message.
   *
   */
  readonly productSlug?: LocalizedString
  /**
   *
   */
  readonly productType: ProductTypeReference
  /**
   *	The variant data is saved when the variant is added to the cart, and not updated automatically.
   *	It can manually be updated with the Recalculate update action.
   *
   */
  readonly variant: ProductVariant
  /**
   *	The price of a line item is selected from the product variant according to the Product's [priceMode](ctp:api:type:Product) value.
   *	If the `priceMode` is `Embedded` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum) and the `variant` field hasn't been updated, the price may not correspond to a price in `variant.prices`.
   *
   */
  readonly price: Price
  /**
   *	Set once the `taxRate` is set.
   *
   */
  readonly taxedPrice?: TaxedItemPrice
  /**
   *	Taxed price of the Shipping Method that is set automatically after `perMethodTaxRate` is set.
   *
   */
  readonly taxedPricePortions: MethodTaxedPrice[]
  /**
   *	The total price of this line item.
   *	If the line item is discounted, then the `totalPrice` is the DiscountedLineItemPriceForQuantity multiplied by `quantity`.
   *	Otherwise the total price is the product price multiplied by the `quantity`.
   *	`totalPrice` may or may not include the taxes: it depends on the taxRate.includedInPrice property.
   *
   */
  readonly totalPrice: TypedMoney
  /**
   *	The amount of a LineItem in the cart.
   *	Must be a positive integer.
   *
   */
  readonly quantity: number
  /**
   *	When the line item was added to the cart. Optional for backwards
   *	compatibility reasons only.
   *
   */
  readonly addedAt?: string
  /**
   *
   */
  readonly state: ItemState[]
  /**
   *	Will be set automatically in the `Platform` TaxMode once the shipping address is set is set.
   *	For the `External` tax mode the tax rate has to be set explicitly with the ExternalTaxRateDraft.
   *
   */
  readonly taxRate?: TaxRate
  /**
   *	Tax Rate per Shipping Method that is automatically set after the [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction) to a Cart with the `Platform` [TaxMode](ctp:api:type:TaxMode) and `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *	For the `External` [TaxMode](ctp:api:type:TaxMode), the Tax Rate must be set with [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).
   *
   */
  readonly perMethodTaxRate: MethodTaxRate[]
  /**
   *	The supply channel identifies the inventory entries that should be reserved.
   *	The channel has
   *	the role InventorySupply.
   *
   */
  readonly supplyChannel?: ChannelReference
  /**
   *	The distribution channel is used to select a ProductPrice.
   *	The channel has the role ProductDistribution.
   *
   */
  readonly distributionChannel?: ChannelReference
  /**
   *
   */
  readonly discountedPricePerQuantity: DiscountedLineItemPriceForQuantity[]
  /**
   *
   */
  readonly priceMode: LineItemPriceMode
  /**
   *
   */
  readonly lineItemMode: LineItemMode
  /**
   *
   */
  readonly custom?: CustomFields
  /**
   *	Inventory mode specific to the line item only, valid for the entire `quantity` of the line item.
   *	Only present if inventory mode is different from the `inventoryMode` specified on the [Cart](ctp:api:type:Cart).
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	Container for line item specific address(es).
   *
   */
  readonly shippingDetails?: ItemShippingDetails
  /**
   *	The date when the LineItem was last modified by one of the following actions
   *	setLineItemShippingDetails, addLineItem, removeLineItem, or changeLineItemQuantity.
   *	Optional only for backwards compatible reasons. When the LineItem is created lastModifiedAt is set to addedAt.
   *
   */
  readonly lastModifiedAt?: string
}
export interface LineItemDraft {
  /**
   *
   */
  readonly productId?: string
  /**
   *
   */
  readonly variantId?: number
  /**
   *
   */
  readonly sku?: string
  /**
   *	The amount of a `LineItem`in the cart.
   *	Must be a positive integer.
   *
   */
  readonly quantity?: number
  /**
   *	When the line item was added to the cart. Optional for backwards
   *	compatibility reasons only.
   *
   */
  readonly addedAt?: string
  /**
   *	By providing supply channel information, you can unique identify
   *	inventory entries that should be reserved.
   *	The provided channel should have
   *	the InventorySupply role.
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
  /**
   *	The channel is used to select a ProductPrice.
   *	The provided channel should have the ProductDistribution role.
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
  /**
   *	An external tax rate can be set if the cart has the `External` TaxMode.
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	The custom fields.
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	Sets the line item `price` to the given value and sets the line item `priceMode` to `ExternalPrice` LineItemPriceMode.
   *
   */
  readonly externalPrice?: Money
  /**
   *	Sets the line item `price` and `totalPrice` to the given values and sets the line item `priceMode` to `ExternalTotal` LineItemPriceMode.
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
  /**
   *	Inventory mode specific to the line item only, valid for the entire `quantity` of the line item.
   *	Set only if inventory mode should be different from the `inventoryMode` specified on the [Cart](ctp:api:type:Cart).
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	Container for line item specific address(es).
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export type LineItemMode = 'GiftLineItem' | 'Standard' | string
export type LineItemPriceMode =
  | 'ExternalPrice'
  | 'ExternalTotal'
  | 'Platform'
  | string
export interface MethodTaxRate {
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingMethodKey: string
  /**
   *	Tax Rate for the Shipping Method.
   *
   *
   */
  readonly taxRate?: TaxRate
}
export interface MethodTaxedPrice {
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingMethodKey: string
  /**
   *	Taxed price for the Shipping Method.
   *
   *
   */
  readonly taxedPrice?: TaxedItemPrice
}
export interface ReplicaCartDraft {
  /**
   *
   */
  readonly reference: CartReference | OrderReference
  /**
   *	User-specific unique identifier of the cart.
   *
   */
  readonly key?: string
}
export type RoundingMode = 'HalfDown' | 'HalfEven' | 'HalfUp' | string
export interface Shipping {
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey: string
  /**
   *	Automatically set when the [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction).
   *
   *
   */
  readonly shippingInfo: ShippingInfo
  /**
   *	Determines the shipping rates and Tax Rates of the associated Line Item quantities.
   *
   *
   */
  readonly shippingAddress: Address
  /**
   *	Used as an input to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *
   *	- Must be [ClassificationShippingRateInput](ctp:api:type:ClassificationShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartClassificationType](ctp:api:type:CartClassificationType).
   *	- Must be [ScoreShippingRateInput](ctp:api:type:ScoreShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartScoreType](ctp:api:type:CartScoreType).
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInput
  /**
   *	Custom Fields of Shipping.
   *
   *
   */
  readonly shippingCustomFields?: CustomFields
}
/**
 *	Wraps all shipping-related information (such as address, rate, deliveries) per Shipping Method for Carts with multiple Shipping Methods.
 *
 */
export interface ShippingDraft {
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly key: string
  /**
   *	Shipping Methods added to the Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingMethod?: ShippingMethodReference
  /**
   *	Determines the shipping rate and Tax Rate of the associated Line Items.
   *
   *
   */
  readonly shippingAddress?: BaseAddress
  /**
   *	Used as an input to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *
   *	- Must be [ClassificationShippingRateInput](ctp:api:type:ClassificationShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartClassificationType](ctp:api:type:CartClassificationType).
   *	- Must be [ScoreShippingRateInput](ctp:api:type:ScoreShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartScoreType](ctp:api:type:CartScoreType).
   *
   *	The `shippingRateInput` cannot be set on the Cart if [CartValueType](ctp:api:type:CartValueType) is defined.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Tax Rate used for taxing a shipping expense if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: string
  /**
   *	Holds information on how items are delivered to customers.
   *
   *
   */
  readonly deliveries: Delivery[]
  /**
   *	Custom Fields for Shipping.
   *
   *
   */
  readonly custom?: string
}
export interface ShippingInfo {
  /**
   *
   */
  readonly shippingMethodName: string
  /**
   *	Determined based on the ShippingRate and its tiered prices, and either the sum of LineItem prices or the `shippingRateInput` field.
   *
   */
  readonly price: TypedMoney
  /**
   *	The shipping rate used to determine the price.
   *
   */
  readonly shippingRate: ShippingRate
  /**
   *	Set once the `taxRate` is set.
   *
   */
  readonly taxedPrice?: TaxedItemPrice
  /**
   *	Will be set automatically in the `Platform` TaxMode once the shipping address is set is set.
   *	For the `External` tax mode the tax rate has to be set explicitly with the ExternalTaxRateDraft.
   *
   */
  readonly taxRate?: TaxRate
  /**
   *
   */
  readonly taxCategory?: TaxCategoryReference
  /**
   *	Not set if custom shipping method is used.
   *
   */
  readonly shippingMethod?: ShippingMethodReference
  /**
   *	Deliveries are compilations of information on how the articles are being delivered to the customers.
   *
   */
  readonly deliveries?: Delivery[]
  /**
   *
   */
  readonly discountedPrice?: DiscountedLineItemPrice
  /**
   *	Indicates whether the ShippingMethod referenced in this ShippingInfo is allowed for the cart or not.
   *
   */
  readonly shippingMethodState: ShippingMethodState
}
export type ShippingMethodState = 'DoesNotMatchCart' | 'MatchesCart' | string
export type ShippingMode = 'Multiple' | 'Single' | string
export type ShippingRateInput =
  | ClassificationShippingRateInput
  | ScoreShippingRateInput
export interface ClassificationShippingRateInput {
  readonly type: 'Classification'
  /**
   *
   */
  readonly key: string
  /**
   *	JSON object where the keys are of type [Locale](ctp:api:type:Locale), and the values are the strings used for the corresponding language.
   *
   *
   */
  readonly label: LocalizedString
}
export interface ScoreShippingRateInput {
  readonly type: 'Score'
  /**
   *
   */
  readonly score: number
}
export type ShippingRateInputDraft =
  | ClassificationShippingRateInputDraft
  | ScoreShippingRateInputDraft
export interface ClassificationShippingRateInputDraft {
  readonly type: 'Classification'
  /**
   *
   */
  readonly key: string
}
export interface ScoreShippingRateInputDraft {
  readonly type: 'Score'
  /**
   *
   */
  readonly score: number
}
export type TaxCalculationMode = 'LineItemLevel' | 'UnitPriceLevel' | string
export type TaxMode =
  | 'Disabled'
  | 'External'
  | 'ExternalAmount'
  | 'Platform'
  | string
export interface TaxPortion {
  /**
   *
   */
  readonly name?: string
  /**
   *	A number in the range [0..1]
   *
   */
  readonly rate: number
  /**
   *
   */
  readonly amount: TypedMoney
}
export interface TaxPortionDraft {
  /**
   *
   */
  readonly name?: string
  /**
   *
   */
  readonly rate: number
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly amount: Money
}
export interface TaxedItemPrice {
  /**
   *
   */
  readonly totalNet: TypedMoney
  /**
   *	TaxedItemPrice fields can not be used in query predicates.
   *
   */
  readonly totalGross: TypedMoney
  /**
   *	Calculated automatically as the subtraction of `totalGross` - `totalNet`.
   *
   *
   */
  readonly totalTax?: TypedMoney
}
export interface TaxedPrice {
  /**
   *
   */
  readonly totalNet: TypedMoney
  /**
   *
   */
  readonly totalGross: TypedMoney
  /**
   *	TaxedPrice fields that can be used in query predicates: `totalNet`, `totalGross`.
   *
   */
  readonly taxPortions: TaxPortion[]
  /**
   *	Calculated automatically as the subtraction of `totalGross` - `totalNet`.
   *
   *
   */
  readonly totalTax?: TypedMoney
}
export interface TaxedPriceDraft {
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly totalNet: Money
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly totalGross: Money
  /**
   *
   */
  readonly taxPortions: TaxPortionDraft[]
}
export interface CartAddCustomLineItemAction {
  readonly action: 'addCustomLineItem'
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly money: Money
  /**
   *	JSON object where the keys are of type [Locale](ctp:api:type:Locale), and the values are the strings used for the corresponding language.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *
   */
  readonly quantity: number
  /**
   *
   */
  readonly slug: string
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [TaxCategory](ctp:api:type:TaxCategory).
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	The representation used when creating or updating a [customizable data type](/../api/projects/types#list-of-customizable-data-types) with Custom Fields.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	- If `Standard`, Cart Discounts with a matching [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget)
   *	are applied to the Custom Line Item.
   *	- If `External`, Cart Discounts are not considered on the Custom Line Item.
   *
   *
   */
  readonly priceMode?: CustomLineItemPriceMode
}
export interface CartAddCustomShippingMethodAction {
  readonly action: 'addCustomShippingMethod'
  /**
   *	User-defined unique identifier of the custom Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey: string
  /**
   *	Name of the custom Shipping Method.
   *
   *
   */
  readonly shippingMethodName: string
  /**
   *	Determines the shipping rate and Tax Rate of the associated Line Items.
   *
   *
   */
  readonly shippingAddress: BaseAddress
  /**
   *	Determines the shipping price.
   *
   *
   */
  readonly shippingRate: ShippingRateDraft
  /**
   *	Used as an input to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *
   *	- Must be [ClassificationShippingRateInput](ctp:api:type:ClassificationShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartClassificationType](ctp:api:type:CartClassificationType).
   *	- Must be [ScoreShippingRateInput](ctp:api:type:ScoreShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartScoreType](ctp:api:type:CartScoreType).
   *
   *	The `shippingRateInput` cannot be set on the Cart if [CartValueType](ctp:api:type:CartValueType) is defined.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Tax Category used to determine a shipping Tax Rate if a Cart has the `Platform` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	Tax Rate used to tax a shipping expense if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: string
  /**
   *	Deliveries tied to a Shipping Method in a multi-shipping method Cart.
   *	It holds information on how items are delivered to customers.
   *
   *
   */
  readonly deliveries: Delivery[]
  /**
   *	Custom Fields for the custom Shipping Method.
   *
   *
   */
  readonly custom?: string
}
export interface CartAddDiscountCodeAction {
  readonly action: 'addDiscountCode'
  /**
   *
   */
  readonly code: string
}
export interface CartAddItemShippingAddressAction {
  readonly action: 'addItemShippingAddress'
  /**
   *
   */
  readonly address: BaseAddress
}
export interface CartAddLineItemAction {
  readonly action: 'addLineItem'
  /**
   *	The representation used when creating or updating a [customizable data type](/../api/projects/types#list-of-customizable-data-types) with Custom Fields.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
  /**
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *
   */
  readonly productId?: string
  /**
   *
   */
  readonly variantId?: number
  /**
   *
   */
  readonly sku?: string
  /**
   *
   */
  readonly quantity?: number
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly externalPrice?: Money
  /**
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
  /**
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export interface CartAddPaymentAction {
  readonly action: 'addPayment'
  /**
   *
   */
  readonly payment: PaymentResourceIdentifier
}
/**
 *	This update action fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the referenced shipping method has a predicate that does not match the Cart.
 *
 */
export interface CartAddShippingMethodAction {
  readonly action: 'addShippingMethod'
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly shippingMethod: ShippingMethodReference
  /**
   *	Determines the shipping rate and Tax Rate of the Line Items.
   *
   *
   */
  readonly shippingAddress: BaseAddress
  /**
   *	Used as an input to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *
   *	- Must be [ClassificationShippingRateInput](ctp:api:type:ClassificationShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartClassificationType](ctp:api:type:CartClassificationType).
   *	- Must be [ScoreShippingRateInput](ctp:api:type:ScoreShippingRateInput) if [ShippingRateInputType](ctp:api:type:ShippingRateInputType) is [CartScoreType](ctp:api:type:CartScoreType).
   *
   *	The `shippingRateInput` cannot be set on the Cart if [CartValueType](ctp:api:type:CartValueType) is defined.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
  /**
   *	Tax Rate used to tax a shipping expense if a Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
   *
   *
   */
  readonly externalTaxRate?: string
  /**
   *	Deliveries tied to a Shipping Method in a multi-shipping method Cart.
   *	It holds information on how items are delivered to customers.
   *
   *
   */
  readonly deliveries: Delivery[]
  /**
   *	Custom Fields for the Shipping Method.
   *
   *
   */
  readonly custom?: string
}
export interface CartAddShoppingListAction {
  readonly action: 'addShoppingList'
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [ShoppingList](ctp:api:type:ShoppingList).
   *
   *
   */
  readonly shoppingList: ShoppingListResourceIdentifier
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
}
export interface CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction {
  readonly action: 'applyDeltaToCustomLineItemShippingDetailsTargets'
  /**
   *
   */
  readonly customLineItemId: string
  /**
   *
   */
  readonly targetsDelta: ItemShippingTarget[]
}
export interface CartApplyDeltaToLineItemShippingDetailsTargetsAction {
  readonly action: 'applyDeltaToLineItemShippingDetailsTargets'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *
   */
  readonly targetsDelta: ItemShippingTarget[]
}
export interface CartChangeCustomLineItemMoneyAction {
  readonly action: 'changeCustomLineItemMoney'
  /**
   *
   */
  readonly customLineItemId: string
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly money: Money
}
export interface CartChangeCustomLineItemPriceModeAction {
  readonly action: 'changeCustomLineItemPriceMode'
  /**
   *	ID of the Custom Line Item to be updated.
   *
   *
   */
  readonly customLineItemId: string
  /**
   *	New value to set.
   *
   *
   */
  readonly mode: CustomLineItemPriceMode
}
export interface CartChangeCustomLineItemQuantityAction {
  readonly action: 'changeCustomLineItemQuantity'
  /**
   *
   */
  readonly customLineItemId: string
  /**
   *
   */
  readonly quantity: number
}
export interface CartChangeLineItemQuantityAction {
  readonly action: 'changeLineItemQuantity'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *
   */
  readonly quantity: number
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly externalPrice?: Money
  /**
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
}
export interface CartChangeTaxCalculationModeAction {
  readonly action: 'changeTaxCalculationMode'
  /**
   *
   */
  readonly taxCalculationMode: TaxCalculationMode
}
export interface CartChangeTaxModeAction {
  readonly action: 'changeTaxMode'
  /**
   *
   */
  readonly taxMode: TaxMode
}
export interface CartChangeTaxRoundingModeAction {
  readonly action: 'changeTaxRoundingMode'
  /**
   *
   */
  readonly taxRoundingMode: RoundingMode
}
export interface CartRecalculateAction {
  readonly action: 'recalculate'
  /**
   *	If set to `true`, the line item product data (`name`, `variant` and `productType`) will also be updated.
   *	If set to `false`, only the prices and tax rates of the line item will be updated.
   *	Notice that if the Product's [priceMode](ctp:api:type:Product) value is `Embedded` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum), the updated price of a line item may not correspond to a price in `variant.prices` anymore.
   *
   */
  readonly updateProductData?: boolean
}
export interface CartRemoveCustomLineItemAction {
  readonly action: 'removeCustomLineItem'
  /**
   *
   */
  readonly customLineItemId: string
}
export interface CartRemoveDiscountCodeAction {
  readonly action: 'removeDiscountCode'
  /**
   *	[Reference](ctp:api:type:Reference) to a [DiscountCode](ctp:api:type:DiscountCode).
   *
   *
   */
  readonly discountCode: DiscountCodeReference
}
export interface CartRemoveItemShippingAddressAction {
  readonly action: 'removeItemShippingAddress'
  /**
   *
   */
  readonly addressKey: string
}
export interface CartRemoveLineItemAction {
  readonly action: 'removeLineItem'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *
   */
  readonly quantity?: number
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly externalPrice?: Money
  /**
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
  /**
   *
   */
  readonly shippingDetailsToRemove?: ItemShippingDetailsDraft
}
export interface CartRemovePaymentAction {
  readonly action: 'removePayment'
  /**
   *
   */
  readonly payment: PaymentResourceIdentifier
}
export interface CartRemoveShippingMethodAction {
  readonly action: 'removeShippingMethod'
  /**
   *	User-defined unique identifier of the Shipping Method to remove in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey: string
}
export interface CartSetAnonymousIdAction {
  readonly action: 'setAnonymousId'
  /**
   *	If not set, any existing anonymous ID will be removed.
   *
   */
  readonly anonymousId?: string
}
export interface CartSetBillingAddressAction {
  readonly action: 'setBillingAddress'
  /**
   *
   */
  readonly address?: BaseAddress
}
export interface CartSetBillingAddressCustomFieldAction {
  readonly action: 'setBillingAddressCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetBillingAddressCustomTypeAction {
  readonly action: 'setBillingAddressCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `billingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `billingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `billingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetCartTotalTaxAction {
  readonly action: 'setCartTotalTax'
  /**
   *	The total gross amount of the cart (totalNet + taxes).
   *
   */
  readonly externalTotalGross: Money
  /**
   *
   */
  readonly externalTaxPortions?: TaxPortionDraft[]
}
export interface CartSetCountryAction {
  readonly action: 'setCountry'
  /**
   *	Two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   *
   *
   */
  readonly country?: string
}
export interface CartSetCustomFieldAction {
  readonly action: 'setCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetCustomLineItemCustomFieldAction {
  readonly action: 'setCustomLineItemCustomField'
  /**
   *
   */
  readonly customLineItemId: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetCustomLineItemCustomTypeAction {
  readonly action: 'setCustomLineItemCustomType'
  /**
   *
   */
  readonly customLineItemId: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the CustomLineItem with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the CustomLineItem.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the CustomLineItem.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetCustomLineItemShippingDetailsAction {
  readonly action: 'setCustomLineItemShippingDetails'
  /**
   *
   */
  readonly customLineItemId: string
  /**
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export interface CartSetCustomLineItemTaxAmountAction {
  readonly action: 'setCustomLineItemTaxAmount'
  /**
   *
   */
  readonly customLineItemId: string
  /**
   *
   */
  readonly externalTaxAmount?: ExternalTaxAmountDraft
}
export interface CartSetCustomLineItemTaxRateAction {
  readonly action: 'setCustomLineItemTaxRate'
  /**
   *
   */
  readonly customLineItemId: string
  /**
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
}
export interface CartSetCustomShippingMethodAction {
  readonly action: 'setCustomShippingMethod'
  /**
   *
   */
  readonly shippingMethodName: string
  /**
   *
   */
  readonly shippingRate: ShippingRateDraft
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [TaxCategory](ctp:api:type:TaxCategory).
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
}
export interface CartSetCustomTypeAction {
  readonly action: 'setCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Cart with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Cart.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Cart.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetCustomerEmailAction {
  readonly action: 'setCustomerEmail'
  /**
   *
   */
  readonly email: string
}
export interface CartSetCustomerGroupAction {
  readonly action: 'setCustomerGroup'
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [CustomerGroup](ctp:api:type:CustomerGroup).
   *
   *
   */
  readonly customerGroup?: CustomerGroupResourceIdentifier
}
export interface CartSetCustomerIdAction {
  readonly action: 'setCustomerId'
  /**
   *	If set, a customer with the given ID must exist in the project.
   *
   */
  readonly customerId?: string
}
export interface CartSetDeleteDaysAfterLastModificationAction {
  readonly action: 'setDeleteDaysAfterLastModification'
  /**
   *
   */
  readonly deleteDaysAfterLastModification?: number
}
export interface CartSetDeliveryAddressCustomFieldAction {
  readonly action: 'setDeliveryAddressCustomField'
  /**
   *
   */
  readonly deliveryId: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetDeliveryAddressCustomTypeAction {
  readonly action: 'setDeliveryAddressCustomType'
  /**
   *
   */
  readonly deliveryId: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `address` in a Delivery with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `address` in a Delivery.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `address` in a Delivery.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetDirectDiscountsAction {
  readonly action: 'setDirectDiscounts'
  /**
   *
   */
  readonly discounts: DirectDiscountDraft[]
}
export interface CartSetItemShippingAddressCustomFieldAction {
  readonly action: 'setItemShippingAddressCustomField'
  /**
   *
   */
  readonly addressKey: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetItemShippingAddressCustomTypeAction {
  readonly action: 'setItemShippingAddressCustomType'
  /**
   *
   */
  readonly addressKey: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `itemShippingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `itemShippingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `itemShippingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetKeyAction {
  readonly action: 'setKey'
  /**
   *
   */
  readonly key?: string
}
export interface CartSetLineItemCustomFieldAction {
  readonly action: 'setLineItemCustomField'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetLineItemCustomTypeAction {
  readonly action: 'setLineItemCustomType'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the LineItem with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the LineItem.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the LineItem.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetLineItemDistributionChannelAction {
  readonly action: 'setLineItemDistributionChannel'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
}
export interface CartSetLineItemPriceAction {
  readonly action: 'setLineItemPrice'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *	Draft type that stores amounts in cent precision for the specified currency.
   *
   *	For storing money values in fractions of the minor unit in a currency, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft) instead.
   *
   *
   */
  readonly externalPrice?: Money
}
export interface CartSetLineItemShippingDetailsAction {
  readonly action: 'setLineItemShippingDetails'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export interface CartSetLineItemSupplyChannelAction {
  readonly action: 'setLineItemSupplyChannel'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
}
export interface CartSetLineItemTaxAmountAction {
  readonly action: 'setLineItemTaxAmount'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *
   */
  readonly externalTaxAmount?: ExternalTaxAmountDraft
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) used for this Line Item.```
   *	This is required for Carts with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
}
export interface CartSetLineItemTaxRateAction {
  readonly action: 'setLineItemTaxRate'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) used for this Line Item.```
   *	This is required for Carts with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
}
export interface CartSetLineItemTotalPriceAction {
  readonly action: 'setLineItemTotalPrice'
  /**
   *
   */
  readonly lineItemId: string
  /**
   *
   */
  readonly externalTotalPrice?: ExternalLineItemTotalPrice
}
export interface CartSetLocaleAction {
  readonly action: 'setLocale'
  /**
   *
   */
  readonly locale?: string
}
export interface CartSetShippingAddressAction {
  readonly action: 'setShippingAddress'
  /**
   *
   */
  readonly address?: BaseAddress
}
export interface CartSetShippingAddressCustomFieldAction {
  readonly action: 'setShippingAddressCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetShippingAddressCustomTypeAction {
  readonly action: 'setShippingAddressCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `shippingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `shippingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `shippingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetShippingCustomFieldAction {
  readonly action: 'setShippingCustomField'
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Trying to remove a field that does not exist will fail with an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface CartSetShippingCustomTypeAction {
  readonly action: 'setShippingCustomType'
  /**
   *	User-defined unique identifier of the Shipping Method in a Cart with `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `shippingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `shippingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `shippingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface CartSetShippingMethodAction {
  readonly action: 'setShippingMethod'
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [ShippingMethod](ctp:api:type:ShippingMethod).
   *
   *
   */
  readonly shippingMethod?: ShippingMethodResourceIdentifier
  /**
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
}
export interface CartSetShippingMethodTaxAmountAction {
  readonly action: 'setShippingMethodTaxAmount'
  /**
   *
   */
  readonly externalTaxAmount?: ExternalTaxAmountDraft
}
export interface CartSetShippingMethodTaxRateAction {
  readonly action: 'setShippingMethodTaxRate'
  /**
   *
   */
  readonly externalTaxRate?: ExternalTaxRateDraft
}
export interface CartSetShippingRateInputAction {
  readonly action: 'setShippingRateInput'
  /**
   *	Based on the definition of ShippingRateInputType.
   *	If CartClassification is defined, it must be ClassificationShippingRateInput.
   *	If CartScore is defined, it must be ScoreShippingRateInput.
   *	Otherwise it can not bet set.
   *
   */
  readonly shippingRateInput?: ShippingRateInputDraft
}
export interface CartUpdateItemShippingAddressAction {
  readonly action: 'updateItemShippingAddress'
  /**
   *
   */
  readonly address: BaseAddress
}
export interface CustomLineItemImportDraft {
  /**
   *
   */
  readonly name: LocalizedString
  /**
   *	The amount of a CustomLineItem in the cart.
   *	Must be a positive integer.
   *
   */
  readonly quantity: number
  /**
   *	The cost to add to the cart. The amount can be negative.
   *
   */
  readonly money: Money
  /**
   *
   */
  readonly slug: string
  /**
   *
   */
  readonly state?: ItemState[]
  /**
   *
   */
  readonly taxRate?: TaxRate
  /**
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	The custom fields.
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
  /**
   *	- If `Standard`, Cart Discounts with a matching [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget)
   *	are applied to the Custom Line Item.
   *	- If `External`, Cart Discounts are not considered on the Custom Line Item.
   *
   *
   */
  readonly priceMode: CustomLineItemPriceMode
}
/**
 *	The scope controls which part of the product information is published.
 */
export type ProductPublishScope = 'All' | 'Prices' | string
