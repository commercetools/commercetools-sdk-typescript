/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  BusinessUnitKeyReference,
  BusinessUnitResourceIdentifier,
} from './business-unit'
import {
  CartOrigin,
  CartReference,
  CartResourceIdentifier,
  CustomLineItem,
  CustomLineItemImportDraft,
  DirectDiscount,
  DiscountCodeInfo,
  DiscountedLineItemPortion,
  InventoryMode,
  ItemShippingDetailsDraft,
  LineItem,
  RoundingMode,
  Shipping,
  ShippingInfo,
  ShippingMethodState,
  ShippingMode,
  ShippingRateInput,
  TaxCalculationMode,
  TaxedPrice,
  TaxedPriceDraft,
  TaxMode,
} from './cart'
import { CartDiscountReference } from './cart-discount'
import { ChannelReference, ChannelResourceIdentifier } from './channel'
import {
  Address,
  AddressDraft,
  BaseAddress,
  BaseResource,
  CreatedBy,
  Image,
  LastModifiedBy,
  LocalizedString,
  PriceDraft,
  TypedMoney,
  _BaseAddress,
  _Money,
} from './common'
import {
  CustomerGroupReference,
  CustomerGroupResourceIdentifier,
} from './customer-group'
import {
  StagedOrder,
  StagedOrderAddCustomLineItemAction,
  StagedOrderAddDeliveryAction,
  StagedOrderAddDiscountCodeAction,
  StagedOrderAddItemShippingAddressAction,
  StagedOrderAddLineItemAction,
  StagedOrderAddParcelToDeliveryAction,
  StagedOrderAddPaymentAction,
  StagedOrderAddReturnInfoAction,
  StagedOrderAddShoppingListAction,
  StagedOrderChangeCustomLineItemMoneyAction,
  StagedOrderChangeCustomLineItemQuantityAction,
  StagedOrderChangeLineItemQuantityAction,
  StagedOrderChangeOrderStateAction,
  StagedOrderChangePaymentStateAction,
  StagedOrderChangeShipmentStateAction,
  StagedOrderChangeTaxCalculationModeAction,
  StagedOrderChangeTaxModeAction,
  StagedOrderChangeTaxRoundingModeAction,
  StagedOrderImportCustomLineItemStateAction,
  StagedOrderImportLineItemStateAction,
  StagedOrderRemoveCustomLineItemAction,
  StagedOrderRemoveDeliveryAction,
  StagedOrderRemoveDiscountCodeAction,
  StagedOrderRemoveItemShippingAddressAction,
  StagedOrderRemoveLineItemAction,
  StagedOrderRemoveParcelFromDeliveryAction,
  StagedOrderRemovePaymentAction,
  StagedOrderSetBillingAddressAction,
  StagedOrderSetBillingAddressCustomFieldAction,
  StagedOrderSetBillingAddressCustomTypeAction,
  StagedOrderSetCountryAction,
  StagedOrderSetCustomerEmailAction,
  StagedOrderSetCustomerGroupAction,
  StagedOrderSetCustomerIdAction,
  StagedOrderSetCustomFieldAction,
  StagedOrderSetCustomLineItemCustomFieldAction,
  StagedOrderSetCustomLineItemCustomTypeAction,
  StagedOrderSetCustomLineItemShippingDetailsAction,
  StagedOrderSetCustomLineItemTaxAmountAction,
  StagedOrderSetCustomLineItemTaxRateAction,
  StagedOrderSetCustomShippingMethodAction,
  StagedOrderSetCustomTypeAction,
  StagedOrderSetDeliveryAddressAction,
  StagedOrderSetDeliveryAddressCustomFieldAction,
  StagedOrderSetDeliveryAddressCustomTypeAction,
  StagedOrderSetDeliveryCustomFieldAction,
  StagedOrderSetDeliveryCustomTypeAction,
  StagedOrderSetDeliveryItemsAction,
  StagedOrderSetDirectDiscountsAction,
  StagedOrderSetItemShippingAddressCustomFieldAction,
  StagedOrderSetItemShippingAddressCustomTypeAction,
  StagedOrderSetLineItemCustomFieldAction,
  StagedOrderSetLineItemCustomTypeAction,
  StagedOrderSetLineItemDistributionChannelAction,
  StagedOrderSetLineItemPriceAction,
  StagedOrderSetLineItemShippingDetailsAction,
  StagedOrderSetLineItemTaxAmountAction,
  StagedOrderSetLineItemTaxRateAction,
  StagedOrderSetLineItemTotalPriceAction,
  StagedOrderSetLocaleAction,
  StagedOrderSetOrderNumberAction,
  StagedOrderSetOrderTotalTaxAction,
  StagedOrderSetParcelCustomFieldAction,
  StagedOrderSetParcelCustomTypeAction,
  StagedOrderSetParcelItemsAction,
  StagedOrderSetParcelMeasurementsAction,
  StagedOrderSetParcelTrackingDataAction,
  StagedOrderSetPurchaseOrderNumberAction,
  StagedOrderSetReturnInfoAction,
  StagedOrderSetReturnItemCustomFieldAction,
  StagedOrderSetReturnItemCustomTypeAction,
  StagedOrderSetReturnPaymentStateAction,
  StagedOrderSetReturnShipmentStateAction,
  StagedOrderSetShippingAddressAction,
  StagedOrderSetShippingAddressAndCustomShippingMethodAction,
  StagedOrderSetShippingAddressAndShippingMethodAction,
  StagedOrderSetShippingAddressCustomFieldAction,
  StagedOrderSetShippingAddressCustomTypeAction,
  StagedOrderSetShippingMethodAction,
  StagedOrderSetShippingMethodTaxAmountAction,
  StagedOrderSetShippingMethodTaxRateAction,
  StagedOrderSetShippingRateInputAction,
  StagedOrderSetStoreAction,
  StagedOrderTransitionCustomLineItemStateAction,
  StagedOrderTransitionLineItemStateAction,
  StagedOrderTransitionStateAction,
  StagedOrderUpdateItemShippingAddressAction,
  StagedOrderUpdateSyncInfoAction,
} from './order-edit'
import { PaymentReference, PaymentResourceIdentifier } from './payment'
import { Attribute } from './product'
import { QuoteReference, QuoteResourceIdentifier } from './quote'
import {
  ShippingMethodResourceIdentifier,
  ShippingRateDraft,
} from './shipping-method'
import { StateReference, StateResourceIdentifier } from './state'
import { StoreKeyReference, StoreResourceIdentifier } from './store'
import { TaxCategoryResourceIdentifier, TaxRate } from './tax-category'
import {
  CustomFields,
  CustomFieldsDraft,
  FieldContainer,
  TypeResourceIdentifier,
} from './type'

export type StagedOrderUpdateAction =
  | StagedOrderAddCustomLineItemAction
  | StagedOrderAddDeliveryAction
  | StagedOrderAddDiscountCodeAction
  | StagedOrderAddItemShippingAddressAction
  | StagedOrderAddLineItemAction
  | StagedOrderAddParcelToDeliveryAction
  | StagedOrderAddPaymentAction
  | StagedOrderAddReturnInfoAction
  | StagedOrderAddShoppingListAction
  | StagedOrderChangeCustomLineItemMoneyAction
  | StagedOrderChangeCustomLineItemQuantityAction
  | StagedOrderChangeLineItemQuantityAction
  | StagedOrderChangeOrderStateAction
  | StagedOrderChangePaymentStateAction
  | StagedOrderChangeShipmentStateAction
  | StagedOrderChangeTaxCalculationModeAction
  | StagedOrderChangeTaxModeAction
  | StagedOrderChangeTaxRoundingModeAction
  | StagedOrderImportCustomLineItemStateAction
  | StagedOrderImportLineItemStateAction
  | StagedOrderRemoveCustomLineItemAction
  | StagedOrderRemoveDeliveryAction
  | StagedOrderRemoveDiscountCodeAction
  | StagedOrderRemoveItemShippingAddressAction
  | StagedOrderRemoveLineItemAction
  | StagedOrderRemoveParcelFromDeliveryAction
  | StagedOrderRemovePaymentAction
  | StagedOrderSetBillingAddressAction
  | StagedOrderSetBillingAddressCustomFieldAction
  | StagedOrderSetBillingAddressCustomTypeAction
  | StagedOrderSetCountryAction
  | StagedOrderSetCustomFieldAction
  | StagedOrderSetCustomLineItemCustomFieldAction
  | StagedOrderSetCustomLineItemCustomTypeAction
  | StagedOrderSetCustomLineItemShippingDetailsAction
  | StagedOrderSetCustomLineItemTaxAmountAction
  | StagedOrderSetCustomLineItemTaxRateAction
  | StagedOrderSetCustomShippingMethodAction
  | StagedOrderSetCustomTypeAction
  | StagedOrderSetCustomerEmailAction
  | StagedOrderSetCustomerGroupAction
  | StagedOrderSetCustomerIdAction
  | StagedOrderSetDeliveryAddressAction
  | StagedOrderSetDeliveryAddressCustomFieldAction
  | StagedOrderSetDeliveryAddressCustomTypeAction
  | StagedOrderSetDeliveryCustomFieldAction
  | StagedOrderSetDeliveryCustomTypeAction
  | StagedOrderSetDeliveryItemsAction
  | StagedOrderSetDirectDiscountsAction
  | StagedOrderSetItemShippingAddressCustomFieldAction
  | StagedOrderSetItemShippingAddressCustomTypeAction
  | StagedOrderSetLineItemCustomFieldAction
  | StagedOrderSetLineItemCustomTypeAction
  | StagedOrderSetLineItemDistributionChannelAction
  | StagedOrderSetLineItemPriceAction
  | StagedOrderSetLineItemShippingDetailsAction
  | StagedOrderSetLineItemTaxAmountAction
  | StagedOrderSetLineItemTaxRateAction
  | StagedOrderSetLineItemTotalPriceAction
  | StagedOrderSetLocaleAction
  | StagedOrderSetOrderNumberAction
  | StagedOrderSetOrderTotalTaxAction
  | StagedOrderSetParcelCustomFieldAction
  | StagedOrderSetParcelCustomTypeAction
  | StagedOrderSetParcelItemsAction
  | StagedOrderSetParcelMeasurementsAction
  | StagedOrderSetParcelTrackingDataAction
  | StagedOrderSetPurchaseOrderNumberAction
  | StagedOrderSetReturnInfoAction
  | StagedOrderSetReturnItemCustomFieldAction
  | StagedOrderSetReturnItemCustomTypeAction
  | StagedOrderSetReturnPaymentStateAction
  | StagedOrderSetReturnShipmentStateAction
  | StagedOrderSetShippingAddressAction
  | StagedOrderSetShippingAddressAndCustomShippingMethodAction
  | StagedOrderSetShippingAddressAndShippingMethodAction
  | StagedOrderSetShippingAddressCustomFieldAction
  | StagedOrderSetShippingAddressCustomTypeAction
  | StagedOrderSetShippingMethodAction
  | StagedOrderSetShippingMethodTaxAmountAction
  | StagedOrderSetShippingMethodTaxRateAction
  | StagedOrderSetShippingRateInputAction
  | StagedOrderSetStoreAction
  | StagedOrderTransitionCustomLineItemStateAction
  | StagedOrderTransitionLineItemStateAction
  | StagedOrderTransitionStateAction
  | StagedOrderUpdateItemShippingAddressAction
  | StagedOrderUpdateSyncInfoAction
export interface Hit {
  /**
   *	Unique identifier of the Order.
   *
   */
  readonly id: string
  /**
   *	Current version of the Order.
   *
   */
  readonly version: number
  /**
   *	The higher the value is, the more relevant the hit is for the search request.
   *
   */
  readonly relevance?: number
}
export interface OrderPagedSearchResponse {
  /**
   *	Total number of results matching the query.
   *
   */
  readonly total: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset?: number
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit?: number
  /**
   *	Actual results.
   *
   */
  readonly hits: Hit[]
}
export type OrderSearchMatchType = 'all' | 'any' | string
export interface OrderSearchQueryExpressionValue {
  /**
   *
   */
  readonly field: string
  /**
   *
   */
  readonly boost?: number
  /**
   *
   */
  readonly customType?: string
}
export type _OrderSearchQueryExpressionValue =
  | OrderSearchQueryExpressionValue
  | OrderSearchAnyValue
  | OrderSearchDateRangeValue
  | OrderSearchFullTextValue
  | OrderSearchLongRangeValue
  | OrderSearchNumberRangeValue
  | OrderSearchStringValue
export interface OrderSearchAnyValue extends OrderSearchQueryExpressionValue {
  /**
   *
   */
  readonly value: any
  /**
   *
   */
  readonly language?: string
  /**
   *
   */
  readonly caseInsensitive?: boolean
}
export interface OrderSearchDateRangeValue
  extends OrderSearchQueryExpressionValue {
  /**
   *
   */
  readonly gte?: string
  /**
   *
   */
  readonly lte?: string
}
export interface OrderSearchFullTextValue
  extends OrderSearchQueryExpressionValue {
  /**
   *
   */
  readonly value: string
  /**
   *
   */
  readonly language?: string
  /**
   *
   */
  readonly mustMatch?: OrderSearchMatchType
}
export interface OrderSearchLongRangeValue
  extends OrderSearchQueryExpressionValue {
  /**
   *
   */
  readonly gte?: number
  /**
   *
   */
  readonly lte?: number
}
export interface OrderSearchNumberRangeValue
  extends OrderSearchQueryExpressionValue {
  /**
   *
   */
  readonly gte?: number
  /**
   *
   */
  readonly lte?: number
}
export type OrderSearchSortMode = 'avg' | 'max' | 'min' | 'sum' | string
export type OrderSearchSortOrder = 'asc' | 'desc' | string
export interface OrderSearchStringValue
  extends OrderSearchQueryExpressionValue {
  /**
   *
   */
  readonly value: string
  /**
   *
   */
  readonly language?: string
  /**
   *
   */
  readonly caseInsensitive?: boolean
}
/**
 *	Contains information on how items are shipped to Customers, for example, a delivery note.
 *
 */
export interface Delivery {
  /**
   *	Unique identifier of the Delivery.
   *
   */
  readonly id: string
  /**
   *	User-defined unique identifier of the Delivery.
   *
   */
  readonly key?: string
  /**
   *	Date and time (UTC) the Delivery was created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Line Items or Custom Line Items that are delivered.
   *
   *
   */
  readonly items: DeliveryItem[]
  /**
   *	Information regarding the appearance, content, and shipment of a Parcel.
   *
   *
   */
  readonly parcels: Parcel[]
  /**
   *	Address to which Parcels are delivered.
   *
   *
   */
  readonly address?: Address
  /**
   *	Custom Fields of the Delivery.
   *
   *
   */
  readonly custom?: CustomFields
}
export interface DeliveryDraft {
  /**
   *	User-defined unique identifier of the Delivery.
   *
   */
  readonly key?: string
  /**
   *	Line Items or Custom Line Items to deliver.
   *	It can also be specified individually for each [Parcel](ctp:api:type:Parcel).
   *
   *
   */
  readonly items?: DeliveryItem[]
  /**
   *	Information regarding the appearance, content, and shipment of a parcel.
   *
   *
   */
  readonly parcels?: ParcelDraft[]
  /**
   *	Address to which the Parcels are delivered.
   *
   *
   */
  readonly address?: AddressDraft
  /**
   *	Custom Fields for the Delivery.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
export interface DeliveryItem {
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) or [CustomLineItem](ctp:api:type:CustomLineItem) delivered.
   *
   *
   */
  readonly id: string
  /**
   *	Number of Line Items or Custom Line Items delivered.
   *
   *
   */
  readonly quantity: number
}
export interface DiscountedLineItemPriceDraft {
  /**
   *	Draft type that stores amounts only in cent precision for the specified currency.
   *
   *
   */
  readonly value: _Money
  /**
   *
   */
  readonly includedDiscounts: DiscountedLineItemPortion[]
}
export interface ItemState {
  /**
   *	Number of Line Items or Custom Line Items in this State.
   *
   *
   */
  readonly quantity: number
  /**
   *	State of the Line Items or Custom Line Items in a custom workflow.
   *
   *
   */
  readonly state: StateReference
}
export interface LineItemImportDraft {
  /**
   *	ID of the existing product.
   *	You also need to specify the ID of the variant if this property is set or alternatively you can just specify SKU of the product variant.
   *
   */
  readonly productId?: string
  /**
   *	The product name.
   *
   */
  readonly name: LocalizedString
  /**
   *
   */
  readonly variant: ProductVariantImportDraft
  /**
   *
   */
  readonly price: PriceDraft
  /**
   *
   */
  readonly quantity: number
  /**
   *
   */
  readonly state?: ItemState[]
  /**
   *	Connection to a particular supplier.
   *	By providing supply channel information, you can uniquely identify
   *	inventory entries that should be reserved.
   *	The provided channel should have the
   *	InventorySupply role.
   *
   */
  readonly supplyChannel?: ChannelResourceIdentifier
  /**
   *	The channel is used to select a ProductPrice.
   *	The provided channel should have the ProductDistribution role.
   *
   */
  readonly distributionChannel?: ChannelResourceIdentifier
  /**
   *
   */
  readonly taxRate?: TaxRate
  /**
   *	The custom fields.
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	Inventory mode specific to the line item only, valid for the entire `quantity` of the line item.
   *	Set only if inventory mode should be different from the `inventoryMode` specified on the [OrderImportDraft](ctp:api:type:OrderImportDraft).
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export interface Order extends BaseResource {
  /**
   *	Unique identifier of the Order.
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the Order.
   *
   *
   */
  readonly version: number
  /**
   *	User-defined identifier of the Order that is unique across a Project.
   *
   *
   */
  readonly orderNumber?: string
  /**
   *	User-defined identifier of a purchase Order.
   *
   *	It is typically set by the [Buyer](ctp:api:type:Buyer) and can be used with [Quotes](/quotes-overview) to track the purchase Order during the [quote and order flow](/../api/quotes-overview#intended-workflow).
   *
   */
  readonly purchaseOrderNumber?: string
  /**
   *	`id` of the [Customer](ctp:api:type:Customer) that the Order belongs to.
   *
   *
   */
  readonly customerId?: string
  /**
   *	Email address of the Customer that the Order belongs to.
   *
   *
   */
  readonly customerEmail?: string
  /**
   *	[Reference](ctp:api:type:Reference) to the Customer Group of the Customer that the Order belongs to.
   *	Used for [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
   *
   */
  readonly customerGroup?: CustomerGroupReference
  /**
   *	[Anonymous session](ctp:api:type:AnonymousSession) associated with the Order.
   *
   *
   */
  readonly anonymousId?: string
  /**
   *	[Reference](ctp:api:type:Reference) to a Business Unit the Order belongs to.
   *
   *
   */
  readonly businessUnit?: BusinessUnitKeyReference
  /**
   *	[Reference](ctp:api:type:Reference) to a Store the Order belongs to.
   *
   *
   */
  readonly store?: StoreKeyReference
  /**
   *	[Line Items](ctp:api:type:LineItems) that are part of the Order.
   *
   *
   */
  readonly lineItems: LineItem[]
  /**
   *	[Custom Line Items](ctp:api:type:CustomLineItems) that are part of the Order.
   *
   *
   */
  readonly customLineItems: CustomLineItem[]
  /**
   *	Sum of the `totalPrice` field of all [LineItems](ctp:api:type:LineItem) and [CustomLineItems](ctp:api:type:CustomLineItem), and if available, the `price` field of [ShippingInfo](ctp:api:type:ShippingInfo).
   *	Taxes are included if [TaxRate](ctp:api:type:TaxRate) `includedInPrice` is `true` for each price.
   *
   *
   */
  readonly totalPrice: TypedMoney
  /**
   *	- For `Platform` [TaxMode](ctp:api:type:TaxMode), it is automatically set when a [shipping address is set](ctp:api:type:OrderSetShippingAddressAction).
   *	- For `External` [TaxMode](ctp:api:type:TaxMode), it is automatically set when the external Tax Rate for all Line Items, Custom Line Items, and Shipping Methods in the Cart are set.
   *
   *
   */
  readonly taxedPrice?: TaxedPrice
  /**
   *	Sum of the `taxedPrice` field of [ShippingInfo](ctp:api:type:ShippingInfo) across all Shipping Methods.
   *
   *
   */
  readonly taxedShippingPrice?: TaxedPrice
  /**
   *	Indicates how Tax Rates are set.
   *
   *
   */
  readonly taxMode?: TaxMode
  /**
   *	Indicates how monetary values are rounded when calculating taxes for `taxedPrice`.
   *
   */
  readonly taxRoundingMode?: RoundingMode
  /**
   *	Indicates how taxes are calculated when calculating taxes for `taxedPrice`.
   *
   *
   */
  readonly taxCalculationMode?: TaxCalculationMode
  /**
   *	Indicates how stock quantities are tracked for Line Items in the Order.
   *
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	Billing address associated with the Order.
   *
   *
   */
  readonly billingAddress?: Address
  /**
   *	Shipping address associated with the Order.
   *	Determines eligible [ShippingMethod](ctp:api:type:ShippingMethod) rates and Tax Rates of Line Items.
   *
   *
   */
  readonly shippingAddress?: Address
  /**
   *	Indicates whether there can be one or multiple Shipping Methods.
   *
   *
   */
  readonly shippingMode: ShippingMode
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod) for `Single` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Shipping-related information for `Single` [ShippingMode](ctp:api:type:ShippingMode).
   *	Automatically set when a [Shipping Method is set](ctp:api:type:StagedOrderSetShippingMethodAction).
   *
   *
   */
  readonly shippingInfo?: ShippingInfo
  /**
   *	Input used to select a [ShippingRatePriceTier](ctp:api:type:ShippingRatePriceTier).
   *	The data type of this field depends on the `shippingRateInputType.type` configured in the [Project](ctp:api:type:Project):
   *
   *	- If `CartClassification`, it is [ClassificationShippingRateInput](ctp:api:type:ClassificationShippingRateInput).
   *	- If `CartScore`, it is [ScoreShippingRateInput](ctp:api:type:ScoreShippingRateInput).
   *	- If `CartValue`, it cannot be used.
   *
   *
   */
  readonly shippingRateInput?: ShippingRateInput
  /**
   *	Custom Fields of the Shipping Method for `Single` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingCustomFields?: CustomFields
  /**
   *	Shipping-related information for `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *	Updated automatically each time a new [Shipping Method is added](ctp:api:type:CartAddShippingMethodAction).
   *
   *
   */
  readonly shipping: Shipping[]
  /**
   *	Additional shipping addresses of the Order as specified by [LineItems](ctp:api:type:LineItem) using the `shippingDetails` field.
   *	Eligible Shipping Methods or applicable Tax Rates are determined by the address in `shippingAddress`, and not `itemShippingAddresses`.
   *
   *
   */
  readonly itemShippingAddresses?: Address[]
  /**
   *	Discount Codes added to the Order.
   *	An Order that has `directDiscounts` cannot have `discountCodes`.
   *
   *
   */
  readonly discountCodes?: DiscountCodeInfo[]
  /**
   *	Direct Discounts added to the Order.
   *	An Order that has `discountCodes` cannot have `directDiscounts`.
   *
   *
   */
  readonly directDiscounts?: DirectDiscount[]
  /**
   *	Automatically set when a Line Item with `GiftLineItem` [LineItemMode](ctp:api:type:LineItemMode) is [removed](ctp:api:type:StagedOrderRemoveLineItemAction) from the Order.
   *
   *
   */
  readonly refusedGifts: CartDiscountReference[]
  /**
   *	Payment information related to the Order.
   *
   *
   */
  readonly paymentInfo?: PaymentInfo
  /**
   *	Used for [LineItem Price selection](ctp:api:type:LineItemPriceSelection).
   *
   */
  readonly country?: string
  /**
   *	Languages of the Order.
   *	Can only contain languages supported by the [Project](ctp:api:type:Project).
   *
   *
   */
  readonly locale?: string
  /**
   *	Indicates the origin of the Cart from which the Order was created.
   *
   *
   */
  readonly origin: CartOrigin
  /**
   *	[Reference](ctp:api:type:Reference) to the Cart for an [Order created from Cart](ctp:api:endpoint:/{projectKey}/orders:POST).
   *	The referenced Cart will have the `Ordered` [CartState](ctp:api:type:CartState).
   *
   */
  readonly cart?: CartReference
  /**
   *	[Reference](ctp:api:type:Reference) to the Quote for an [Order created from Quote](ctp:api:endpoint:/{projectKey}/orders/quotes:POST).
   *
   *
   */
  readonly quote?: QuoteReference
  /**
   *	Current status of the Order.
   *
   *
   */
  readonly orderState: OrderState
  /**
   *	Shipment status of the Order.
   *
   *
   */
  readonly shipmentState?: ShipmentState
  /**
   *	Payment status of the Order.
   *
   *
   */
  readonly paymentState?: PaymentState
  /**
   *	[State](ctp:api:type:State) of the Order.
   *	This reference can point to a State in a custom workflow.
   *
   *
   */
  readonly state?: StateReference
  /**
   *	Contains synchronization activity information of the Order (like export or import).
   *	Can only be set with [Update SyncInfo](ctp:api:type:OrderUpdateSyncInfoAction) update action.
   *
   *
   */
  readonly syncInfo: SyncInfo[]
  /**
   *	Contains information regarding the returns associated with the Order.
   *
   *
   */
  readonly returnInfo?: ReturnInfo[]
  /**
   *	Internal-only field.
   *	@deprecated
   */
  readonly lastMessageSequenceNumber?: number
  /**
   *	Custom Fields of the Order.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	User-defined date and time (UTC) of the Order.
   *	Present only on an Order created using [Order Import](ctp:api:endpoint:/{projectKey}/orders/import:POST).
   *
   *
   */
  readonly completedAt?: string
  /**
   *	Date and time (UTC) the Order was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the Order was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly createdBy?: CreatedBy
}
export type _Order = Order | StagedOrder
export interface OrderFromCartDraft {
  /**
   *	`id` of the [Cart](ctp:api:type:Cart) used to create the Order.
   *
   *	@deprecated
   */
  readonly id?: string
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to the Cart from which the Order is created.
   *
   *	This field is required, but is marked as optional for backwards compatibility reasons.
   *
   *
   */
  readonly cart?: CartResourceIdentifier
  /**
   *	`version` of the [Cart](ctp:api:type:Cart) from which the Order is created.
   *
   *
   */
  readonly version: number
  /**
   *	User-defined identifier for the Order that is unique across a Project.
   *	Once set, the value cannot be changed.
   *
   *
   */
  readonly orderNumber?: string
  /**
   *	User-defined identifier for a purchase Order.
   *
   *	It is typically set by the [Buyer](ctp:api:type:Buyer) and can be used with [Quotes](/quotes-overview) to track the purchase Order during the [quote and order flow](/../api/quotes-overview#intended-workflow).
   *
   */
  readonly purchaseOrderNumber?: string
  /**
   *	Payment status for the Order.
   *
   *
   */
  readonly paymentState?: PaymentState
  /**
   *	Shipment status for the Order.
   *
   *
   */
  readonly shipmentState?: ShipmentState
  /**
   *	Current status for the Order.
   *
   *
   */
  readonly orderState?: OrderState
  /**
   *	State for the Order in a custom workflow.
   *
   *
   */
  readonly state?: StateResourceIdentifier
  /**
   *	Custom Fields for the Order.
   *	The Custom Fields' type must match the Custom Fields' type in the referenced [Cart](ctp:api:type:Cart).
   *
   *	- If empty, the Custom Fields on the referenced [Cart](ctp:api:type:Cart) are added to the Order automatically.
   *	- If specified, the Custom Fields are merged with the Custom Fields on the referenced [Cart](ctp:api:type:Cart) and added to the Order.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
export interface OrderFromQuoteDraft {
  /**
   *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to the Quote from which the Order is created.
   *	If the referenced [Quote](ctp:api:type:Quote) has expired (`validTo` check) or its `quoteState` is `Accepted`, `Declined`, or `Withdrawn`, the Order creation will fail.
   *
   *
   */
  readonly quote: QuoteResourceIdentifier
  /**
   *	`version` of the [Quote](ctp:api:type:Quote) from which the Order is created.
   *
   *
   */
  readonly version: number
  /**
   *	If `true`, the `quoteState` of the referenced [Quote](ctp:api:type:Quote) will be set to `Accepted`.
   *
   *
   */
  readonly quoteStateToAccepted?: boolean
  /**
   *	User-defined identifier for the Order that is unique across a Project.
   *	Once set, the value cannot be changed.
   *
   *
   */
  readonly orderNumber?: string
  /**
   *	Payment status for the Order.
   *
   *
   */
  readonly paymentState?: PaymentState
  /**
   *	Shipment status for the Order.
   *
   *
   */
  readonly shipmentState?: ShipmentState
  /**
   *	Current status for the Order.
   *
   *
   */
  readonly orderState?: OrderState
  /**
   *	State of the Order in a custom workflow.
   *
   *
   */
  readonly state?: StateResourceIdentifier
}
export interface OrderImportDraft {
  /**
   *	String that unique identifies an order.
   *	It can be used to create more human-readable (in contrast to ID) identifier for the order.
   *	It should be unique within a project.
   *
   */
  readonly orderNumber?: string
  /**
   *	If given the customer with that ID must exist in the project.
   *
   */
  readonly customerId?: string
  /**
   *	The customer email can be used when no check against existing Customers is desired during order import.
   *
   */
  readonly customerEmail?: string
  /**
   *	If not given `customLineItems` must not be empty.
   *
   */
  readonly lineItems?: LineItemImportDraft[]
  /**
   *	If not given `lineItems` must not be empty.
   *
   */
  readonly customLineItems?: CustomLineItemImportDraft[]
  /**
   *
   */
  readonly totalPrice: _Money
  /**
   *	Order Import does not support calculation of taxes.
   *	When setting the draft the taxedPrice is to be provided.
   *
   */
  readonly taxedPrice?: TaxedPriceDraft
  /**
   *
   */
  readonly shippingAddress?: _BaseAddress
  /**
   *
   */
  readonly billingAddress?: _BaseAddress
  /**
   *	Set when the customer is set and the customer is a member of a customer group.
   *	Used for product variant price selection.
   *
   */
  readonly customerGroup?: CustomerGroupResourceIdentifier
  /**
   *	A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
   *	Used for product variant price selection.
   *
   */
  readonly country?: string
  /**
   *	Current status of the Order.
   *
   *
   */
  readonly orderState?: OrderState
  /**
   *	This reference can point to a state in a custom workflow.
   *
   */
  readonly state?: StateReference
  /**
   *	Shipment status of the Order.
   *
   *
   */
  readonly shipmentState?: ShipmentState
  /**
   *
   */
  readonly paymentState?: PaymentState
  /**
   *	Set if the ShippingMethod is set.
   *
   */
  readonly shippingInfo?: ShippingInfoImportDraft
  /**
   *	Payment information associated with the Order.
   *
   *
   */
  readonly paymentInfo?: PaymentInfo
  /**
   *
   */
  readonly completedAt?: string
  /**
   *	The custom fields.
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	If not given the mode `None` will be assigned by default.
   *
   */
  readonly inventoryMode?: InventoryMode
  /**
   *	If not given the tax rounding mode `HalfEven` will be assigned by default.
   *
   */
  readonly taxRoundingMode?: RoundingMode
  /**
   *	Contains addresses for orders with multiple shipping addresses.
   *
   */
  readonly itemShippingAddresses?: BaseAddress[]
  /**
   *	The Business Unit the Cart belongs to.
   *
   *
   */
  readonly businessUnit?: BusinessUnitResourceIdentifier
  /**
   *
   */
  readonly store?: StoreResourceIdentifier
  /**
   *	The default origin is `Customer`.
   *
   */
  readonly origin?: CartOrigin
}
/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Order](ctp:api:type:Order).
 *
 */
export interface OrderPagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](ctp:api:type:QueryPredicate), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	[Orders](ctp:api:type:Order) matching the query.
   *
   *
   */
  readonly results: Order[]
}
/**
 *	[Reference](ctp:api:type:Reference) to an [Order](ctp:api:type:Order).
 *
 */
export interface OrderReference {
  readonly typeId: 'order'
  /**
   *	Unique identifier of the referenced [Order](ctp:api:type:Order).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded Order. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for Orders.
   *
   *
   */
  readonly obj?: _Order
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to an [Order](ctp:api:type:Order). Either `id` or `key` is required.
 *
 */
export interface OrderResourceIdentifier {
  readonly typeId: 'order'
  /**
   *	Unique identifier of the referenced [Order](ctp:api:type:Order).
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced [Order](ctp:api:type:Order).
   *
   *
   */
  readonly key?: string
}
export interface OrderSearchQuery {}
export type _OrderSearchQuery =
  | OrderSearchQuery
  | OrderSearchCompoundExpression
  | OrderSearchQueryExpression
export interface OrderSearchCompoundExpression extends OrderSearchQuery {}
export type _OrderSearchCompoundExpression =
  | OrderSearchCompoundExpression
  | OrderSearchAndExpression
  | OrderSearchFilterExpression
  | OrderSearchNotExpression
  | OrderSearchOrExpression
export interface OrderSearchAndExpression
  extends OrderSearchCompoundExpression {
  /**
   *
   */
  readonly and: OrderSearchQuery[]
}
export interface OrderSearchFilterExpression
  extends OrderSearchCompoundExpression {
  /**
   *
   */
  readonly filter: OrderSearchQueryExpression[]
}
export interface OrderSearchNotExpression
  extends OrderSearchCompoundExpression {
  /**
   *
   */
  readonly not: OrderSearchQuery[]
}
export interface OrderSearchOrExpression extends OrderSearchCompoundExpression {
  /**
   *
   */
  readonly or: OrderSearchQuery[]
}
export interface OrderSearchQueryExpression extends OrderSearchQuery {}
export type _OrderSearchQueryExpression =
  | OrderSearchQueryExpression
  | OrderSearchDateRangeExpression
  | OrderSearchExactExpression
  | OrderSearchExistsExpression
  | OrderSearchFullTextExpression
  | OrderSearchLongRangeExpression
  | OrderSearchNumberRangeExpression
  | OrderSearchPrefixExpression
  | OrderSearchWildCardExpression
export interface OrderSearchDateRangeExpression
  extends OrderSearchQueryExpression {
  /**
   *
   */
  readonly range: OrderSearchDateRangeValue
}
export interface OrderSearchExactExpression extends OrderSearchQueryExpression {
  /**
   *
   */
  readonly exact: OrderSearchAnyValue
}
export interface OrderSearchExistsExpression
  extends OrderSearchQueryExpression {
  /**
   *
   */
  readonly exists: _OrderSearchQueryExpressionValue
}
export interface OrderSearchFullTextExpression
  extends OrderSearchQueryExpression {
  /**
   *
   */
  readonly fullText: OrderSearchFullTextValue
}
export interface OrderSearchLongRangeExpression
  extends OrderSearchQueryExpression {
  /**
   *
   */
  readonly range: OrderSearchLongRangeValue
}
export interface OrderSearchNumberRangeExpression
  extends OrderSearchQueryExpression {
  /**
   *
   */
  readonly range: OrderSearchNumberRangeValue
}
export interface OrderSearchPrefixExpression
  extends OrderSearchQueryExpression {
  /**
   *
   */
  readonly prefix: OrderSearchStringValue
}
export interface OrderSearchWildCardExpression
  extends OrderSearchQueryExpression {
  /**
   *
   */
  readonly wildcard: OrderSearchStringValue
}
export interface OrderSearchRequest {
  /**
   *	The Order search query.
   *
   */
  readonly query: _OrderSearchQuery
  /**
   *	Controls how results to your query are sorted. If not provided, the results are sorted by relevance in descending order.
   *
   */
  readonly sort?: OrderSearchSorting[]
  /**
   *	The maximum number of search results to be returned.
   *
   */
  readonly limit?: number
  /**
   *	The number of search results to be skipped in the response for pagination.
   *
   */
  readonly offset?: number
}
export interface OrderSearchSorting {
  /**
   *
   */
  readonly field: string
  /**
   *
   */
  readonly language?: string
  /**
   *
   */
  readonly order?: OrderSearchSortOrder
  /**
   *
   */
  readonly mode?: OrderSearchSortMode
  /**
   *
   */
  readonly filter?: _OrderSearchQueryExpression
}
/**
 *	Indicates the state of the Order.
 *
 */
export type OrderState =
  | 'Cancelled'
  | 'Complete'
  | 'Confirmed'
  | 'Open'
  | string
export interface OrderUpdate {
  /**
   *	Expected version of the Order on which the changes should be applied.
   *	If the expected version does not match the actual version, a [409 Conflict](/../api/errors#409-conflict) will be returned.
   *
   *
   */
  readonly version: number
  /**
   *	Update actions to be performed on the Order.
   *
   *
   */
  readonly actions: OrderUpdateAction[]
}
export type OrderUpdateAction =
  | OrderAddDeliveryAction
  | OrderAddItemShippingAddressAction
  | OrderAddParcelToDeliveryAction
  | OrderAddPaymentAction
  | OrderAddReturnInfoAction
  | OrderChangeOrderStateAction
  | OrderChangePaymentStateAction
  | OrderChangeShipmentStateAction
  | OrderImportCustomLineItemStateAction
  | OrderImportLineItemStateAction
  | OrderRemoveDeliveryAction
  | OrderRemoveItemShippingAddressAction
  | OrderRemoveParcelFromDeliveryAction
  | OrderRemovePaymentAction
  | OrderSetBillingAddressAction
  | OrderSetBillingAddressCustomFieldAction
  | OrderSetBillingAddressCustomTypeAction
  | OrderSetCustomFieldAction
  | OrderSetCustomLineItemCustomFieldAction
  | OrderSetCustomLineItemCustomTypeAction
  | OrderSetCustomLineItemShippingDetailsAction
  | OrderSetCustomTypeAction
  | OrderSetCustomerEmailAction
  | OrderSetCustomerIdAction
  | OrderSetDeliveryAddressAction
  | OrderSetDeliveryAddressCustomFieldAction
  | OrderSetDeliveryAddressCustomTypeAction
  | OrderSetDeliveryCustomFieldAction
  | OrderSetDeliveryCustomTypeAction
  | OrderSetDeliveryItemsAction
  | OrderSetItemShippingAddressCustomFieldAction
  | OrderSetItemShippingAddressCustomTypeAction
  | OrderSetLineItemCustomFieldAction
  | OrderSetLineItemCustomTypeAction
  | OrderSetLineItemShippingDetailsAction
  | OrderSetLocaleAction
  | OrderSetOrderNumberAction
  | OrderSetParcelCustomFieldAction
  | OrderSetParcelCustomTypeAction
  | OrderSetParcelItemsAction
  | OrderSetParcelMeasurementsAction
  | OrderSetParcelTrackingDataAction
  | OrderSetPurchaseOrderNumberAction
  | OrderSetReturnInfoAction
  | OrderSetReturnItemCustomFieldAction
  | OrderSetReturnItemCustomTypeAction
  | OrderSetReturnPaymentStateAction
  | OrderSetReturnShipmentStateAction
  | OrderSetShippingAddressAction
  | OrderSetShippingAddressCustomFieldAction
  | OrderSetShippingAddressCustomTypeAction
  | OrderSetStoreAction
  | OrderTransitionCustomLineItemStateAction
  | OrderTransitionLineItemStateAction
  | OrderTransitionStateAction
  | OrderUpdateItemShippingAddressAction
  | OrderUpdateSyncInfoAction
/**
 *	Information regarding the appearance, content, and shipment of a Parcel.
 *
 */
export interface Parcel {
  /**
   *	Unique identifier of the Parcel.
   *
   */
  readonly id: string
  /**
   *	User-defined unique identifier of the Parcel.
   *
   */
  readonly key?: string
  /**
   *	Date and time (UTC) the Parcel was created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Information about the dimensions of the Parcel.
   *
   *
   */
  readonly measurements?: ParcelMeasurements
  /**
   *	Shipment tracking information of the Parcel.
   *
   *
   */
  readonly trackingData?: TrackingData
  /**
   *	Line Items or Custom Line Items delivered in this Parcel.
   *
   *
   */
  readonly items?: DeliveryItem[]
  /**
   *	Custom Fields of the Parcel.
   *
   *
   */
  readonly custom?: CustomFields
}
export interface ParcelDraft {
  /**
   *	User-defined unique identifier of the Parcel.
   *
   */
  readonly key?: string
  /**
   *	Information about the dimensions for the Parcel.
   *
   *
   */
  readonly measurements?: ParcelMeasurements
  /**
   *	Shipment tracking information for the Parcel.
   *
   *
   */
  readonly trackingData?: TrackingData
  /**
   *	Line Items or Custom Line Items delivered in this Parcel.
   *
   *
   */
  readonly items?: DeliveryItem[]
  /**
   *	Custom Fields for the Parcel.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
export interface ParcelMeasurements {
  /**
   *	Height of the Parcel.
   *
   *
   */
  readonly heightInMillimeter?: number
  /**
   *	Length of the Parcel.
   *
   *
   */
  readonly lengthInMillimeter?: number
  /**
   *	Width of the Parcel.
   *
   *
   */
  readonly widthInMillimeter?: number
  /**
   *	Weight of the Parcel.
   *
   *
   */
  readonly weightInGram?: number
}
export interface PaymentInfo {
  /**
   *	[References](ctp:api:type:Reference) to the Payments associated with the Order.
   *
   *
   */
  readonly payments: PaymentReference[]
}
/**
 *	Indicates the payment status for the Order.
 *
 */
export type PaymentState =
  | 'BalanceDue'
  | 'CreditOwed'
  | 'Failed'
  | 'Paid'
  | 'Pending'
  | string
export interface ProductVariantImportDraft {
  /**
   *	The sequential ID of the variant within the product.
   *	The variant with provided ID should exist in some existing product, so you also need to specify the productId if this property is set,
   *	or alternatively you can just specify SKU of the product variant.
   *
   */
  readonly id?: number
  /**
   *	The SKU of the existing variant.
   *
   */
  readonly sku?: string
  /**
   *	The [Embedded Prices](ctp:api:type:Price) of the variant.
   *	The prices should not contain two prices for the same price scope (same currency, country, customer group, channel, valid from and valid until).
   *	If this property is defined, then it will override the `prices` property from the original product variant, otherwise `prices` property from the original product variant would be copied in the resulting order.
   *
   */
  readonly prices?: PriceDraft[]
  /**
   *	If this property is defined, then it will override the `attributes` property from the original
   *	product variant, otherwise `attributes` property from the original product variant would be copied in the resulting order.
   *
   */
  readonly attributes?: Attribute[]
  /**
   *	If this property is defined, then it will override the `images` property from the original
   *	product variant, otherwise `images` property from the original product variant would be copied in the resulting order.
   *
   */
  readonly images?: Image[]
}
/**
 *	Stores information about returns connected to an Order.
 *
 */
export interface ReturnInfo {
  /**
   *	Information on the Line Items or Custom Line Items returned.
   *
   *
   */
  readonly items: ReturnItem[]
  /**
   *	User-defined identifier to track the return.
   *
   *
   */
  readonly returnTrackingId?: string
  /**
   *	Date and time (UTC) the return is initiated.
   *
   *
   */
  readonly returnDate?: string
}
export interface ReturnInfoDraft {
  /**
   *	Information on the Line Items or Custom Line Items returned.
   *
   *
   */
  readonly items: ReturnItemDraft[]
  /**
   *	User-defined identifier for tracking the return.
   *
   *
   */
  readonly returnTrackingId?: string
  /**
   *	Date and time (UTC) the return is initiated.
   *
   *
   */
  readonly returnDate?: string
}
export type ReturnItem = CustomLineItemReturnItem | LineItemReturnItem
export interface CustomLineItemReturnItem {
  readonly type: 'CustomLineItemReturnItem'
  /**
   *	Unique identifier of the Return Item.
   *
   *
   */
  readonly id: string
  /**
   *	Number of Custom Line Items returned.
   *
   *
   */
  readonly quantity: number
  /**
   *	User-defined description for the return.
   *
   *
   */
  readonly comment?: string
  /**
   *	Shipment status of the Return Item.
   *
   *
   */
  readonly shipmentState: ReturnShipmentState
  /**
   *	Payment status of the Return Item:
   *
   *	- `NonRefundable`, for items in the `Advised` [ReturnShipmentState](ctp:api:type:ReturnShipmentState)
   *	- `Initial`, for items in the `Returned` [ReturnShipmentState](ctp:api:type:ReturnShipmentState)
   *
   *
   */
  readonly paymentState: ReturnPaymentState
  /**
   *	Custom Fields of the Return Item.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	Date and time (UTC) the Return Item was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Date and time (UTC) the Return Item was intitially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	`id` of the returned [CustomLineItem](ctp:api:type:CustomLineItem).
   *
   *
   */
  readonly customLineItemId: string
}
export interface LineItemReturnItem {
  readonly type: 'LineItemReturnItem'
  /**
   *	Unique identifier of the Return Item.
   *
   *
   */
  readonly id: string
  /**
   *	Number of Line Items returned.
   *
   *
   */
  readonly quantity: number
  /**
   *	User-defined description for the return.
   *
   *
   */
  readonly comment?: string
  /**
   *	Shipment status of the Return Item.
   *
   *
   */
  readonly shipmentState: ReturnShipmentState
  /**
   *	Payment status of the Return Item:
   *
   *	- `NonRefundable`, for items in the `Advised` [ReturnShipmentState](ctp:api:type:ReturnShipmentState)
   *	- `Initial`, for items in the `Returned` [ReturnShipmentState](ctp:api:type:ReturnShipmentState)
   *
   *
   */
  readonly paymentState: ReturnPaymentState
  /**
   *	Custom Fields of the Return Item.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	Date and time (UTC) the Return Item was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Date and time (UTC) the Return Item was intitially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	`id` of the returned [LineItem](ctp:api:type:LineItem).
   *
   *
   */
  readonly lineItemId: string
}
export interface ReturnItemDraft {
  /**
   *	Number of Line Items or Custom Line Items to return.
   *
   *
   */
  readonly quantity: number
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to return.
   *
   *	 Required if Line Items are returned, to create a [LineItemReturnItem](ctp:api:type:LineItemReturnItem).
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to return.
   *
   *	 Required if Custom Line Items are returned, to create a [CustomLineItemReturnItem](ctp:api:type:CustomLineItemReturnItem).
   *
   *
   */
  readonly customLineItemId?: string
  /**
   *	User-defined description for the return.
   *
   *
   */
  readonly comment?: string
  /**
   *	Shipment status of the item to be returned.
   *	Can either be `Advised` or `Returned` only.
   *
   *
   */
  readonly shipmentState: ReturnShipmentState
  /**
   *	Custom Fields for the Return Item.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
export type ReturnPaymentState =
  | 'Initial'
  | 'NonRefundable'
  | 'NotRefunded'
  | 'Refunded'
  | string
export type ReturnShipmentState =
  | 'Advised'
  | 'BackInStock'
  | 'Returned'
  | 'Unusable'
  | string
/**
 *	Indicates the shipment status of the Parcel.
 *
 */
export type ShipmentState =
  | 'Backorder'
  | 'Delayed'
  | 'Delivered'
  | 'Partial'
  | 'Pending'
  | 'Ready'
  | 'Shipped'
  | string
export interface ShippingInfoImportDraft {
  /**
   *
   */
  readonly shippingMethodName: string
  /**
   *
   */
  readonly price: _Money
  /**
   *	The shipping rate used to determine the price.
   *
   */
  readonly shippingRate: ShippingRateDraft
  /**
   *
   */
  readonly taxRate?: TaxRate
  /**
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	Not set if custom shipping method is used.
   *
   */
  readonly shippingMethod?: ShippingMethodResourceIdentifier
  /**
   *	Deliveries are compilations of information on how the articles are being delivered to the customers.
   *
   */
  readonly deliveries?: DeliveryDraft[]
  /**
   *
   */
  readonly discountedPrice?: DiscountedLineItemPriceDraft
  /**
   *	Indicates whether the ShippingMethod referenced is allowed for the cart or not.
   *
   */
  readonly shippingMethodState?: ShippingMethodState
}
/**
 *	Contains synchronization activity information of the Order (like export or import).
 *
 */
export interface SyncInfo {
  /**
   *	Connection to a synchronization destination.
   *
   *
   */
  readonly channel: ChannelReference
  /**
   *	Identifier of an external order instance, file, or other resource.
   *
   *
   */
  readonly externalId?: string
  /**
   *	Date and time (UTC) the information was synced.
   *
   *
   */
  readonly syncedAt: string
}
export interface TaxedItemPriceDraft {
  /**
   *	Draft type that stores amounts only in cent precision for the specified currency.
   *
   *
   */
  readonly totalNet: _Money
  /**
   *	Draft type that stores amounts only in cent precision for the specified currency.
   *
   *
   */
  readonly totalGross: _Money
}
/**
 *	Information that helps track a Parcel.
 *
 */
export interface TrackingData {
  /**
   *	Identifier to track the Parcel.
   *
   *
   */
  readonly trackingId?: string
  /**
   *	Name of the carrier that delivers the Parcel.
   *
   *
   */
  readonly carrier?: string
  /**
   *	Name of the provider that serves as facade to several carriers.
   *
   *
   */
  readonly provider?: string
  /**
   *	Transaction identifier with the `provider`.
   *
   *
   */
  readonly providerTransaction?: string
  /**
   *	- If `true`, the Parcel is being returned.
   *	- If `false`, the Parcel is being delivered to the customer.
   *
   *
   */
  readonly isReturn?: boolean
}
/**
 *	A [Delivery](ctp:api:type:Delivery) can only be added to an [Order](ctp:api:type:Order) if
 *	its `shippingInfo` (for `shippingMode` = `Single`), or its `shipping` (for `shippingMode` = `Multiple`) exists.
 *
 *	Produces the [Delivery Added](ctp:api:type:DeliveryAddedMessage) Message.
 *
 */
export interface OrderAddDeliveryAction {
  readonly action: 'addDelivery'
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *
   */
  readonly deliveryKey?: string
  /**
   *	`key` of the [ShippingMethod](ctp:api:type:ShippingMethod), required for `Multiple` [ShippingMode](ctp:api:type:ShippingMode).
   *
   *
   */
  readonly shippingKey?: string
  /**
   *	Line Items or Custom Line Items to be included in the Delivery.
   *
   *
   */
  readonly items?: DeliveryItem[]
  /**
   *	Address the `parcels` should be delivered to.
   *
   *
   */
  readonly address?: _BaseAddress
  /**
   *	Parcels of the Delivery.
   *
   *	If provided, this update action produces the [Parcel Added To Delivery](ctp:api:type:ParcelAddedToDeliveryMessage) Message.
   *
   *
   */
  readonly parcels?: ParcelDraft[]
  /**
   *	Custom Fields for the Delivery.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
/**
 *	Adds an address to an Order when shipping to multiple addresses is desired.
 *
 */
export interface OrderAddItemShippingAddressAction {
  readonly action: 'addItemShippingAddress'
  /**
   *	Address to append to `itemShippingAddresses`.
   *	The new Address must have a `key` that is unique across this Order.
   *
   *
   */
  readonly address: _BaseAddress
}
/**
 *	To add a Parcel, at least one [Delivery](ctp:api:type:Delivery) must exist.
 *
 *	Produces the [Parcel Added To Delivery](ctp:api:type:ParcelAddedToDeliveryMessage) Message.
 *
 */
export interface OrderAddParcelToDeliveryAction {
  readonly action: 'addParcelToDelivery'
  /**
   *	`id` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryId?: string
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryKey?: string
  /**
   *	`key` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *
   */
  readonly parcelKey?: string
  /**
   *	Value to set.
   *
   *
   */
  readonly measurements?: ParcelMeasurements
  /**
   *	Value to set.
   *
   *
   */
  readonly trackingData?: TrackingData
  /**
   *	Value to set.
   *
   *
   */
  readonly items?: DeliveryItem[]
}
export interface OrderAddPaymentAction {
  readonly action: 'addPayment'
  /**
   *	Payment to add to the [PaymentInfo](ctp:api:type:PaymentInfo).
   *	Must not be assigned to another Order or active Cart already.
   *
   *
   */
  readonly payment: PaymentResourceIdentifier
}
/**
 *	Produces the [Return Info Added](ctp:api:type:ReturnInfoAddedMessage) Message.
 *
 */
export interface OrderAddReturnInfoAction {
  readonly action: 'addReturnInfo'
  /**
   *	Value to set.
   *
   *
   */
  readonly returnTrackingId?: string
  /**
   *	Items to be returned.
   *	Must not be empty.
   *
   *
   */
  readonly items: ReturnItemDraft[]
  /**
   *	Value to set.
   *	If not set, it defaults to the current date and time.
   *
   *
   */
  readonly returnDate?: string
}
/**
 *	Produces the [Order State Changed](ctp:api:type:OrderStateChangedMessage) Message.
 *
 */
export interface OrderChangeOrderStateAction {
  readonly action: 'changeOrderState'
  /**
   *	New status of the Order.
   *
   *
   */
  readonly orderState: OrderState
}
/**
 *	Produces the [Order Payment State Changed](ctp:api:type:OrderPaymentStateChangedMessage) Message.
 *
 */
export interface OrderChangePaymentStateAction {
  readonly action: 'changePaymentState'
  /**
   *	New payment status of the Order.
   *
   *
   */
  readonly paymentState: PaymentState
}
/**
 *	Produces the [Order Shipment State Changed](ctp:api:type:OrderShipmentStateChangedMessage) Message.
 *
 */
export interface OrderChangeShipmentStateAction {
  readonly action: 'changeShipmentState'
  /**
   *	New shipment status of the Order.
   *
   *
   */
  readonly shipmentState: ShipmentState
}
/**
 *	The import of States does not follow any predefined rules and should be only used if no transitions are defined.
 *	The `quantity` in the [ItemStates](ctp:api:type:ItemState) must match the sum of all Custom Line Item states' quantities.
 *
 */
export interface OrderImportCustomLineItemStateAction {
  readonly action: 'importCustomLineItemState'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update.
   *
   *
   */
  readonly customLineItemId: string
  /**
   *	New status of the Custom Line Items.
   *
   *
   */
  readonly state: ItemState[]
}
/**
 *	The import of States does not follow any predefined rules and should be only used if no transitions are defined.
 *	The `quantity` in the [ItemStates](ctp:api:type:ItemState) must match the sum of all Line Items states' quantities.
 *
 */
export interface OrderImportLineItemStateAction {
  readonly action: 'importLineItemState'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update.
   *
   *
   */
  readonly lineItemId: string
  /**
   *	New status of the Line Items.
   *
   *
   */
  readonly state: ItemState[]
}
/**
 *	Produces the [DeliveryRemoved](ctp:api:type:DeliveryRemovedMessage) Message.
 *
 */
export interface OrderRemoveDeliveryAction {
  readonly action: 'removeDelivery'
  /**
   *	`id` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryId?: string
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryKey?: string
}
/**
 *	An address can only be removed if it is not referenced in any [ItemShippingTarget](ctp:api:type:ItemShippingTarget) of the Cart.
 *
 */
export interface OrderRemoveItemShippingAddressAction {
  readonly action: 'removeItemShippingAddress'
  /**
   *	`key` of the Address to remove from `itemShippingAddresses`.
   *
   *
   */
  readonly addressKey: string
}
/**
 *	Produces the [ParcelRemovedFromDelivery](ctp:api:type:ParcelRemovedFromDeliveryMessage) Message.
 *
 */
export interface OrderRemoveParcelFromDeliveryAction {
  readonly action: 'removeParcelFromDelivery'
  /**
   *	`id` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelId?: string
  /**
   *	`key` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelKey?: string
}
export interface OrderRemovePaymentAction {
  readonly action: 'removePayment'
  /**
   *	Payment to remove from the [PaymentInfo](ctp:api:type:PaymentInfo).
   *
   *
   */
  readonly payment: PaymentResourceIdentifier
}
/**
 *	This action updates the `billingAddress` on the Order, but it does not change the billing address on the referenced [Cart](ctp:api:type:Cart) from which the Order is created.
 *
 *	Produces the [Order Billing Address Set](ctp:api:type:OrderBillingAddressSetMessage) Message.
 *
 */
export interface OrderSetBillingAddressAction {
  readonly action: 'setBillingAddress'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly address?: _BaseAddress
}
export interface OrderSetBillingAddressCustomFieldAction {
  readonly action: 'setBillingAddressCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetBillingAddressCustomTypeAction {
  readonly action: 'setBillingAddressCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `billingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `billingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `billingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface OrderSetCustomFieldAction {
  readonly action: 'setCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetCustomLineItemCustomFieldAction {
  readonly action: 'setCustomLineItemCustomField'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update.
   *
   *
   */
  readonly customLineItemId: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetCustomLineItemCustomTypeAction {
  readonly action: 'setCustomLineItemCustomType'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update.
   *
   *
   */
  readonly customLineItemId: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Custom Line Item with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Custom Line Item.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Custom Line Item.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface OrderSetCustomLineItemShippingDetailsAction {
  readonly action: 'setCustomLineItemShippingDetails'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update.
   *
   *
   */
  readonly customLineItemId: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export interface OrderSetCustomTypeAction {
  readonly action: 'setCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Order with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Order.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Order.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	This action updates the `customerEmail` on the Order, but it does not change the Customer email on the [Cart](ctp:api:type:Cart) the Order has been created from.
 *
 *	Produces the [Order Customer Email Set](ctp:api:type:OrderCustomerEmailSetMessage) Message.
 *
 */
export interface OrderSetCustomerEmailAction {
  readonly action: 'setCustomerEmail'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly email?: string
}
/**
 *	Setting the Order's `customerId` does not recalculate prices or discounts on the Order.
 *	If the Customer belongs to a Customer Group, `customerGroup` on the [Order](ctp:api:type:Order) is updated automatically.
 *
 *	Produces the [OrderCustomerSet](ctp:api:type:OrderCustomerSetMessage) Message.
 *
 */
export interface OrderSetCustomerIdAction {
  readonly action: 'setCustomerId'
  /**
   *	`id` of an existing [Customer](ctp:api:type:Customer).
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly customerId?: string
}
/**
 *	Produces the [DeliveryAddressSet](ctp:api:type:DeliveryAddressSetMessage) Message.
 *
 */
export interface OrderSetDeliveryAddressAction {
  readonly action: 'setDeliveryAddress'
  /**
   *	`id` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryId?: string
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly address?: _BaseAddress
}
export interface OrderSetDeliveryAddressCustomFieldAction {
  readonly action: 'setDeliveryAddressCustomField'
  /**
   *	`id` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryId?: string
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetDeliveryAddressCustomTypeAction {
  readonly action: 'setDeliveryAddressCustomType'
  /**
   *	`id` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryId?: string
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the [Delivery](ctp:api:type:Delivery) `address` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the [Delivery](ctp:api:type:Delivery) `address`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the [Delivery](ctp:api:type:Delivery) `address`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface OrderSetDeliveryCustomFieldAction {
  readonly action: 'setDeliveryCustomField'
  /**
   *	`id` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryId?: string
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetDeliveryCustomTypeAction {
  readonly action: 'setDeliveryCustomType'
  /**
   *	`id` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryId?: string
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Delivery with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Delivery.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Delivery.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	Produces the [Delivery Items Updated](ctp:api:type:DeliveryItemsUpdatedMessage) Message.
 *
 */
export interface OrderSetDeliveryItemsAction {
  readonly action: 'setDeliveryItems'
  /**
   *	`id` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryId?: string
  /**
   *	`key` of an existing [Delivery](ctp:api:type:Delivery).
   *
   *	Either `deliveryId` or `deliveryKey` must be provided.
   *
   *
   */
  readonly deliveryKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly items: DeliveryItem[]
}
export interface OrderSetItemShippingAddressCustomFieldAction {
  readonly action: 'setItemShippingAddressCustomField'
  /**
   *	`key` of the [Address](ctp:api:type:Address) in `itemShippingAddresses`.
   *
   *
   */
  readonly addressKey: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetItemShippingAddressCustomTypeAction {
  readonly action: 'setItemShippingAddressCustomType'
  /**
   *	`key` of the [Address](ctp:api:type:Address) in `itemShippingAddresses`.
   *
   *
   */
  readonly addressKey: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `itemShippingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `itemShippingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `itemShippingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface OrderSetLineItemCustomFieldAction {
  readonly action: 'setLineItemCustomField'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetLineItemCustomTypeAction {
  readonly action: 'setLineItemCustomType'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Line Item with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Line Item.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Line Item.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface OrderSetLineItemShippingDetailsAction {
  readonly action: 'setLineItemShippingDetails'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemId?: string
  /**
   *	`key` of the [LineItem](ctp:api:type:LineItem) to update. Either `lineItemId` or `lineItemKey` is required.
   *
   *
   */
  readonly lineItemKey?: string
  /**
   *	Value to set.
   *	If empty, the existing value is removed.
   *
   *
   */
  readonly shippingDetails?: ItemShippingDetailsDraft
}
export interface OrderSetLocaleAction {
  readonly action: 'setLocale'
  /**
   *	Value to set.
   *	Must be one of the [Project](ctp:api:type:Project)'s languages.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly locale?: string
}
export interface OrderSetOrderNumberAction {
  readonly action: 'setOrderNumber'
  /**
   *	Value to set.
   *	Must be unique across a Project.
   *	Once set, the value cannot be changed.
   *
   *
   */
  readonly orderNumber?: string
}
export interface OrderSetParcelCustomFieldAction {
  readonly action: 'setParcelCustomField'
  /**
   *	`id` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelId?: string
  /**
   *	`key` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetParcelCustomTypeAction {
  readonly action: 'setParcelCustomType'
  /**
   *	`id` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelId?: string
  /**
   *	`key` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Parcel with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Parcel.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Parcel.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	Produces the [ParcelItemsUpdated](ctp:api:type:ParcelItemsUpdatedMessage) Message.
 *
 */
export interface OrderSetParcelItemsAction {
  readonly action: 'setParcelItems'
  /**
   *	`id` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelId?: string
  /**
   *	`key` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly items: DeliveryItem[]
}
/**
 *	Produces the [ParcelMeasurementsUpdated](ctp:api:type:ParcelMeasurementsUpdatedMessage) Message.
 *
 */
export interface OrderSetParcelMeasurementsAction {
  readonly action: 'setParcelMeasurements'
  /**
   *	`id` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelId?: string
  /**
   *	`key` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly measurements?: ParcelMeasurements
}
/**
 *	Produces the [ParcelTrackingDataUpdated](ctp:api:type:ParcelTrackingDataUpdatedMessage) Message.
 *
 */
export interface OrderSetParcelTrackingDataAction {
  readonly action: 'setParcelTrackingData'
  /**
   *	`id` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelId?: string
  /**
   *	`key` of an existing [Parcel](ctp:api:type:Parcel).
   *
   *	Either `parcelId` or `parcelKey` must be provided.
   *
   *
   */
  readonly parcelKey?: string
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly trackingData?: TrackingData
}
/**
 *	Produces the [PurchaseOrderNumberSet](ctp:api:type:OrderPurchaseOrderNumberSetMessage) Message.
 *
 */
export interface OrderSetPurchaseOrderNumberAction {
  readonly action: 'setPurchaseOrderNumber'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly purchaseOrderNumber?: string
}
/**
 *	Produces the [Return Info Set](ctp:api:type:ReturnInfoSetMessage) Message.
 *
 */
export interface OrderSetReturnInfoAction {
  readonly action: 'setReturnInfo'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly items?: ReturnInfoDraft[]
}
export interface OrderSetReturnItemCustomFieldAction {
  readonly action: 'setReturnItemCustomField'
  /**
   *	`id` of the [ReturnItem](ctp:api:type:ReturnItem) to update.
   *
   *
   */
  readonly returnItemId: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetReturnItemCustomTypeAction {
  readonly action: 'setReturnItemCustomType'
  /**
   *	`id` of the [ReturnItem](ctp:api:type:ReturnItem) to update.
   *
   *
   */
  readonly returnItemId: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Return Item with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Return Item.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Return Item.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	To set a [ReturnPaymentState](ctp:api:type:ReturnPaymentState), the [Order](ctp:api:type:Order) `returnInfo` must have at least one [ReturnItem](ctp:api:type:ReturnItem).
 *
 */
export interface OrderSetReturnPaymentStateAction {
  readonly action: 'setReturnPaymentState'
  /**
   *	`id` of the [ReturnItem](ctp:api:type:ReturnItem) to update.
   *
   *
   */
  readonly returnItemId: string
  /**
   *	New Payment status of the [ReturnItem](ctp:api:type:ReturnItem).
   *
   *
   */
  readonly paymentState: ReturnPaymentState
}
/**
 *	To set a `ReturnShipmentState`, the [Order](ctp:api:type:Order) `returnInfo` must have at least one [ReturnItem](ctp:api:type:ReturnItem).
 *
 *	Produces the [Order Return Shipment State Changed](ctp:api:type:OrderReturnShipmentStateChangedMessage) Message.
 *
 */
export interface OrderSetReturnShipmentStateAction {
  readonly action: 'setReturnShipmentState'
  /**
   *	`id` of the [ReturnItem](ctp:api:type:ReturnItem) to update.
   *
   *
   */
  readonly returnItemId: string
  /**
   *	New shipment state of the [ReturnItem](ctp:api:type:ReturnItem).
   *
   *
   */
  readonly shipmentState: ReturnShipmentState
}
/**
 *	This action updates the `shippingAddress` on the Order, but it does not change the shipping address on the referenced [Cart](ctp:api:type:Cart) from which the Order is created.
 *	Also, it does not recalculate the Cart as taxes may not fit to the shipping address anymore.
 *
 *	Produces the [Order Shipping Address Set](ctp:api:type:OrderShippingAddressSetMessage) Message.
 *
 */
export interface OrderSetShippingAddressAction {
  readonly action: 'setShippingAddress'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *
   */
  readonly address?: _BaseAddress
}
export interface OrderSetShippingAddressCustomFieldAction {
  readonly action: 'setShippingAddressCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface OrderSetShippingAddressCustomTypeAction {
  readonly action: 'setShippingAddressCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the `shippingAddress` with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the `shippingAddress`.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `shippingAddress`.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	Sets the [Store](ctp:api:type:Store) the Order is assigned to.
 *	It should be used to migrate Orders to a new Store.
 *	No validations are performed (such as that the Customer is allowed to create Orders in the Store).
 *
 *	Produces the [Order Store Set](ctp:api:type:OrderStoreSetMessage) Message.
 *	Returns a `400` error if `store` references the same Store the Order is currently assigned to, including if you try to remove the value when no Store is currently assigned.
 *
 */
export interface OrderSetStoreAction {
  readonly action: 'setStore'
  /**
   *	Value to set.
   *	If empty, any existing value is removed.
   *
   *	If `store` references the same Store the Order is currently assigned to or if you try to remove the value when no Store is currently assigned, a `400` error is returned.
   *
   *
   */
  readonly store?: StoreResourceIdentifier
}
/**
 *	Produces the [Custom Line Item State Transition](ctp:api:type:CustomLineItemStateTransitionMessage) Message.
 *
 */
export interface OrderTransitionCustomLineItemStateAction {
  readonly action: 'transitionCustomLineItemState'
  /**
   *	`id` of the [CustomLineItem](ctp:api:type:CustomLineItem) to update.
   *
   *
   */
  readonly customLineItemId: string
  /**
   *	Number of Custom Line Items that should transition [State](ctp:api:type:State).
   *
   *
   */
  readonly quantity: number
  /**
   *	[State](ctp:api:type:State) the Custom Line Item should transition from.
   *
   *
   */
  readonly fromState: StateResourceIdentifier
  /**
   *	[State](ctp:api:type:State) the Custom Line Item should transition to.
   *
   *
   */
  readonly toState: StateResourceIdentifier
  /**
   *	Date and time (UTC) to perform the [State](ctp:api:type:State) transition.
   *
   *
   */
  readonly actualTransitionDate?: string
}
/**
 *	Produces the [Line Item State Transition](ctp:api:type:LineItemStateTransitionMessage) Message.
 *
 */
export interface OrderTransitionLineItemStateAction {
  readonly action: 'transitionLineItemState'
  /**
   *	`id` of the [LineItem](ctp:api:type:LineItem) to update.
   *
   *
   */
  readonly lineItemId: string
  /**
   *	Number of Line Items that should transition [State](ctp:api:type:State).
   *
   *
   */
  readonly quantity: number
  /**
   *	[State](ctp:api:type:State) the Line Item should transition from.
   *
   *
   */
  readonly fromState: StateResourceIdentifier
  /**
   *	[State](ctp:api:type:State) the Line Item should transition to.
   *
   *
   */
  readonly toState: StateResourceIdentifier
  /**
   *	Date and time (UTC) to perform the [State](ctp:api:type:State) transition.
   *
   *
   */
  readonly actualTransitionDate?: string
}
/**
 *	If the existing [State](ctp:api:type:State) has set `transitions`, there must be a direct transition to the new State.
 *	If `transitions` is not set, no validation is performed.
 *
 *	This update action produces the [Order State Transition](ctp:api:type:OrderStateTransitionMessage) Message.
 *
 */
export interface OrderTransitionStateAction {
  readonly action: 'transitionState'
  /**
   *	Value to set.
   *	If there is no State yet, the new State must be an initial State.
   *
   *
   */
  readonly state: StateResourceIdentifier
  /**
   *	Set to `true` to turn off validation.
   *
   *
   */
  readonly force?: boolean
}
/**
 *	Updates an address in `itemShippingAddresses` by keeping the Address `key`.
 *
 */
export interface OrderUpdateItemShippingAddressAction {
  readonly action: 'updateItemShippingAddress'
  /**
   *	The new Address with the same `key` as the Address it will replace.
   *
   *
   */
  readonly address: _BaseAddress
}
export interface OrderUpdateSyncInfoAction {
  readonly action: 'updateSyncInfo'
  /**
   *	Set this to identify an external order instance, file, or other resource.
   *
   *
   */
  readonly externalId?: string
  /**
   *	The synchronization destination to set. Must not be empty.
   *	The referenced Channel must have the [Channel Role](ctp:api:type:ChannelRoleEnum) `OrderExport` or `OrderImport`.
   *	Otherwise this update action returns an [InvalidInput](ctp:api:type:InvalidInputError) error.
   *
   *
   */
  readonly channel: ChannelResourceIdentifier
  /**
   *	If not set, it defaults to the current date and time.
   *
   *
   */
  readonly syncedAt?: string
}
