/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { ErrorObject, ErrorResponse } from './error'
import { ProductProjection } from './product'
import {
  SearchFieldType,
  SearchSorting,
  SearchSortOrder,
  _SearchQuery,
} from './search'

export interface ProductPagedSearchResponse {
  /**
   *	Total number of results matching the query.
   *
   */
  readonly total: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Results for [facets](/../api/projects/product-search#facets) when requested.
   *
   *
   */
  readonly facets: ProductSearchFacetResult[]
  /**
   *	Search result containing the Products matching the search query.
   *
   *
   */
  readonly results: ProductSearchResult[]
}
export interface ProductSearchErrorResponse extends ErrorResponse {
  /**
   *	The HTTP status code of the response.
   *
   */
  readonly statusCode: number
  /**
   *	Describes the error.
   *
   */
  readonly message: string
  /**
   *	The errors that caused this error response.
   *
   *
   */
  readonly errors?: ErrorObject[]
}
export interface ProductSearchMatchingVariantEntry {
  /**
   *	Unique identifier of the variant.
   *
   */
  readonly id: number
  /**
   *	SKU of the matching variant.
   *
   */
  readonly sku?: string
}
export interface ProductSearchMatchingVariants {
  /**
   *	Whether the search criteria definitely matches all Variants of the returned Product, like for Product-level fields. Is always `false` for search expressions on Variant-level fields.
   *
   */
  readonly allMatched: boolean
  /**
   *	The variants matching the search criteria or empty if all matched.
   *
   */
  readonly matchedVariants: ProductSearchMatchingVariantEntry[]
}
export interface ProductSearchProjectionParams {
  /**
   *	Expands a `value` of type [Reference](ctp:api:type:Reference) in a [ProductProjection](ctp:api:type:ProductProjection).
   *	In case the referenced object does not exist, the API returns the non-expanded reference.
   *
   *
   */
  readonly expand?: string[]
  /**
   *	Set to `true` to retrieve the [staged](ctp:api:type:CurrentStaged) Product Projection
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The currency used for [Price selection](/projects/products#price-selection).
   *
   *
   */
  readonly priceCurrency?: string
  /**
   *	The country used for [Price selection](/projects/products#price-selection). Can only be used **in conjunction with** the `priceCurrency` parameter.
   *
   *
   */
  readonly priceCountry?: string
  /**
   *	`id` of an existing [CustomerGroup](ctp:api:type:CustomerGroup) used for [Price selection](ctp:api:type:ProductPriceSelection). Can only be used **in conjunction with** the `priceCurrency` parameter.
   *
   *
   */
  readonly priceCustomerGroup?: string
  /**
   *	`id` of an existing [Channel](ctp:api:type:Channel) used for [Price selection](ctp:api:type:ProductPriceSelection). Can only be used **in conjunction with** the `priceCurrency` parameter.
   *
   *
   */
  readonly priceChannel?: string
  /**
   *	Used for [locale-based projection](ctp:api:type:ProductProjectionLocales).
   *
   *
   */
  readonly localeProjection?: string[]
  /**
   *	`key` of an existing [Store](ctp:api:type:Store).
   *	If the Store has defined some languages, countries, distribution or supply Channels,
   *	they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices),
   *	and [inventory](ctp:api:type:ProductProjectionInventoryEntries).
   *	If the Store has defined [Product Selections](ctp:api:type:ProductSelection), they have no effect on the results of this query.
   *
   *
   */
  readonly storeProjection?: string
}
export interface ProductSearchRequest {
  /**
   *	The search query against [searchable Product fields](/../api/projects/product-search#searchable-product-fields).
   *
   *
   */
  readonly query?: _SearchQuery
  /**
   *	Controls how results to your query are sorted. If not provided, the results are sorted by relevance in descending order.
   *
   */
  readonly sort?: SearchSorting[]
  /**
   *	The maximum number of search results to be returned.
   *
   */
  readonly limit?: number
  /**
   *	The number of search results to be skipped in the response for pagination.
   *
   */
  readonly offset?: number
  /**
   *	The search can return Products where not all Product Variants match the search criteria. If `true`, the response will include a field called `matchingVariants` that contains the `sku` of Product Variants that match the search query. If the query does not specify any variant-level criteria, `matchingVariants` will be null signifying that all Product Variants are a match.
   *
   */
  readonly markMatchingVariants?: boolean
  /**
   *	Set this field to `{}` to get the [ProductProjection](ctp:api:type:ProductProjection) included in the [ProductSearchResult](ctp:api:type:ProductSearchResult).
   *	Include query parameters for controlling [Reference Expansion](/../api/general-concepts#reference-expansion) or [projections](/../api/projects/productProjections#projection-dimensions) according to your needs.
   *	If not set, the result does not include the Product Projection.
   *
   *
   */
  readonly productProjectionParameters?: ProductSearchProjectionParams
  /**
   *	Set this field to request [facets](/../api/projects/product-search#facets).
   *
   *
   */
  readonly facets?: ProductSearchFacetExpression[]
  /**
   *	Specify an additional filter on the result of the `query` after the API calculated `facets`.
   *	This feature assists you in implementing faceted search.
   *
   *
   */
  readonly postFilter?: _SearchQuery
}
export interface ProductSearchResult {
  /**
   *	Unique identifier of the Product.
   *
   */
  readonly id: string
  /**
   *	Contains Product Projection data for Products matching the `projection` field in the Search Products request.
   *
   */
  readonly productProjection?: ProductProjection
  /**
   *	Describes the variants that matched the search criteria.
   *
   */
  readonly matchingVariants?: ProductSearchMatchingVariants
}
export type ProductSearchFacetCountLevelEnum = 'products' | 'variants' | string
export interface ProductSearchFacetCountValue {
  /**
   *	Name of the count facet to appear in the [ProductSearchFacetResultCount](ctp:api:type:ProductSearchFacetResultCount).
   *
   */
  readonly name: string
  /**
   *	Whether the facet must consider only the Products resulting from the search (`query`) or all the Products (`all`).
   *
   */
  readonly scope?: ProductSearchFacetScopeEnum
  /**
   *	Additional filtering expression to apply to the search result before calculating the facet.
   *
   */
  readonly filter?: _SearchQuery
  /**
   *	Specify whether to count Products (`products`) or Product Variants (`variants`).
   *
   */
  readonly level?: ProductSearchFacetCountLevelEnum
}
export type ProductSearchFacetDistinctBucketSortBy = 'count' | 'key' | string
export interface ProductSearchFacetDistinctBucketSortExpression {
  /**
   *	Defines whether to sort by bucket count or key.
   *
   */
  readonly by: ProductSearchFacetDistinctBucketSortBy
  /**
   *	Defines the sorting order.
   *
   */
  readonly order: SearchSortOrder
}
export interface ProductSearchFacetDistinctValue {
  /**
   *	Name of the distinct facet to appear in the [ProductSearchFacetResultBucket](ctp:api:type:ProductSearchFacetResultBucket).
   *
   */
  readonly name: string
  /**
   *	Whether the facet must consider only the Products resulting from the search (`query`) or all the Products (`all`).
   *
   */
  readonly scope?: ProductSearchFacetScopeEnum
  /**
   *	Additional filtering expression to apply to the search result before calculating the facet.
   *
   */
  readonly filter?: _SearchQuery
  /**
   *	Specify whether to count Products (`products`) or Product Variants (`variants`).
   *
   */
  readonly level?: ProductSearchFacetCountLevelEnum
  /**
   *	The [searchable Product field](/api/projects/product-search#searchable-product-fields) to facet on.
   *
   *
   */
  readonly field: string
  /**
   *	Specify which bucket keys the facets results should include.
   *
   */
  readonly includes?: string[]
  /**
   *	Define how the buckets are sorted.
   *
   */
  readonly sort?: ProductSearchFacetDistinctBucketSortExpression
  /**
   *	Maximum number of buckets to return.
   *
   */
  readonly limit?: number
  /**
   *	String value specifying linguistic and regional preferences using the [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag), as described in [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). The format combines language, script, and region using hyphen-separated subtags. For example: `en`, `en-US`, `zh-Hans-SG`.
   *
   *
   */
  readonly language?: string
  /**
   *	If the `field` is not standard, this must be the Attribute type.
   *
   */
  readonly fieldType?: SearchFieldType
  /**
   *	Default value to use if the specified field is not present on some Products.
   *
   */
  readonly missing?: string
}
export interface ProductSearchFacetExpression {}
export type _ProductSearchFacetExpression =
  | ProductSearchFacetExpression
  | ProductSearchFacetCountExpression
  | ProductSearchFacetDistinctExpression
  | ProductSearchFacetRangesExpression
export interface ProductSearchFacetCountExpression
  extends ProductSearchFacetExpression {
  /**
   *	Definition of the count facet.
   *
   */
  readonly count: ProductSearchFacetCountValue
}
export interface ProductSearchFacetDistinctExpression
  extends ProductSearchFacetExpression {
  /**
   *	Definition of the distinct facet.
   *
   */
  readonly distinct: ProductSearchFacetDistinctValue
}
export interface ProductSearchFacetRangesExpression
  extends ProductSearchFacetExpression {
  /**
   *	Definition of the ranges facet.
   *
   */
  readonly ranges: ProductSearchFacetRangesValue
}
/**
 *	Values for `from` and `to` must be a number or [DateTime](ctp:api:type:DateTime).
 */
export interface ProductSearchFacetRangesFacetRange {
  /**
   *	Starting value of the bucket (inclusive).
   *
   */
  readonly from?: any
  /**
   *	Ending value of the bucket (non-inclusive).
   *
   */
  readonly to?: any
  /**
   *	Key to assign the bucket.
   *
   */
  readonly key?: string
}
export interface ProductSearchFacetRangesValue {
  /**
   *	Name of the ranges facet to appear in the [ProductSearchFacetResultBucket](ctp:api:type:ProductSearchFacetResultBucket).
   *
   */
  readonly name: string
  /**
   *	Whether the facet must consider only the Products resulting from the search (`query`) or all the Products (`all`).
   *
   */
  readonly scope?: ProductSearchFacetScopeEnum
  /**
   *	Additional filtering expression to apply to the search result before calculating the facet.
   *
   */
  readonly filter?: _SearchQuery
  /**
   *	Specify whether to count Products (`products`) or Product Variants (`variants`).
   *
   */
  readonly level?: ProductSearchFacetCountLevelEnum
  /**
   *	The [searchable Product field](/api/projects/product-search#searchable-product-fields) to facet on.
   *
   *
   */
  readonly field: string
  /**
   *	Define ranges for the facet.
   *
   */
  readonly ranges: ProductSearchFacetRangesFacetRange[]
  /**
   *	String value specifying linguistic and regional preferences using the [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag), as described in [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). The format combines language, script, and region using hyphen-separated subtags. For example: `en`, `en-US`, `zh-Hans-SG`.
   *
   *
   */
  readonly language?: string
  /**
   *	If the `field` is not standard, this must be the Attribute type.
   *
   */
  readonly fieldType?: SearchFieldType
}
export interface ProductSearchFacetResult {
  /**
   *	Name of the facet.
   *
   */
  readonly name: string
}
export type _ProductSearchFacetResult =
  | ProductSearchFacetResult
  | ProductSearchFacetResultBucket
  | ProductSearchFacetResultCount
/**
 *	Result of a [distinct facet](/../api/projects/product-search#distinct-facets) or a [ranges facet](/../api/projects/product-search#ranges-facets).
 *
 */
export interface ProductSearchFacetResultBucket
  extends ProductSearchFacetResult {
  /**
   *	Contains results of the facet.
   *
   */
  readonly buckets: ProductSearchFacetResultBucketEntry[]
}
export interface ProductSearchFacetResultBucketEntry {
  /**
   *	Key of the bucket.
   *
   */
  readonly key: string
  /**
   *	Number of values in the bucket.
   *
   */
  readonly count: number
}
/**
 *	Result of a [count facet](/../api/projects/product-search#count-facets).
 *
 */
export interface ProductSearchFacetResultCount
  extends ProductSearchFacetResult {
  /**
   *	Number of Products (or Product Variants) matching the query.
   *
   */
  readonly value: number
}
export type ProductSearchFacetScope = 'all' | 'query' | string
export type ProductSearchFacetScopeEnum = 'all' | 'query' | string
