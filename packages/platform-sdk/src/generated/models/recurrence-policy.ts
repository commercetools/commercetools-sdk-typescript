/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  BaseResource,
  CreatedBy,
  IReference,
  IResourceIdentifier,
  LastModifiedBy,
  LocalizedString,
} from './common'

/**
 *	Supported interval units for [Recurrence Policies](ctp:api:type:RecurrencePolicy) which are used in [Recurring Orders](ctp:api:type:RecurringOrder).
 *
 */
export enum IntervalUnitValues {
  Days = 'Days',
  Months = 'Months',
  Weeks = 'Weeks',
}

export type IntervalUnit = 'Days' | 'Months' | 'Weeks' | (string & {})
export interface RecurrencePolicy extends BaseResource {
  /**
   *	Unique identifier of the RecurrencePolicy.
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the RecurrencePolicy.
   *
   *
   */
  readonly version: number
  /**
   *	User-defined unique identifier of the RecurrencePolicy.
   *
   *
   */
  readonly key: string
  /**
   *	Name of the RecurrencePolicy.
   *
   *
   */
  readonly name?: LocalizedString
  /**
   *	Description of the RecurrencePolicy.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	Schedule of the RecurrencePolicy.
   *
   *
   */
  readonly schedule: RecurrencePolicySchedule
  /**
   *	Date and time (UTC) the RecurrencePolicy was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	IDs and references that created the RecurrencePolicy.
   *
   *
   */
  readonly createdBy?: CreatedBy
  /**
   *	Date and time (UTC) the RecurrencePolicy was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	IDs and references that last modified the RecurrencePolicy.
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
}
export interface RecurrencePolicyDraft {
  /**
   *	User-defined unique identifier for the RecurrencePolicy.
   *
   *
   */
  readonly key: string
  /**
   *	Name of the RecurrencePolicy.
   *
   *
   */
  readonly name?: LocalizedString
  /**
   *	Description of the RecurrencePolicy.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	Schedule where the recurrence is defined.
   *
   *
   */
  readonly schedule: RecurrencePolicyScheduleDraft
}
/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [RecurrencePolicy](ctp:api:type:RecurrencePolicy).
 *
 */
export interface RecurrencePolicyPagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	[RecurrencePolicies](ctp:api:type:RecurrencePolicy) matching the query.
   *
   *
   */
  readonly results: RecurrencePolicy[]
}
/**
 *	[Reference](ctp:api:type:Reference) to a [RecurrencePolicy](ctp:api:type:RecurrencePolicy).
 *
 */
export interface RecurrencePolicyReference extends IReference {
  readonly typeId: 'recurrence-policy'
  /**
   *	Unique identifier of the referenced [RecurrencePolicy](ctp:api:type:RecurrencePolicy).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded RecurrencePolicy.
   *	Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for RecurrencePolicies.
   *
   *
   */
  readonly obj?: RecurrencePolicy
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [RecurrencePolicy](ctp:api:type:RecurrencePolicy). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */
export interface RecurrencePolicyResourceIdentifier
  extends IResourceIdentifier {
  readonly typeId: 'recurrence-policy'
  /**
   *	Unique identifier of the referenced [RecurrencePolicy](ctp:api:type:RecurrencePolicy). Required if `key` is absent.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced [RecurrencePolicy](ctp:api:type:RecurrencePolicy). Required if `id` is absent.
   *
   *
   */
  readonly key?: string
}
export type RecurrencePolicySchedule = DayOfMonthSchedule | StandardSchedule
export interface IRecurrencePolicySchedule {
  /**
   *
   */
  readonly type: string
}
/**
 *	Schedule of a [Recurring Order](ctp:api:type:RecurringOrder) that occurs on a specific day of each month.
 *	This type is returned in the [RecurrencePolicy](ctp:api:type:RecurrencePolicy) for an active [Recurring Order](ctp:api:type:RecurringOrder).
 *
 */
export interface DayOfMonthSchedule extends IRecurrencePolicySchedule {
  readonly type: 'dayOfMonth'
  /**
   *	The day of the month when the [Recurring Order](ctp:api:type:RecurringOrder) is created.
   *	If the value is greater than the number of days in a given month, the order is created on the last day of the month.
   *
   *
   */
  readonly day: number
}
export type RecurrencePolicyScheduleDraft =
  | DayOfMonthScheduleDraft
  | StandardScheduleDraft
export interface IRecurrencePolicyScheduleDraft {
  /**
   *
   */
  readonly type: string
}
/**
 *	Determines the schedule for a [Recurring Order](ctp:api:type:RecurringOrder) to occur on a specific day of each month.
 *
 *	- Orders will be created even if the specified day is a weekend or holiday.
 *	- To place orders on different dates within the same month (for example, the 1st and 15th), create separate [Recurring Orders](ctp:api:type:RecurringOrder)—each with its own schedule.
 *
 */
export interface DayOfMonthScheduleDraft
  extends IRecurrencePolicyScheduleDraft {
  readonly type: 'dayOfMonth'
  /**
   *	The day of the month when the [Recurring Order](ctp:api:type:RecurringOrder) should be created.
   *	If the value is greater than the number of days in a given month, the order will be created on the last day of the month.
   *
   *
   */
  readonly day: number
}
export interface RecurrencePolicyUpdate {
  /**
   *	Expected version of the RecurrencePolicy on which the changes should be applied.
   *	If the expected version does not match the actual version, a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error will be returned.
   *
   *
   */
  readonly version: number
  /**
   *	Update actions to be performed on the RecurrencePolicy.
   *
   *
   */
  readonly actions: RecurrencePolicyUpdateAction[]
}
export type RecurrencePolicyUpdateAction =
  | RecurrencePolicySetDescriptionAction
  | RecurrencePolicySetKeyAction
  | RecurrencePolicySetNameAction
  | RecurrencePolicySetScheduleAction
export interface IRecurrencePolicyUpdateAction {
  /**
   *
   */
  readonly action: string
}
/**
 *	Schedule of a [RecurringOrder](ctp:api:type:RecurringOrder) that occurs at a fixed interval—for example, every two weeks or every month.
 *
 */
export interface StandardSchedule extends IRecurrencePolicySchedule {
  readonly type: 'standard'
  /**
   *	Number of intervals between orders.
   *
   *
   */
  readonly value: number
  /**
   *	Interval of this schedule.
   *
   *
   */
  readonly intervalUnit: IntervalUnit
}
/**
 *	Determines the schedule for a [Recurring Order](ctp:api:type:RecurringOrder) to occur at a fixed interval—for example, every two weeks or every month.
 *
 */
export interface StandardScheduleDraft extends IRecurrencePolicyScheduleDraft {
  readonly type: 'standard'
  /**
   *	Number of intervals between orders.
   *
   *
   */
  readonly value: number
  /**
   *	Interval for this schedule.
   *
   *
   */
  readonly intervalUnit: IntervalUnit
}
export interface RecurrencePolicySetDescriptionAction
  extends IRecurrencePolicyUpdateAction {
  readonly action: 'setDescription'
  /**
   *	Value to set.
   *	If empty, any existing value will be removed.
   *
   *
   */
  readonly description?: LocalizedString
}
export interface RecurrencePolicySetKeyAction
  extends IRecurrencePolicyUpdateAction {
  readonly action: 'setKey'
  /**
   *	Value to set.
   *	If empty, any existing value will be removed.
   *
   *
   */
  readonly key?: string
}
export interface RecurrencePolicySetNameAction
  extends IRecurrencePolicyUpdateAction {
  readonly action: 'setName'
  /**
   *	Value to set.
   *	If empty, any existing value will be removed.
   *
   *
   */
  readonly name?: LocalizedString
}
export interface RecurrencePolicySetScheduleAction
  extends IRecurrencePolicyUpdateAction {
  readonly action: 'setSchedule'
  /**
   *	Schedule where the recurrence is defined.
   *
   *
   */
  readonly schedule: RecurrencePolicyScheduleDraft
}
