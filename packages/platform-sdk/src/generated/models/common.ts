/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { ApprovalFlow } from './approval-flow'
import { ApprovalRule } from './approval-rule'
import {
  AssociateRole,
  AssociateRoleKeyReference,
  AssociateRoleReference,
  AssociateRoleResourceIdentifier,
} from './associate-role'
import {
  AttributeGroup,
  AttributeGroupReference,
  AttributeGroupResourceIdentifier,
} from './attribute-group'
import {
  BusinessUnit,
  BusinessUnitKeyReference,
  BusinessUnitReference,
  BusinessUnitResourceIdentifier,
} from './business-unit'
import {
  Cart,
  CartReference,
  CartResourceIdentifier,
  DirectDiscountReference,
} from './cart'
import {
  CartDiscount,
  CartDiscountReference,
  CartDiscountResourceIdentifier,
} from './cart-discount'
import {
  Category,
  CategoryReference,
  CategoryResourceIdentifier,
} from './category'
import { Channel, ChannelReference, ChannelResourceIdentifier } from './channel'
import { CustomObject, CustomObjectReference } from './custom-object'
import {
  Customer,
  CustomerEmailTokenReference,
  CustomerPasswordTokenReference,
  CustomerReference,
  CustomerResourceIdentifier,
} from './customer'
import {
  CustomerGroup,
  CustomerGroupReference,
  CustomerGroupResourceIdentifier,
} from './customer-group'
import {
  DiscountCode,
  DiscountCodeReference,
  DiscountCodeResourceIdentifier,
} from './discount-code'
import { Extension } from './extension'
import {
  InventoryEntry,
  InventoryEntryReference,
  InventoryEntryResourceIdentifier,
} from './inventory'
import { Message } from './message'
import { OrderReference, _Order } from './order'
import {
  OrderEdit,
  OrderEditReference,
  OrderEditResourceIdentifier,
} from './order-edit'
import { Payment, PaymentReference, PaymentResourceIdentifier } from './payment'
import {
  Product,
  ProductProjection,
  ProductReference,
  ProductResourceIdentifier,
} from './product'
import {
  ProductDiscount,
  ProductDiscountReference,
  ProductDiscountResourceIdentifier,
} from './product-discount'
import {
  ProductSelection,
  ProductSelectionReference,
  ProductSelectionResourceIdentifier,
} from './product-selection'
import {
  ProductTailoring,
  ProductTailoringReference,
  ProductTailoringResourceIdentifier,
} from './product-tailoring'
import {
  ProductType,
  ProductTypeReference,
  ProductTypeResourceIdentifier,
} from './product-type'
import { Quote, QuoteReference, QuoteResourceIdentifier } from './quote'
import {
  QuoteRequest,
  QuoteRequestReference,
  QuoteRequestResourceIdentifier,
} from './quote-request'
import { Review, ReviewReference, ReviewResourceIdentifier } from './review'
import {
  ShippingMethod,
  ShippingMethodReference,
  ShippingMethodResourceIdentifier,
} from './shipping-method'
import {
  ShoppingList,
  ShoppingListReference,
  ShoppingListResourceIdentifier,
} from './shopping-list'
import {
  StagedQuote,
  StagedQuoteReference,
  StagedQuoteResourceIdentifier,
} from './staged-quote'
import {
  StandalonePrice,
  StandalonePriceReference,
  StandalonePriceResourceIdentifier,
} from './standalone-price'
import { State, StateReference, StateResourceIdentifier } from './state'
import {
  Store,
  StoreKeyReference,
  StoreReference,
  StoreResourceIdentifier,
} from './store'
import { Subscription } from './subscription'
import {
  TaxCategory,
  TaxCategoryReference,
  TaxCategoryResourceIdentifier,
} from './tax-category'
import {
  CustomFields,
  CustomFieldsDraft,
  Type,
  TypeReference,
  TypeResourceIdentifier,
} from './type'
import { Zone, ZoneReference, ZoneResourceIdentifier } from './zone'

export interface PagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *
   */
  readonly results: BaseResource[]
  /**
   *
   */
  readonly meta?: any
}
export interface Update {
  /**
   *
   */
  readonly version: number
  /**
   *
   */
  readonly actions: UpdateAction[]
}
export interface UpdateAction {
  /**
   *
   */
  readonly action: string
}
export interface Asset {
  /**
   *	Unique identifier of the Asset.
   *
   *
   */
  readonly id: string
  /**
   *
   */
  readonly sources: AssetSource[]
  /**
   *	Name of the Asset.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	Description of the Asset.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	Keywords for categorizing and organizing Assets.
   *
   *
   */
  readonly tags?: string[]
  /**
   *	Custom Fields defined for the Asset.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	User-defined identifier of the Asset. It is unique per [Category](ctp:api:type:Category) or [ProductVariant](ctp:api:type:ProductVariant).
   *
   *
   */
  readonly key?: string
}
/**
 *	Dimensions of the Asset source specified by the number of pixels.
 *
 */
export interface AssetDimensions {
  /**
   *	Width of the Asset source.
   *
   *
   */
  readonly w: number
  /**
   *	Height of the Asset source.
   *
   *
   */
  readonly h: number
}
export interface AssetDraft {
  /**
   *
   */
  readonly sources: AssetSource[]
  /**
   *	Name of the Asset.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	Description of the Asset.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	Keywords for categorizing and organizing Assets.
   *
   *
   */
  readonly tags?: string[]
  /**
   *	Custom Fields defined for the Asset.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	User-defined identifier for the Asset. Must be unique per [Category](ctp:api:type:Category) or [ProductVariant](ctp:api:type:ProductVariant).
   *
   *
   */
  readonly key?: string
}
/**
 *	Representation of an [Asset](#asset) in a specific format, for example a video in a certain encoding, or an image in a certain resolution.
 *
 */
export interface AssetSource {
  /**
   *	URI of the AssetSource.
   *
   *
   */
  readonly uri: string
  /**
   *	User-defined identifier of the AssetSource. Must be unique per [Asset](ctp:api:type:Asset).
   *
   */
  readonly key?: string
  /**
   *	Width and height of the AssetSource.
   *
   *
   */
  readonly dimensions?: AssetDimensions
  /**
   *	Indicates the type of content, for example `application/pdf`.
   *
   *
   */
  readonly contentType?: string
}
/**
 *	Indicates the source and method that indirectly created or modified the resource. This is present on resources created or updated after 1 April 2024.
 */
export interface Attribution {
  /**
   *	`id` of the [API Client](ctp:api:type:ApiClient) that created or modified the resource.
   *
   *
   */
  readonly clientId?: string
  /**
   *	Method used to initiate the creation or modification of the resource.
   *
   *
   */
  readonly source: AttributionSource
}
export type AttributionSource = 'Export' | 'Import' | string
/**
 *	Polymorphic base type that represents a postal address and contact details.
 *	Depending on the read or write action, it can be either [Address](ctp:api:type:Address) or [AddressDraft](ctp:api:type:AddressDraft) that
 *	only differ in the data type for the optional `custom` field.
 *
 */
export interface BaseAddress {
  /**
   *	Unique identifier of the Address.
   *
   *	It is not recommended to set it manually since the API overwrites this ID when creating an Address for a [Customer](ctp:api:type:Customer).
   *	Use `key` instead and omit this field from the request to let the API generate the ID for the Address.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined identifier of the Address that must be unique when multiple addresses are referenced in [BusinessUnits](ctp:api:type:BusinessUnit), [Customers](ctp:api:type:Customer), and `itemShippingAddresses` (LineItem-specific addresses) of a [Cart](ctp:api:type:Cart), [Order](ctp:api:type:Order), [QuoteRequest](ctp:api:type:QuoteRequest), or [Quote](ctp:api:type:Quote).
   *
   *
   */
  readonly key?: string
  /**
   *	Name of the country.
   *
   *
   */
  readonly country: string
  /**
   *	Title of the contact, for example 'Dr.'
   *
   *
   */
  readonly title?: string
  /**
   *	Salutation of the contact, for example 'Mr.' or 'Ms.'
   *
   *
   */
  readonly salutation?: string
  /**
   *	Given name (first name) of the contact.
   *
   *
   */
  readonly firstName?: string
  /**
   *	Family name (last name) of the contact.
   *
   *
   */
  readonly lastName?: string
  /**
   *	Name of the street.
   *
   *
   */
  readonly streetName?: string
  /**
   *	Street number.
   *
   *
   */
  readonly streetNumber?: string
  /**
   *	Further information on the street address.
   *
   *
   */
  readonly additionalStreetInfo?: string
  /**
   *	Postal code.
   *
   *
   */
  readonly postalCode?: string
  /**
   *	Name of the city.
   *
   *
   */
  readonly city?: string
  /**
   *	Name of the region.
   *
   *
   */
  readonly region?: string
  /**
   *	Name of the state, for example, Colorado.
   *
   *
   */
  readonly state?: string
  /**
   *	Name of the company.
   *
   *
   */
  readonly company?: string
  /**
   *	Name of the department.
   *
   *
   */
  readonly department?: string
  /**
   *	Number or name of the building.
   *
   *
   */
  readonly building?: string
  /**
   *	Number or name of the apartment.
   *
   *
   */
  readonly apartment?: string
  /**
   *	Post office box number.
   *
   *
   */
  readonly pOBox?: string
  /**
   *	Phone number of the contact.
   *
   *
   */
  readonly phone?: string
  /**
   *	Mobile phone number of the contact.
   *
   *
   */
  readonly mobile?: string
  /**
   *	Email address of the contact.
   *
   *
   */
  readonly email?: string
  /**
   *	Fax number of the contact.
   *
   *
   */
  readonly fax?: string
  /**
   *	Further information on the Address.
   *
   *
   */
  readonly additionalAddressInfo?: string
  /**
   *	ID for the contact used in an external system.
   *
   *
   */
  readonly externalId?: string
}
export type _BaseAddress = BaseAddress | Address | AddressDraft
/**
 *	Address type returned by read methods.
 *	Optionally, the `custom` field can be present in addition to the fields of a [BaseAddress](ctp:api:type:BaseAddress).
 *
 */
export interface Address extends BaseAddress {
  /**
   *	Custom Fields defined for the Address.
   *
   */
  readonly custom?: CustomFields
}
/**
 *	Address type to be used on write methods.
 *	Optionally, use the `custom` field in addition to the fields of a [BaseAddress](ctp:api:type:BaseAddress).
 *
 */
export interface AddressDraft extends BaseAddress {
  /**
   *	Custom Fields defined for the Address.
   *
   */
  readonly custom?: CustomFieldsDraft
}
export interface BaseResource {
  /**
   *
   */
  readonly id: string
  /**
   *
   */
  readonly version: number
  /**
   *
   */
  readonly createdAt: string
  /**
   *
   */
  readonly lastModifiedAt: string
}
export type _BaseResource =
  | BaseResource
  | ApprovalFlow
  | ApprovalRule
  | AssociateRole
  | AttributeGroup
  | BusinessUnit
  | Cart
  | CartDiscount
  | Category
  | Channel
  | CustomObject
  | Customer
  | CustomerGroup
  | DiscountCode
  | Extension
  | InventoryEntry
  | Message
  | _Order
  | OrderEdit
  | Payment
  | Product
  | ProductDiscount
  | ProductProjection
  | ProductSelection
  | ProductTailoring
  | ProductType
  | Quote
  | QuoteRequest
  | Review
  | ShippingMethod
  | ShoppingList
  | StagedQuote
  | StandalonePrice
  | State
  | Store
  | Subscription
  | TaxCategory
  | Type
  | Zone
/**
 *	These objects represent information about which [API Client](/../api/projects/api-clients) created or modified a resource. For more information, see [Client Logging](/../api/general-concepts#client-logging).
 *
 */
export interface ClientLogging {
  /**
   *	`id` of the [API Client](ctp:api:type:ApiClient) which created the resource.
   *
   *
   */
  readonly clientId?: string
  /**
   *	[External user ID](/../api/general-concepts#external-user-ids) provided by `X-External-User-ID` HTTP Header.
   *
   *
   */
  readonly externalUserId?: string
  /**
   *	Indicates the [Customer](ctp:api:type:Customer) who modified the resource using a token from the [password flow](/authorization#password-flow).
   *
   *
   */
  readonly customer?: CustomerReference
  /**
   *	Indicates that the resource was modified during an [anonymous session](ctp:api:type:AnonymousSession) with the logged ID.
   *
   *
   */
  readonly anonymousId?: string
  /**
   *	Indicates the [Customer](ctp:api:type:Customer) who created or modified the resource in the context of a [Business Unit](ctp:api:type:BusinessUnit). Only present when an Associate acts on behalf of a company using the [associate endpoints](/associates-overview#on-the-associate-endpoints).
   *
   *
   */
  readonly associate?: CustomerReference
}
export type _ClientLogging = ClientLogging | CreatedBy | LastModifiedBy
/**
 *	IDs and references that created the resource. This is present on resources created after 1 February 2019 except for [events not tracked](/general-concepts#events-tracked).
 */
export interface CreatedBy extends ClientLogging {
  /**
   *	`id` of the [API Client](ctp:api:type:ApiClient) which created the resource.
   *
   *
   */
  readonly clientId?: string
  /**
   *	[External user ID](/../api/general-concepts#external-user-ids) provided by `X-External-User-ID` HTTP Header or [`external_user_id:{externalUserId}`](/../api/scopes#external_user_idexternaluserid) scope.
   *
   *
   */
  readonly externalUserId?: string
  /**
   *	Indicates the [Customer](ctp:api:type:Customer) who created the resource using a token from the [password flow](/authorization#password-flow).
   *
   *
   */
  readonly customer?: CustomerReference
  /**
   *	Indicates the [anonymous session](ctp:api:type:AnonymousSession) during which the resource was created.
   *
   *
   */
  readonly anonymousId?: string
  /**
   *	Indicates if the resource was created indirectly.
   *
   *
   */
  readonly attributedTo?: Attribution
  /**
   *	Indicates the [Customer](ctp:api:type:Customer) who created the resource in the context of a [Business Unit](ctp:api:type:BusinessUnit). Only present when an Associate acts on behalf of a company using the [associate endpoints](/associates-overview#on-the-associate-endpoints).
   *
   *
   */
  readonly associate?: CustomerReference
}
export interface DiscountedPrice {
  /**
   *	Money value of the discounted price.
   *
   *
   */
  readonly value: TypedMoney
  /**
   *	[ProductDiscount](ctp:api:type:ProductDiscount) related to the discounted price.
   *
   *
   */
  readonly discount: ProductDiscountReference
}
export interface DiscountedPriceDraft {
  /**
   *	Sets the money value for the discounted price.
   *
   *
   */
  readonly value: _Money
  /**
   *	Relates the referenced [ProductDiscount](ctp:api:type:ProductDiscount) to the discounted price.
   *
   *
   */
  readonly discount: ProductDiscountReference
}
/**
 *	GeoJSON Geometry represents a [Geometry Object](https://datatracker.ietf.org/doc/html/rfc7946#section-3.1) as defined in the GeoJSON standard.
 *
 */
export type GeoJson = GeoJsonPoint
export interface GeoJsonPoint {
  readonly type: 'Point'
  /**
   *	Longitude (stored on index `[0]`) and latitude (stored on index `[1]`) of the [Point](https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2).
   *
   *
   */
  readonly coordinates: number[]
}
export interface Image {
  /**
   *	URL of the image in its original size that must be unique within a single [ProductVariant](ctp:api:type:ProductVariant). If the Project is hosted in the China (AWS, Ningxia) Region, verify that the URL is not blocked due to firewall restrictions.
   *
   *
   */
  readonly url: string
  /**
   *	Dimensions of the original image.
   *
   *
   */
  readonly dimensions: ImageDimensions
  /**
   *	Custom label for the image.
   *
   *
   */
  readonly label?: string
}
export interface ImageDimensions {
  /**
   *	Width of the image.
   *
   */
  readonly w: number
  /**
   *	Height of the image.
   *
   */
  readonly h: number
}
/**
 *	A KeyReference represents a loose reference to another resource in the same Project identified by the resource's `key` field. If available, the `key` is immutable and mandatory. KeyReferences do not support [Reference Expansion](/general-concepts#reference-expansion).
 *
 */
export type KeyReference =
  | AssociateRoleKeyReference
  | BusinessUnitKeyReference
  | StoreKeyReference
/**
 *	IDs and references that last modified the resource. This is present on resources created or updated after 1 February 2019 except for [events not tracked](/general-concepts#events-tracked).
 */
export interface LastModifiedBy extends ClientLogging {
  /**
   *	`id` of the [API Client](ctp:api:type:ApiClient) which modified the resource.
   *
   *
   */
  readonly clientId?: string
  /**
   *	[External user ID](/../api/general-concepts#external-user-ids) provided by `X-External-User-ID` HTTP Header or [`external_user_id:{externalUserId}`](/../api/scopes#external_user_idexternaluserid) scope.
   *
   *
   */
  readonly externalUserId?: string
  /**
   *	Indicates the [Customer](ctp:api:type:Customer) who modified the resource using a token from the [password flow](/authorization#password-flow).
   *
   *
   */
  readonly customer?: CustomerReference
  /**
   *	Indicates the [anonymous session](ctp:api:type:AnonymousSession) during which the resource was modified.
   *
   *
   */
  readonly anonymousId?: string
  /**
   *	Indicates if the resource was modified indirectly.
   *
   *
   */
  readonly attributedTo?: Attribution
  /**
   *	Indicates the [Customer](ctp:api:type:Customer) who modified the resource in the context of a [Business Unit](ctp:api:type:BusinessUnit). Only present when an Associate acts on behalf of a company using the [associate endpoints](/associates-overview#on-the-associate-endpoints).
   *
   *
   */
  readonly associate?: CustomerReference
}
/**
 *	JSON object where the keys are of type [Locale](ctp:api:type:Locale), and the values are the strings used for the corresponding language.
 *
 */
export interface LocalizedString {
  [key: string]: string
}
/**
 *	Draft type that stores amounts only in cent precision for the specified currency.
 *
 */
export interface Money {
  /**
   *	Amount in the smallest indivisible unit of a currency, such as:
   *
   *	* Cents for EUR and USD, pence for GBP, or centime for CHF (5 CHF is specified as `500`).
   *	* The value in the major unit for currencies without minor units, like JPY (5 JPY is specified as `5`).
   *
   *
   */
  readonly centAmount: number
  /**
   *	Currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
}
export type _Money = Money | TypedMoney | TypedMoneyDraft
/**
 *	Determines the type of money used.
 */
export type MoneyType = 'centPrecision' | 'highPrecision' | string
/**
 *	The representation for prices embedded in [LineItems](ctp:api:type:LineItem) and in [ProductVariants](ctp:api:type:ProductVariant) when the [ProductPriceMode](ctp:api:type:ProductPriceModeEnum) is `Embedded`.
 *	For the `Standalone` ProductPriceMode refer to [StandalonePrice](ctp:api:type:StandalonePrice).
 */
export interface Price {
  /**
   *	Unique identifier of this Price.
   *
   *
   */
  readonly id: string
  /**
   *	User-defined identifier of the Price. It is unique per [ProductVariant](ctp:api:type:ProductVariant).
   *
   *
   */
  readonly key?: string
  /**
   *	Money value of this Price.
   *
   *
   */
  readonly value: TypedMoney
  /**
   *	Country for which this Price is valid.
   *
   *
   */
  readonly country?: string
  /**
   *	[CustomerGroup](ctp:api:type:CustomerGroup) for which this Price is valid.
   *
   *
   */
  readonly customerGroup?: CustomerGroupReference
  /**
   *	`ProductDistribution` [Channel](ctp:api:type:Channel) for which this Price is valid.
   *
   *
   */
  readonly channel?: ChannelReference
  /**
   *	Date and time from which this Price is valid.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Date and time until this Price is valid. Prices that are no longer valid are not automatically removed, but they can be [removed](ctp:api:type:ProductRemovePriceAction) if necessary.
   *
   *
   */
  readonly validUntil?: string
  /**
   *	Is set if a [ProductDiscount](ctp:api:type:ProductDiscount) has been applied.
   *	If set, the API uses the DiscountedPrice value for the [Line Item price selection](/../api/pricing-and-discounts-overview#line-item-price-selection).
   *	When a [relative discount](ctp:api:type:ProductDiscountValueRelative) has been applied and the fraction part of the DiscountedPrice `value` is 0.5, the `value` is rounded in favor of the customer with [half-down rounding](https://en.wikipedia.org/wiki/Rounding#Round_half_down).
   *
   *
   */
  readonly discounted?: DiscountedPrice
  /**
   *	Present if different Prices for certain [LineItem](ctp:api:type:LineItem) quantities have been specified.
   *
   *	If `discounted` is present, the tiered Price is ignored for a Product Variant.
   *
   *
   */
  readonly tiers?: PriceTier[]
  /**
   *	Custom Fields defined for the Price.
   *
   *
   */
  readonly custom?: CustomFields
}
/**
 *	The draft representation for prices to be embedded into [ProductVariantDrafts](ctp:api:type:ProductVariantDraft) when the [ProductPriceMode](ctp:api:type:ProductPriceModeEnum) is `Embedded`. For the `Standalone` ProductPriceMode use [StandalonePriceDraft](ctp:api:type:StandalonePriceDraft).
 */
export interface PriceDraft {
  /**
   *	User-defined identifier for the Price. It must be unique per [ProductVariant](ctp:api:type:ProductVariant).
   *
   *
   */
  readonly key?: string
  /**
   *	Money value of this Price.
   *
   *
   */
  readonly value: _Money
  /**
   *	Set this field if this Price is only valid for the specified country.
   *
   *
   */
  readonly country?: string
  /**
   *	Set this field if this Price is only valid for the referenced [CustomerGroup](ctp:api:type:CustomerGroup).
   *
   *
   */
  readonly customerGroup?: CustomerGroupResourceIdentifier
  /**
   *	Set this field if this Price is only valid for the referenced `ProductDistribution` [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly channel?: ChannelResourceIdentifier
  /**
   *	Set this field if this Price is only valid from the specified date and time. Must be at least 1 ms earlier than `validUntil`.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Set this field if this Price is only valid until the specified date and time. Must be at least 1 ms later than `validFrom`. Prices that are no longer valid are not automatically removed, but they can be [removed](ctp:api:type:ProductRemovePriceAction) if necessary.
   *
   *
   */
  readonly validUntil?: string
  /**
   *	Set this field to add a DiscountedPrice from an **external service**.
   *
   *	Otherwise, Composable Commerce sets this field automatically if at least one [ProductDiscount](ctp:api:type:ProductDiscount) applies.
   *	The DiscountedPrice must reference a ProductDiscount with:
   *
   *	* The `isActive` flag set to `true`.
   *	* A [ProductDiscountValue](ctp:api:type:ProductDiscountValueExternal) of type `external`.
   *	* A `predicate` that matches the [ProductVariant](ctp:api:type:ProductVariant) the Price is referenced from.
   *
   *
   */
  readonly discounted?: DiscountedPriceDraft
  /**
   *	Set this field to specify different Prices for certain [LineItem](ctp:api:type:LineItem) quantities.
   *
   *	If `discounted` is set, the tiered Price is ignored for a Product Variant.
   *
   *
   */
  readonly tiers?: PriceTierDraft[]
  /**
   *	Custom Fields for the Price.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
/**
 *	A Price tier is selected instead of the default Price when a certain quantity of the [ProductVariant](ctp:api:type:ProductVariant) is [added to a Cart](/projects/carts#add-lineitem) and ordered.
 *	_For example: the Price can be lower if more than 10 items are ordered._
 *	If no Price tier is found for the Order quantity, the base Price is used.
 *	A Price tier is applied for the entire quantity of a Product Variant put as [LineItem](/projects/carts#lineitem) in a Cart as soon as the minimum quantity for the Price tier is reached.
 *	The Price tier is applied per Line Item of the Product Variant. If, for example, the same Product Variant appears in the same Cart as several Line Items, (what can be achieved by different values of a Custom Field on the Line Items) for each Line Item the minimum quantity must be reached to get the Price tier.
 *
 */
export interface PriceTier {
  /**
   *	Minimum quantity this Price tier is valid for.
   *
   *	The minimum quantity is always greater than or equal to 2. The base Price is interpreted as valid for a minimum quantity equal to 1.
   *	A [Price](ctp:api:type:Price) or [StandalonePrice](ctp:api:type:StandalonePrice) cannot contain more than one tier with the same `minimumQuantity`.
   *
   *
   */
  readonly minimumQuantity: number
  /**
   *	Money value that applies when the `minimumQuantity` is greater than or equal to the [LineItem](ctp:api:type:LineItem) `quantity`.
   *
   *	The `currencyCode` of a Price tier is always the same as the `currencyCode` in the `value` of the related Price.
   *
   *
   */
  readonly value: TypedMoney
}
/**
 *	Specifies a Price tier that applies when the minimum quantity for the [LineItem](ctp:api:type:LineItem) of a ProductVariant with the related Price is reached in a Cart.
 *
 */
export interface PriceTierDraft {
  /**
   *	Minimum quantity this Price tier is valid for.
   *
   *	The minimum quantity is always greater than or equal to 2. The base Price is interpreted as valid for a minimum quantity equal to 1.
   *	A [Price](ctp:api:type:Price) or [StandalonePrice](ctp:api:type:StandalonePrice) cannot contain more than one tier with the same `minimumQuantity`.
   *	In the case one of the constraint is not met an [InvalidField](ctp:api:type:InvalidFieldError) is returned.
   *
   *
   */
  readonly minimumQuantity: number
  /**
   *	Money value that applies when the `minimumQuantity` is greater than or equal to the [LineItem](ctp:api:type:LineItem) `quantity`.
   *
   *	The `currencyCode` of a Price tier must be the same as the `currencyCode` in the `value` of the related Price.
   *
   *
   */
  readonly value: _Money
}
export interface QueryPrice {
  /**
   *	Unique identifier of the given Price.
   *
   *
   */
  readonly id?: string
  /**
   *	Money value of the given Price.
   *
   *
   */
  readonly value: _Money
  /**
   *	Country for which the given Price is valid.
   *
   *
   */
  readonly country?: string
  /**
   *	[CustomerGroup](ctp:api:type:CustomerGroup) for which the given Price is valid.
   *
   *
   */
  readonly customerGroup?: CustomerGroupReference
  /**
   *	`ProductDistribution` [Channel](ctp:api:type:Channel) for which the given Price is valid.
   *
   *
   */
  readonly channel?: ChannelReference
  /**
   *	Date from which the given Price is valid.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Date until which the given Price is valid.
   *
   *
   */
  readonly validUntil?: string
  /**
   *	[DiscountedPrice](ctp:api:type:DiscountedPrice) you specify for the given Price.
   *
   *
   */
  readonly discounted?: DiscountedPriceDraft
  /**
   *	Custom Fields for the Price.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	Price tier applied when the minimum quantity for the [LineItem](ctp:api:type:LineItem) of a ProductVariant with the related Price is reached in a Cart.
   *
   *	If `discounted` is specified, the tiered Price is ignored for a Product Variant.
   *
   *
   */
  readonly tiers?: PriceTierDraft[]
}
/**
 *	A Reference represents a loose reference to another resource in the same Project identified by its `id`. The `typeId` indicates the type of the referenced resource. Each resource type has its corresponding Reference type, like [ChannelReference](ctp:api:type:ChannelReference).  A referenced resource can be embedded through [Reference Expansion](/general-concepts#reference-expansion). The expanded reference is the value of an additional `obj` field then.
 *
 */
export type Reference =
  | AssociateRoleReference
  | AttributeGroupReference
  | BusinessUnitReference
  | CartDiscountReference
  | CartReference
  | CategoryReference
  | ChannelReference
  | CustomObjectReference
  | CustomerEmailTokenReference
  | CustomerGroupReference
  | CustomerPasswordTokenReference
  | CustomerReference
  | DirectDiscountReference
  | DiscountCodeReference
  | InventoryEntryReference
  | OrderEditReference
  | OrderReference
  | PaymentReference
  | ProductDiscountReference
  | ProductReference
  | ProductSelectionReference
  | ProductTailoringReference
  | ProductTypeReference
  | QuoteReference
  | QuoteRequestReference
  | ReviewReference
  | ShippingMethodReference
  | ShoppingListReference
  | StagedQuoteReference
  | StandalonePriceReference
  | StateReference
  | StoreReference
  | TaxCategoryReference
  | TypeReference
  | ZoneReference
/**
 *	Type of resource the value should reference. Supported resource type identifiers are:
 *
 */
export type ReferenceTypeId =
  | 'approval-flow'
  | 'approval-rule'
  | 'associate-role'
  | 'attribute-group'
  | 'business-unit'
  | 'cart'
  | 'cart-discount'
  | 'category'
  | 'channel'
  | 'customer'
  | 'customer-email-token'
  | 'customer-group'
  | 'customer-password-token'
  | 'direct-discount'
  | 'discount-code'
  | 'extension'
  | 'inventory-entry'
  | 'key-value-document'
  | 'order'
  | 'order-edit'
  | 'payment'
  | 'product'
  | 'product-discount'
  | 'product-price'
  | 'product-selection'
  | 'product-tailoring'
  | 'product-type'
  | 'quote'
  | 'quote-request'
  | 'review'
  | 'shipping-method'
  | 'shopping-list'
  | 'staged-quote'
  | 'standalone-price'
  | 'state'
  | 'store'
  | 'subscription'
  | 'tax-category'
  | 'type'
  | 'zone'
  | string
/**
 *	Draft type to create a [Reference](ctp:api:type:Reference) or a [KeyReference](ctp:api:type:KeyReference) to a resource. Provide either the `id` or (wherever supported) the `key` of the resource to reference, but depending on the API endpoint the response returns either a Reference or a KeyReference. For example, the field `parent` of a [CategoryDraft](ctp:api:type:CategoryDraft) takes a ResourceIdentifier for its value while the value of the corresponding field of a [Category](ctp:api:type:Category) is a Reference.
 *
 *	Each resource type has its corresponding ResourceIdentifier, like [ChannelResourceIdentifier](ctp:api:type:ChannelResourceIdentifier).
 *
 */
export type ResourceIdentifier =
  | AssociateRoleResourceIdentifier
  | AttributeGroupResourceIdentifier
  | BusinessUnitResourceIdentifier
  | CartDiscountResourceIdentifier
  | CartResourceIdentifier
  | CategoryResourceIdentifier
  | ChannelResourceIdentifier
  | CustomerGroupResourceIdentifier
  | CustomerResourceIdentifier
  | DiscountCodeResourceIdentifier
  | InventoryEntryResourceIdentifier
  | OrderEditResourceIdentifier
  | PaymentResourceIdentifier
  | ProductDiscountResourceIdentifier
  | ProductResourceIdentifier
  | ProductSelectionResourceIdentifier
  | ProductTailoringResourceIdentifier
  | ProductTypeResourceIdentifier
  | QuoteRequestResourceIdentifier
  | QuoteResourceIdentifier
  | ReviewResourceIdentifier
  | ShippingMethodResourceIdentifier
  | ShoppingListResourceIdentifier
  | StagedQuoteResourceIdentifier
  | StandalonePriceResourceIdentifier
  | StateResourceIdentifier
  | StoreResourceIdentifier
  | TaxCategoryResourceIdentifier
  | TypeResourceIdentifier
  | ZoneResourceIdentifier
/**
 *	Scoped Price is contained in a [ProductVariant](ctp:api:type:ProductVariant) which is returned in response to a
 *	[Product Projection Search](ctp:api:type:ProductProjectionSearchFilterScopedPrice) request when [Scoped Price Search](/../api/pricing-and-discounts-overview#scoped-price-search) is used.
 *
 */
export interface ScopedPrice {
  /**
   *	Platform-generated unique identifier of the Price.
   *
   *
   */
  readonly id: string
  /**
   *	Original value of the Price.
   *
   *
   */
  readonly value: TypedMoney
  /**
   *	If available, either the original price `value` or `discounted` value.
   *
   *
   */
  readonly currentValue: TypedMoney
  /**
   *	Country code of the geographic location.
   *
   *
   */
  readonly country?: string
  /**
   *	Reference to a CustomerGroup.
   *
   *
   */
  readonly customerGroup?: CustomerGroupReference
  /**
   *	Reference to a Channel.
   *
   *
   */
  readonly channel?: ChannelReference
  /**
   *	Date and time from which the Price is valid.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Date and time until which the Price is valid.
   *
   *
   */
  readonly validUntil?: string
  /**
   *	Is set when a matching [ProductDiscount](ctp:api:type:ProductDiscount) exists. If set, the [Cart](ctp:api:type:Cart) uses the discounted value for the [Cart Price calculation](ctp:api:type:CartAddLineItemAction).
   *
   *	When a [relative Product Discount](ctp:api:type:ProductDiscountValueRelative) is applied and the fractional part of the discounted Price is 0.5, the discounted Price is [rounded half down](https://en.wikipedia.org/wiki/Rounding#Round_half_down) in favor of the Customer.
   *
   *
   */
  readonly discounted?: DiscountedPrice
  /**
   *	Custom Fields for the Price.
   *
   *
   */
  readonly custom?: CustomFields
}
/**
 *	Base polymorphic read-only money type that stores currency in cent precision or high precision, that is in sub-cents.
 *
 */
export type TypedMoney = CentPrecisionMoney | HighPrecisionMoney
/**
 *	Object that stores cent amounts in a specific currency.
 *
 */
export interface CentPrecisionMoney {
  readonly type: 'centPrecision'
  /**
   *	Amount in the smallest indivisible unit of a currency, such as:
   *
   *	* Cents for EUR and USD, pence for GBP, or centime for CHF (5 CHF is specified as `500`).
   *	* The value in the major unit for currencies without minor units, like JPY (5 JPY is specified as `5`).
   *
   *
   */
  readonly centAmount: number
  /**
   *	Currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
  /**
   *	The number of default fraction digits for the given currency, like `2` for EUR or `0` for JPY.
   *
   *
   */
  readonly fractionDigits: number
}
/**
 *	Money object that stores an amount of a fraction of the smallest indivisible unit of the specified currency.
 */
export interface HighPrecisionMoney {
  readonly type: 'highPrecision'
  /**
   *	Amount in the smallest indivisible unit of a currency, such as:
   *
   *	* Cents for EUR and USD, pence for GBP, or centime for CHF (5 CHF is specified as `500`).
   *	* The value in the major unit for currencies without minor units, like JPY (5 JPY is specified as `5`).
   *
   *
   */
  readonly centAmount: number
  /**
   *	Currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
  /**
   *	Number of digits after the decimal separator, greater than the default number of fraction digits for a currency.
   *
   *
   */
  readonly fractionDigits: number
  /**
   *	Amount in 1 / (10 ^ `fractionDigits`) of a currency.
   *
   *
   */
  readonly preciseAmount: number
}
/**
 *	Base polymorphic money type containing common fields for [Money](ctp:api:type:Money) and [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft).
 *
 *	- To set money in cent precision, use [Money](ctp:api:type:Money).
 *	- To set money in high precision, use [HighPrecisionMoneyDraft](ctp:api:type:HighPrecisionMoneyDraft).
 *
 */
export type TypedMoneyDraft = CentPrecisionMoneyDraft | HighPrecisionMoneyDraft
/**
 *	This draft type is the alternative to [Money](ctp:api:type:Money).
 *
 */
export interface CentPrecisionMoneyDraft {
  readonly type: 'centPrecision'
  /**
   *	Amount in the smallest indivisible unit of a currency.
   *
   *
   */
  readonly centAmount?: number
  /**
   *	Currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
  /**
   *	This field is optional for cent precision. If provided, it must be equal to the default number of fraction digits for the specified currency.
   *
   *
   */
  readonly fractionDigits?: number
}
/**
 *	Money draft object to store an amount of a fraction of the smallest indivisible unit of the specified currency.
 */
export interface HighPrecisionMoneyDraft {
  readonly type: 'highPrecision'
  /**
   *	Amount in the smallest indivisible unit of a currency. This field is optional for high precision. If provided, it is checked for validity. Example:
   *
   *	A Price of 1.015 USD can be rounded either to 1.01 USD or 1.02 USD. If it lies outside of this range, an error message stating that centAmount must be rounded correctly will be returned.
   *
   *	If `centAmount` is not provided, the API calculates the value automatically using the default rounding mode half even.
   *
   *
   */
  readonly centAmount?: number
  /**
   *	Currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   *
   *
   */
  readonly currencyCode: string
  /**
   *	Number of fraction digits for a specified high precision money. It must be greater than the default number of fraction digits for the specified currency.
   *
   *
   */
  readonly fractionDigits: number
  /**
   *	Amount in 1 / (10 ^ `fractionDigits`) of a currency.
   *
   *
   */
  readonly preciseAmount: number
}
