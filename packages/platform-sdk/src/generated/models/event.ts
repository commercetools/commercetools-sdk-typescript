/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { EventSubscriptionResourceTypeId, EventType } from './subscription'

/**
 *	Base representation of an Event containing common fields to all [Event Types](#eventtype).
 *
 */
export interface BaseEvent {
  /**
   *	Unique identifier of the Event.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly notificationType: string
  /**
   *	The type of resource targeted by the Event.
   *
   *
   */
  readonly resourceType: EventSubscriptionResourceTypeId
  /**
   *	The type of Event that has occurred.
   *
   *
   */
  readonly type: EventType
  /**
   *	An object containing details related to the Event.
   *
   *
   */
  readonly data: any
  /**
   *	Date and time (UTC) the Event was generated.
   *
   */
  readonly createdAt: string
}
/**
 *	Base representation of an Event containing common fields to all [Event Types](#eventtype).
 *
 */
export type Event =
  | ImportContainerCreatedEvent
  | ImportContainerDeletedEvent
  | ImportOperationRejectedEvent
  | ImportUnresolvedEvent
  | ImportValidationFailedEvent
  | ImportWaitForMasterVariantEvent
export interface IEvent {
  /**
   *	Unique identifier of the Event.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly notificationType: string
  /**
   *	The type of resource targeted by the Event.
   *
   *
   */
  readonly resourceType: EventSubscriptionResourceTypeId
  /**
   *	The type of Event that has occurred.
   *
   *
   */
  readonly type: EventType
  /**
   *	Date and time (UTC) the Event was generated.
   *
   */
  readonly createdAt: string
}
/**
 *	Generated when an [Import Container](ctp:import:type:ImportContainer) is created.
 */
export interface ImportContainerCreatedEvent extends IEvent {
  readonly type: 'ImportContainerCreated'
  /**
   *	Unique identifier of the Event.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly notificationType: string
  /**
   *
   */
  readonly resourceType: EventSubscriptionResourceTypeId
  /**
   *	Date and time (UTC) the Event was generated.
   *
   */
  readonly createdAt: string
  /**
   *	An object containing details of the created Import Container.
   *
   *
   */
  readonly data: ImportContainerCreatedEventData
}
/**
 *	The `data` of the [Import Container Created Event](ctp:api:type:ImportContainerCreatedEvent).
 */
export interface ImportContainerCreatedEventData {
  /**
   *	The `key` of the created Import Container.
   *
   *
   */
  readonly key: string
  /**
   *	The `version` of the created Import Container.
   *
   *
   */
  readonly version: number
  /**
   *	Date and time (UTC) the Import Container was created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the Import Container was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
}
/**
 *	Generated when an [Import Container](ctp:import:type:ImportContainer) is deleted.
 */
export interface ImportContainerDeletedEvent extends IEvent {
  readonly type: 'ImportContainerDeleted'
  /**
   *	Unique identifier of the Event.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly notificationType: string
  /**
   *
   */
  readonly resourceType: EventSubscriptionResourceTypeId
  /**
   *	Date and time (UTC) the Event was generated.
   *
   */
  readonly createdAt: string
  /**
   *	An object containing details of the deleted Import Container.
   *
   *
   */
  readonly data: ImportContainerDeletedEventData
}
/**
 *	The `data` of the [Import Container Deleted Event](ctp:api:type:ImportContainerDeletedEvent).
 */
export interface ImportContainerDeletedEventData {
  /**
   *	The `key` of the deleted Import Container.
   *
   *
   */
  readonly key: string
  /**
   *	The `version` of the deleted Import Container.
   *
   *
   */
  readonly version: number
}
/**
 *	Generated when an [Import Operation](ctp:import:type:ImportOperation) has the `rejected` [ProcessingState](ctp:import:type:ProcessingState).
 */
export interface ImportOperationRejectedEvent extends IEvent {
  readonly type: 'ImportOperationRejected'
  /**
   *	Unique identifier of the Event.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly notificationType: string
  /**
   *
   */
  readonly resourceType: EventSubscriptionResourceTypeId
  /**
   *	Date and time (UTC) the Event was generated.
   *
   */
  readonly createdAt: string
  /**
   *	An object containing details of the Import Operation with the `rejected` state.
   *
   *
   */
  readonly data: ImportOperationRejectedEventData
}
/**
 *	The `data` of the [Import Operation Rejected Event](ctp:api:type:ImportOperationRejectedEvent).
 */
export interface ImportOperationRejectedEventData {
  /**
   *	The `id` of the Import Operation with the `rejected` state.
   *
   *
   */
  readonly id: string
}
/**
 *	Generated when an [Import Operation](ctp:import:type:ImportOperation) has the `unresolved` [ProcessingState](ctp:import:type:ProcessingState).
 */
export interface ImportUnresolvedEvent extends IEvent {
  readonly type: 'ImportUnresolved'
  /**
   *	Unique identifier of the Event.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly notificationType: string
  /**
   *
   */
  readonly resourceType: EventSubscriptionResourceTypeId
  /**
   *	Date and time (UTC) the Event was generated.
   *
   */
  readonly createdAt: string
  /**
   *	An object containing details of the Import Operation with the `unresolved` state.
   *
   *
   */
  readonly data: ImportUnresolvedEventData
}
/**
 *	The `data` of the [Import Unresolved Event](ctp:api:type:ImportUnresolvedEvent).
 */
export interface ImportUnresolvedEventData {
  /**
   *	The `id` of the Import Operation with the `unresolved` state.
   *
   *
   */
  readonly id: string
  /**
   *	The `version` of the Import Operation with the `unresolved` state.
   *
   *
   */
  readonly version: number
  /**
   *	The `key` of the Import Container.
   *
   *
   */
  readonly importContainerKey: string
}
/**
 *	Generated when an [Import Operation](ctp:import:type:ImportOperation) has the `validationFailed` [ProcessingState](ctp:import:type:ProcessingState).
 */
export interface ImportValidationFailedEvent extends IEvent {
  readonly type: 'ImportValidationFailed'
  /**
   *	Unique identifier of the Event.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly notificationType: string
  /**
   *
   */
  readonly resourceType: EventSubscriptionResourceTypeId
  /**
   *	Date and time (UTC) the Event was generated.
   *
   */
  readonly createdAt: string
  /**
   *	An object containing details of the Import Operation with the `validationFailed` state.
   *
   *
   */
  readonly data: ImportValidationFailedEventData
}
/**
 *	The `data` of the [Import Validation Failed Event](ctp:api:type:ImportValidationFailedEvent).
 */
export interface ImportValidationFailedEventData {
  /**
   *	The `id` of the Import Operation with the `validationFailed` state.
   *
   *
   */
  readonly id: string
  /**
   *	The `version` of the Import Operation with the `validationFailed` state.
   *
   *
   */
  readonly version: number
  /**
   *	The `key` of the Import Container.
   *
   *
   */
  readonly importContainerKey: string
}
/**
 *	Generated when an [Import Operation](ctp:import:type:ImportOperation) has the `waitForMasterVariant` [ProcessingState](ctp:import:type:ProcessingState).
 */
export interface ImportWaitForMasterVariantEvent extends IEvent {
  readonly type: 'ImportWaitForMasterVariant'
  /**
   *	Unique identifier of the Event.
   *
   */
  readonly id: string
  /**
   *
   */
  readonly notificationType: string
  /**
   *
   */
  readonly resourceType: EventSubscriptionResourceTypeId
  /**
   *	Date and time (UTC) the Event was generated.
   *
   */
  readonly createdAt: string
  /**
   *	An object containing details of the Import Operation with the `waitForMasterVariant` state.
   *
   *
   */
  readonly data: ImportWaitForMasterVariantEventData
}
/**
 *	The `data` of the [Import Wait For Master Variant Event](ctp:api:type:ImportWaitForMasterVariantEvent).
 */
export interface ImportWaitForMasterVariantEventData {
  /**
   *	The `id` of the Import Operation with the `waitForMasterVariant` state.
   *
   *
   */
  readonly id: string
  /**
   *	The `version` of the Import Operation with the `waitForMasterVariant` state.
   *
   *
   */
  readonly version: number
  /**
   *	The `key` of the Import Container.
   *
   *
   */
  readonly importContainerKey: string
}
