/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { BaseResource, CreatedBy, LastModifiedBy } from './common'

/**
 *	It is used to calculate the [taxPortions](/../api/projects/carts#taxedprice) field in a Cart or Order.
 */
export interface SubRate {
  /**
   *	Name of the SubRate.
   *
   *
   */
  readonly name: string
  /**
   *
   */
  readonly amount: number
}
export interface TaxCategory extends BaseResource {
  /**
   *	Unique identifier of the TaxCategory.
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the TaxCategory.
   *
   *
   */
  readonly version: number
  /**
   *	Date and time (UTC) the TaxCategory was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the TaxCategory was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly createdBy?: CreatedBy
  /**
   *	Name of the TaxCategory.
   *
   *
   */
  readonly name: string
  /**
   *	Description of the TaxCategory.
   *
   *
   */
  readonly description?: string
  /**
   *	Tax rates and subrates of states and countries. Each TaxRate in the array has a unique ID.
   *
   *
   */
  readonly rates: TaxRate[]
  /**
   *	User-defined unique identifier of the TaxCategory.
   *
   *
   */
  readonly key?: string
}
export interface TaxCategoryDraft {
  /**
   *	Name of the TaxCategory.
   *
   *
   */
  readonly name: string
  /**
   *	Description of the TaxCategory.
   *
   *
   */
  readonly description?: string
  /**
   *	Tax rates and subrates of states and countries.
   *
   *
   */
  readonly rates?: TaxRateDraft[]
  /**
   *	User-defined unique identifier for the TaxCategory.
   *
   *
   */
  readonly key?: string
}
/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [TaxCategory](ctp:api:type:TaxCategory).
 *
 */
export interface TaxCategoryPagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	[TaxCategories](ctp:api:type:TaxCategory) matching the query.
   *
   *
   */
  readonly results: TaxCategory[]
}
/**
 *	[Reference](ctp:api:type:Reference) to a [TaxCategory](ctp:api:type:TaxCategory).
 *
 */
export interface TaxCategoryReference {
  readonly typeId: 'tax-category'
  /**
   *	Unique identifier of the referenced [TaxCategory](ctp:api:type:TaxCategory).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded TaxCategory. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for TaxCategories.
   *
   *
   */
  readonly obj?: TaxCategory
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [TaxCategory](ctp:api:type:TaxCategory).
 *
 */
export interface TaxCategoryResourceIdentifier {
  readonly typeId: 'tax-category'
  /**
   *	Unique identifier of the referenced [TaxCategory](ctp:api:type:TaxCategory). Either `id` or `key` is required.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced [TaxCategory](ctp:api:type:TaxCategory). Either `id` or `key` is required.
   *
   *
   */
  readonly key?: string
}
export interface TaxCategoryUpdate {
  /**
   *	Expected version of the TaxCategory on which the changes should be applied. If the expected version does not match the actual version, a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error is returned.
   *
   *
   */
  readonly version: number
  /**
   *	Update actions to be performed on the TaxCategory.
   *
   *
   */
  readonly actions: TaxCategoryUpdateAction[]
}
export type TaxCategoryUpdateAction =
  | TaxCategoryAddTaxRateAction
  | TaxCategoryChangeNameAction
  | TaxCategoryRemoveTaxRateAction
  | TaxCategoryReplaceTaxRateAction
  | TaxCategorySetDescriptionAction
  | TaxCategorySetKeyAction
export interface TaxRate {
  /**
   *	Present if the TaxRate is part of a [TaxCategory](ctp:api:type:TaxCategory).
   *	Absent for external TaxRates in [LineItem](ctp:api:type:LineItem), [CustomLineItem](ctp:api:type:CustomLineItem), and [ShippingInfo](ctp:api:type:ShippingInfo).
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the TaxRate.
   *	Present when set using [TaxRateDraft](ctp:api:type:TaxRateDraft). Not available for external TaxRates created using [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).
   *
   *
   */
  readonly key?: string
  /**
   *	Name of the TaxRate.
   *
   *
   */
  readonly name: string
  /**
   *	Tax rate. If subrates are used, the amount must be the sum of all subrates.
   *
   *
   */
  readonly amount: number
  /**
   *	If `true`, tax is included in [Embedded Prices](ctp:api:type:Price) or [Standalone Prices](ctp:api:type:StandalonePrice), and the `taxedPrice` is present on [LineItems](ctp:api:type:LineItem). In this case, the `totalNet` price on [TaxedPrice](ctp:api:type:TaxedPrice) includes the TaxRate.
   *
   *
   */
  readonly includedInPrice: boolean
  /**
   *	Country in which the tax rate is applied in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   *
   */
  readonly country: string
  /**
   *	State within the country, such as Texas in the United States.
   *
   *
   */
  readonly state?: string
  /**
   *	Used to calculate the [taxPortions](/../api/projects/carts#taxedprice) field in a Cart or Order. It is useful if the total tax of a country (such as the US) is a combination of multiple taxes (such as state and local taxes).
   *
   *
   */
  readonly subRates?: SubRate[]
}
export interface TaxRateDraft {
  /**
   *	Name of the TaxRate.
   *
   */
  readonly name: string
  /**
   *	Tax rate.
   *	Must be supplied if no `subRates` are specified.
   *	If `subRates` are specified, this field can be omitted or it must be the sum of amounts of all `subRates`.
   *
   *
   */
  readonly amount?: number
  /**
   *	If `true`, tax is included in [Embedded Prices](ctp:api:type:Price) or [Standalone Prices](ctp:api:type:StandalonePrice), and the `taxedPrice` is present on [LineItems](ctp:api:type:LineItem). In this case, the `totalNet` price on [TaxedPrice](ctp:api:type:TaxedPrice) includes the TaxRate.
   *
   *
   */
  readonly includedInPrice: boolean
  /**
   *	Country in which the tax rate is applied in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   *
   *
   */
  readonly country: string
  /**
   *	State within the country, such as Texas in the United States.
   *
   *
   */
  readonly state?: string
  /**
   *	Used to calculate the [taxPortions](/../api/projects/carts#taxedprice) field in a Cart or Order. It is useful if the total tax of a country (such as the US) is a combination of multiple taxes (such as state and local taxes).
   *
   *
   */
  readonly subRates?: SubRate[]
  /**
   *	User-defined unique identifier of the TaxRate.
   *
   *
   */
  readonly key?: string
}
export interface TaxCategoryAddTaxRateAction {
  readonly action: 'addTaxRate'
  /**
   *	Value to append to the `rates` array.
   *
   *
   */
  readonly taxRate: TaxRateDraft
}
export interface TaxCategoryChangeNameAction {
  readonly action: 'changeName'
  /**
   *	New value to set. Must not be empty.
   *
   *
   */
  readonly name: string
}
export interface TaxCategoryRemoveTaxRateAction {
  readonly action: 'removeTaxRate'
  /**
   *	ID of the TaxRate to remove.
   *	Either `taxRateId` or `taxRateKey` is required for this update action.
   *
   *
   */
  readonly taxRateId?: string
  /**
   *	Key of the TaxRate to remove.
   *	Either `taxRateId` or `taxRateKey` is required for this update action.
   *
   *
   */
  readonly taxRateKey?: string
}
export interface TaxCategoryReplaceTaxRateAction {
  readonly action: 'replaceTaxRate'
  /**
   *	ID of the TaxRate to replace.
   *	Either `taxRateId` or `taxRateKey` is required for this update action.
   *
   *
   */
  readonly taxRateId?: string
  /**
   *	Key of the TaxRate to replace.
   *	Either `taxRateId` or `taxRateKey` is required for this update action.
   *
   *
   */
  readonly taxRateKey?: string
  /**
   *	New TaxRate to replace with.
   *
   *
   */
  readonly taxRate: TaxRateDraft
}
export interface TaxCategorySetDescriptionAction {
  readonly action: 'setDescription'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly description?: string
}
export interface TaxCategorySetKeyAction {
  readonly action: 'setKey'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly key?: string
}
