/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  BaseResource,
  CreatedBy,
  IReference,
  IResourceIdentifier,
  LastModifiedBy,
  LocalizedString,
} from './common'

export interface DiscountGroup extends BaseResource {
  /**
   *	Unique identifier of the DiscountGroup.
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the DiscountGroup.
   *
   *
   */
  readonly version: number
  /**
   *	Name of the DiscountGroup.
   *
   *
   */
  readonly name?: LocalizedString
  /**
   *	User-defined unique identifier of the DiscountGroup.
   *
   *
   */
  readonly key: string
  /**
   *	Description of the DiscountGroup.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	Value between `0` and `1` that determines the order in which the CartDiscount from the DiscountGroup is applied; a CartDiscount with a higher value is prioritized.
   *
   *	The sort order is unique among all DiscountGroups and CartDiscounts.
   *
   *
   */
  readonly sortOrder: string
  /**
   *	Date and time (UTC) the DiscountGroup was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the DiscountGroup was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	IDs and references that last modified the DiscountGroup.
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
  /**
   *	IDs and references that created the DiscountGroup.
   *
   *
   */
  readonly createdBy?: CreatedBy
}
export interface DiscountGroupDraft {
  /**
   *	Name of the DiscountGroup.
   *
   *
   */
  readonly name?: LocalizedString
  /**
   *	User-defined unique identifier for the DiscountGroup.
   *
   *
   */
  readonly key: string
  /**
   *	Description for the DiscountGroup.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	Value between `0` and `1` that determines the order in which the CartDiscount from the DiscountGroup will be applied; a CartDiscount with a higher value will be prioritized.
   *
   *	The sort order must be unique among all DiscountGroups and CartDiscounts.
   *
   *
   */
  readonly sortOrder: string
}
/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [DiscountGroup](ctp:api:type:DiscountGroup).
 *
 */
export interface DiscountGroupPagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	DiscountGroups matching the query.
   *
   *
   */
  readonly results: DiscountGroup[]
}
/**
 *	[Reference](ctp:api:type:Reference) to a [DiscountGroup](ctp:api:type:DiscountGroup).
 *
 */
export interface DiscountGroupReference extends IReference {
  readonly typeId: 'discount-group'
  /**
   *	Unique identifier of the referenced [DiscountGroup](ctp:api:type:DiscountGroup).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded DiscountGroup.
   *	Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for DiscountGroups.
   *
   *
   */
  readonly obj?: DiscountGroup
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [DiscountGroup](ctp:api:type:DiscountGroup). Either `id` or `key` is required.
 *	If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */
export interface DiscountGroupResourceIdentifier extends IResourceIdentifier {
  readonly typeId: 'discount-group'
  /**
   *	Unique identifier of the referenced [DiscountGroup](ctp:api:type:DiscountGroup).
   *	Required if `key` is absent.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced [DiscountGroup](ctp:api:type:DiscountGroup).
   *	Required if `id` is absent.
   *
   *
   */
  readonly key?: string
}
export interface DiscountGroupUpdate {
  /**
   *	Expected version of the DiscountGroup on which the changes should be applied.
   *	If the expected version does not match the actual version, a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error will be returned.
   *
   *
   */
  readonly version: number
  /**
   *	Update actions to be performed on the DiscountGroup.
   *
   *
   */
  readonly actions: DiscountGroupUpdateAction[]
}
export type DiscountGroupUpdateAction =
  | DiscountGroupSetDescriptionAction
  | DiscountGroupSetKeyAction
  | DiscountGroupSetNameAction
  | DiscountGroupSetSortOrderAction
export interface IDiscountGroupUpdateAction {
  /**
   *
   */
  readonly action: string
}
export interface DiscountGroupSetDescriptionAction
  extends IDiscountGroupUpdateAction {
  readonly action: 'setDescription'
  /**
   *	Value to set.
   *	If empty, any existing value will be removed.
   *
   *
   */
  readonly description?: LocalizedString
}
/**
 *	Setting a key generates the [DiscountGroupKeySet](ctp:api:type:DiscountGroupKeySetMessage) Message.
 *
 */
export interface DiscountGroupSetKeyAction extends IDiscountGroupUpdateAction {
  readonly action: 'setKey'
  /**
   *	New value to set.
   *
   *
   */
  readonly key: string
}
export interface DiscountGroupSetNameAction extends IDiscountGroupUpdateAction {
  readonly action: 'setName'
  /**
   *	New value to set.
   *	If empty, any existing value will be removed.
   *
   *
   */
  readonly name?: LocalizedString
}
/**
 *	Setting the sort order generates the [DiscountGroupSortOrderSet](ctp:api:type:DiscountGroupSortOrderSetMessage) Message.
 *
 */
export interface DiscountGroupSetSortOrderAction
  extends IDiscountGroupUpdateAction {
  readonly action: 'setSortOrder'
  /**
   *	New value to set (between `0` and `1`).
   *	A CartDiscount with a higher value will be prioritized.
   *
   *	The sort order must be unique among all DiscountGroups and CartDiscounts.
   *
   *
   */
  readonly sortOrder: string
}
