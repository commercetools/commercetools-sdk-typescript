/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { ProductPublishScope } from './cart'
import { CategoryReference, CategoryResourceIdentifier } from './category'
import {
  Asset,
  AssetDraft,
  AssetSource,
  BaseResource,
  CreatedBy,
  DiscountedPriceDraft,
  Image,
  LastModifiedBy,
  LocalizedString,
  Price,
  PriceDraft,
  ScopedPrice,
} from './common'
import {
  ProductTypeReference,
  ProductTypeResourceIdentifier,
} from './product-type'
import { ReviewRatingStatistics } from './review'
import { StateReference, StateResourceIdentifier } from './state'
import {
  TaxCategoryReference,
  TaxCategoryResourceIdentifier,
} from './tax-category'
import { FieldContainer, TypeResourceIdentifier } from './type'

export interface Attribute {
  /**
   *	Name of the Attribute.
   *
   *
   */
  readonly name: string
  /**
   *	The [AttributeType](ctp:api:type:AttributeType) determines the format of the Attribute `value` to be provided:
   *
   *	- For [Enum Type](ctp:api:type:AttributeEnumType) and [Localized Enum Type](ctp:api:type:AttributeLocalizedEnumType),
   *	  use the `key` of the [Plain Enum Value](ctp:api:type:AttributePlainEnumValue) or [Localized Enum Value](ctp:api:type:AttributeLocalizedEnumValue) objects,
   *	  or the complete objects as `value`.
   *	- For [Localizable Text Type](ctp:api:type:AttributeLocalizableTextType), use the [LocalizedString](ctp:api:type:LocalizedString) object as `value`.
   *	- For [Money Type](ctp:api:type:AttributeMoneyType) Attributes, use the [Money](ctp:api:type:Money) object as `value`.
   *	- For [Set Type](ctp:api:type:AttributeSetType) Attributes, use the entire `set` object  as `value`.
   *	- For [Nested Type](ctp:api:type:AttributeNestedType) Attributes, use the list of values of all Attributes of the nested Product as `value`.
   *	- For [Reference Type](ctp:api:type:AttributeReferenceType) Attributes, use the [Reference](ctp:api:type:Reference) object as `value`.
   *
   *
   */
  readonly value: any
}
/**
 *	JSON object where the key is a [Category](ctp:api:type:Category) `id` and the value is an order hint.
 *	Allows controlling the order of Products and how they appear in Categories. Products with no order hint have an order score below `0`. Order hints are non-unique.
 *	If a subset of Products have the same value for order hint in a specific category, the behavior is undetermined.
 */
export interface CategoryOrderHints {
  [key: string]: string
}
export interface FacetRange {
  /**
   *
   */
  readonly from: number
  /**
   *
   */
  readonly fromStr: string
  /**
   *
   */
  readonly to: number
  /**
   *
   */
  readonly toStr: string
  /**
   *
   */
  readonly count: number
  /**
   *
   */
  readonly productCount?: number
  /**
   *
   */
  readonly total: number
  /**
   *
   */
  readonly min: number
  /**
   *
   */
  readonly max: number
  /**
   *
   */
  readonly mean: number
}
export type FacetResult =
  | FilteredFacetResult
  | RangeFacetResult
  | TermFacetResult
export interface FacetResults {
  [key: string]: FacetResult
}
export interface FacetTerm {
  /**
   *
   */
  readonly term: any
  /**
   *
   */
  readonly count: number
  /**
   *
   */
  readonly productCount?: number
}
export type FacetTypes = 'filter' | 'range' | 'terms' | string
export interface FilteredFacetResult {
  readonly type: 'filter'
  /**
   *
   */
  readonly count: number
  /**
   *
   */
  readonly productCount?: number
}
/**
 *	An abstract sellable good with a set of Attributes defined by a Product Type.
 *	Products themselves are not sellable. Instead, they act as a parent structure for Product Variants.
 *	Each Product must have at least one Product Variant, which is called the Master Variant.
 *	A single Product representation contains the _current_ and the _staged_ representation of its product data.
 *
 */
export interface Product extends BaseResource {
  /**
   *	Unique identifier of the Product.
   *
   */
  readonly id: string
  /**
   *	Current version of the Product.
   *
   *
   */
  readonly version: number
  /**
   *	Date and time (UTC) the Product was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the Product was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly createdBy?: CreatedBy
  /**
   *	User-defined unique identifier of the Product.
   *
   *	This is different from the `key` of a [ProductVariant](ctp:api:type:ProductVariant).
   *
   *
   */
  readonly key?: string
  /**
   *	The Product Type defining the Attributes of the Product. Cannot be changed.
   *
   *
   */
  readonly productType: ProductTypeReference
  /**
   *	Contains the current and the staged representation of the product information.
   *
   *
   */
  readonly masterData: ProductCatalogData
  /**
   *	The [TaxCategory](ctp:api:type:TaxCategory) of the Product.
   *
   *
   */
  readonly taxCategory?: TaxCategoryReference
  /**
   *	[State](ctp:api:type:State) of the Product.
   *
   *
   */
  readonly state?: StateReference
  /**
   *	Review statistics of the Product.
   *
   *
   */
  readonly reviewRatingStatistics?: ReviewRatingStatistics
  /**
   *	Type of Price to be used when looking up a price for the Product.
   *
   *
   */
  readonly priceMode?: ProductPriceModeEnum
}
/**
 *	Contains the `current` and `staged` [ProductData](ctp:api:type:ProductData).
 *
 */
export interface ProductCatalogData {
  /**
   *	`true` if the Product is published.
   *
   *
   */
  readonly published: boolean
  /**
   *	Current (published) data of the Product.
   *
   *
   */
  readonly current: ProductData
  /**
   *	Staged (unpublished) data of the Product.
   *
   *
   */
  readonly staged: ProductData
  /**
   *	`true` if the `staged` data is different from the `current` data.
   *
   *
   */
  readonly hasStagedChanges: boolean
}
/**
 *	Contains all the data of a Product and its Product Variants.
 *
 */
export interface ProductData {
  /**
   *	Name of the Product.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	[Categories](ctp:api:type:Category) assigned to the Product.
   *
   *
   */
  readonly categories: CategoryReference[]
  /**
   *	Numerical values to allow ordering of Products within a specified Category.
   *
   *
   */
  readonly categoryOrderHints?: CategoryOrderHints
  /**
   *	Description of the Product.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	User-defined identifier used in a deep-link URL for the Product.
   *	Must be unique across a Project, but can be the same for Products in different [Locales](ctp:api:type:Locale).
   *	Matches the pattern `[a-zA-Z0-9_\\-]{2,256}`.
   *
   *
   */
  readonly slug: LocalizedString
  /**
   *	Title of the Product displayed in search results.
   *
   *
   */
  readonly metaTitle?: LocalizedString
  /**
   *	Description of the Product displayed in search results below the meta title.
   *
   *
   */
  readonly metaDescription?: LocalizedString
  /**
   *	Keywords that give additional information about the Product to search engines.
   *
   *
   */
  readonly metaKeywords?: LocalizedString
  /**
   *	The Master Variant of the Product.
   *
   *
   */
  readonly masterVariant: ProductVariant
  /**
   *	Additional Product Variants.
   *
   *
   */
  readonly variants: ProductVariant[]
  /**
   *	Used by [Product Suggestions](ctp:api:type:ProductSuggestions), but is also considered for a full text search.
   *
   *
   */
  readonly searchKeywords: SearchKeywords
}
export interface ProductDraft {
  /**
   *	The Product Type defining the Attributes for the Product. Cannot be changed later.
   *
   *
   */
  readonly productType: ProductTypeResourceIdentifier
  /**
   *	Name of the Product.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	User-defined identifier used in a deep-link URL for the Product.
   *	It must be unique across a Project, but a Product can have the same slug in different [Locales](ctp:api:type:Locale).
   *	It must match the pattern `[a-zA-Z0-9_\\-]{2,256}`.
   *
   *
   */
  readonly slug: LocalizedString
  /**
   *	User-defined unique identifier for the Product.
   *
   *
   */
  readonly key?: string
  /**
   *	Description of the Product.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	Categories assigned to the Product.
   *
   *
   */
  readonly categories?: CategoryResourceIdentifier[]
  /**
   *	Numerical values to allow ordering of Products within a specified Category.
   *
   *
   */
  readonly categoryOrderHints?: CategoryOrderHints
  /**
   *	Title of the Product displayed in search results.
   *
   *
   */
  readonly metaTitle?: LocalizedString
  /**
   *	Description of the Product displayed in search results.
   *
   *
   */
  readonly metaDescription?: LocalizedString
  /**
   *	Keywords that give additional information about the Product to search engines.
   *
   *
   */
  readonly metaKeywords?: LocalizedString
  /**
   *	The Product Variant to be the Master Variant for the Product. Required if `variants` are provided also.
   *
   *
   */
  readonly masterVariant?: ProductVariantDraft
  /**
   *	The additional Product Variants for the Product.
   *
   *
   */
  readonly variants?: ProductVariantDraft[]
  /**
   *	The Tax Category to be assigned to the Product.
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
  /**
   *	Used by [Product Suggestions](ctp:api:type:ProductSuggestions), but is also considered for a [full text search](/projects/products-search#full-text-search).
   *
   *
   */
  readonly searchKeywords?: SearchKeywords
  /**
   *	State to be assigned to the Product.
   *
   *
   */
  readonly state?: StateResourceIdentifier
  /**
   *	If `true`, the Product is published immediately to the current projection.
   *
   *
   */
  readonly publish?: boolean
  /**
   *	Specifies the type of prices used when looking up a price for the Product.
   *
   *
   */
  readonly priceMode?: ProductPriceModeEnum
}
/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Product](ctp:api:type:Product).
 *
 */
export interface ProductPagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](ctp:api:type:QueryPredicate), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	[Products](ctp:api:type:Product) matching the query.
   *
   *
   */
  readonly results: Product[]
}
/**
 *	This mode determines the type of Prices used for [Product Price Selection](ctp:api:type:ProductPriceSelection) as well as for [LineItem Price selection](ctp:api:type:CartLineItemPriceSelection).
 *
 */
export type ProductPriceModeEnum = 'Embedded' | 'Standalone' | string
export interface ProductProjection extends BaseResource {
  /**
   *	Unique identifier of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly version: number
  /**
   *	User-defined unique identifier of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly key?: string
  /**
   *	Date and time (UTC) the ProductProjection was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the ProductProjection was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	The [ProductType](ctp:api:type:ProductType) defining the Attributes of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly productType: ProductTypeReference
  /**
   *	Name of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	Description of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	User-defined identifier used in a deep-link URL for the [Product](ctp:api:type:Product).
   *	Must be unique across a Project, but can be the same for Products in different locales.
   *	Matches the pattern `[a-zA-Z0-9_\-]{2,256}`.
   *	For [good performance](/../api/predicates/query#performance-considerations), indexes are provided for the first 15 `languages` set in the [Project](ctp:api:type:Project).
   *
   *
   */
  readonly slug: LocalizedString
  /**
   *	[Categories](ctp:api:type:Category) assigned to the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly categories: CategoryReference[]
  /**
   *	Order of [Product](ctp:api:type:Product) in [Categories](ctp:api:type:Category).
   *
   *
   */
  readonly categoryOrderHints?: CategoryOrderHints
  /**
   *	Title of the [Product](ctp:api:type:Product) displayed in search results.
   *
   *
   */
  readonly metaTitle?: LocalizedString
  /**
   *	Description of the [Product](ctp:api:type:Product) displayed in search results below the meta title.
   *
   *
   */
  readonly metaDescription?: LocalizedString
  /**
   *	Keywords that give additional information about the [Product](ctp:api:type:Product) to search engines.
   *
   *
   */
  readonly metaKeywords?: LocalizedString
  /**
   *	Used by [Product Suggestions](/../api/projects/products-suggestions), but is also considered for a [full text search](ctp:api:type:FullTextSearch).
   *
   *
   */
  readonly searchKeywords?: SearchKeywords
  /**
   *	`true` if the staged data is different from the current data.
   *
   *
   */
  readonly hasStagedChanges?: boolean
  /**
   *	`true` if the [Product](ctp:api:type:Product) is [published](ctp:api:type:CurrentStaged).
   *
   *
   */
  readonly published?: boolean
  /**
   *	The Master Variant of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly masterVariant: ProductVariant
  /**
   *	Additional Product Variants.
   *
   *
   */
  readonly variants: ProductVariant[]
  /**
   *	The [TaxCategory](ctp:api:type:TaxCategory) of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly taxCategory?: TaxCategoryReference
  /**
   *	[State](ctp:api:type:State) of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly state?: StateReference
  /**
   *	Review statistics of the [Product](ctp:api:type:Product).
   *
   *
   */
  readonly reviewRatingStatistics?: ReviewRatingStatistics
  /**
   *	Indicates whether the Prices of the Product Projection are [embedded](ctp:api:type:Price) or [standalone](ctp:api:type:StandalonePrice). [Projecting Prices](#prices) only works with `Embedded`, there is currently no support for `Standalone`.
   *
   *
   */
  readonly priceMode?: ProductPriceModeEnum
}
export interface ProductProjectionPagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	[ProductProjections](ctp:api:type:ProductProjection) matching the query.
   *
   *
   */
  readonly results: ProductProjection[]
}
export interface ProductProjectionPagedSearchResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *
   */
  readonly count: number
  /**
   *
   */
  readonly total?: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *
   */
  readonly results: ProductProjection[]
  /**
   *
   */
  readonly facets: FacetResults
}
/**
 *	[Reference](ctp:api:type:Reference) to a [Product](ctp:api:type:Product).
 *
 */
export interface ProductReference {
  readonly typeId: 'product'
  /**
   *	Unique identifier of the referenced [Product](ctp:api:type:Product).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded Product. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for Products.
   *
   *
   */
  readonly obj?: Product
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Product](ctp:api:type:Product). Either `id` or `key` is required.
 *
 */
export interface ProductResourceIdentifier {
  readonly typeId: 'product'
  /**
   *	Unique identifier of the referenced [Product](ctp:api:type:Product).
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced [Product](ctp:api:type:Product).
   *
   *
   */
  readonly key?: string
}
export interface ProductUpdate {
  /**
   *	Expected version of the Product on which the changes should be applied. If the expected version does not match the actual version, a [409 Conflict](/../api/errors#409-conflict) will be returned.
   *
   *
   */
  readonly version: number
  /**
   *	Update actions to be performed on the Product.
   *
   *
   */
  readonly actions: ProductUpdateAction[]
}
export type ProductUpdateAction =
  | ProductAddAssetAction
  | ProductAddExternalImageAction
  | ProductAddPriceAction
  | ProductAddToCategoryAction
  | ProductAddVariantAction
  | ProductChangeAssetNameAction
  | ProductChangeAssetOrderAction
  | ProductChangeMasterVariantAction
  | ProductChangeNameAction
  | ProductChangePriceAction
  | ProductChangeSlugAction
  | ProductLegacySetSkuAction
  | ProductMoveImageToPositionAction
  | ProductPublishAction
  | ProductRemoveAssetAction
  | ProductRemoveFromCategoryAction
  | ProductRemoveImageAction
  | ProductRemovePriceAction
  | ProductRemoveVariantAction
  | ProductRevertStagedChangesAction
  | ProductRevertStagedVariantChangesAction
  | ProductSetAssetCustomFieldAction
  | ProductSetAssetCustomTypeAction
  | ProductSetAssetDescriptionAction
  | ProductSetAssetKeyAction
  | ProductSetAssetSourcesAction
  | ProductSetAssetTagsAction
  | ProductSetAttributeAction
  | ProductSetAttributeInAllVariantsAction
  | ProductSetCategoryOrderHintAction
  | ProductSetDescriptionAction
  | ProductSetDiscountedPriceAction
  | ProductSetImageLabelAction
  | ProductSetKeyAction
  | ProductSetMetaDescriptionAction
  | ProductSetMetaKeywordsAction
  | ProductSetMetaTitleAction
  | ProductSetPriceKeyAction
  | ProductSetPriceModeAction
  | ProductSetPricesAction
  | ProductSetProductPriceCustomFieldAction
  | ProductSetProductPriceCustomTypeAction
  | ProductSetProductVariantKeyAction
  | ProductSetSearchKeywordsAction
  | ProductSetSkuAction
  | ProductSetTaxCategoryAction
  | ProductTransitionStateAction
  | ProductUnpublishAction
/**
 *	A concrete sellable good for which inventory can be tracked. Product Variants are generally mapped to specific SKUs.
 *
 */
export interface ProductVariant {
  /**
   *	A unique, sequential identifier of the Product Variant within the Product.
   *
   *
   */
  readonly id: number
  /**
   *	User-defined unique SKU of the Product Variant.
   *
   *
   */
  readonly sku?: string
  /**
   *	User-defined unique identifier of the ProductVariant.
   *
   *	This is different from [Product](ctp:api:type:Product) `key`.
   *
   *
   */
  readonly key?: string
  /**
   *	The Embedded Prices of the Product Variant.
   *	Cannot contain two Prices of the same Price scope (with same currency, country, Customer Group, Channel, `validFrom` and `validUntil`).
   *
   *
   */
  readonly prices?: Price[]
  /**
   *	Attributes of the Product Variant.
   *
   *
   */
  readonly attributes?: Attribute[]
  /**
   *	Only available when [Price selection](#price-selection) is used.
   *	Cannot be used in a [Query Predicate](ctp:api:type:QueryPredicate).
   *
   *
   */
  readonly price?: Price
  /**
   *	Images of the Product Variant.
   *
   *
   */
  readonly images?: Image[]
  /**
   *	Media assets of the Product Variant.
   *
   *
   */
  readonly assets?: Asset[]
  /**
   *	Set if the Product Variant is tracked by [Inventory](ctp:api:type:InventoryEntry).
   *	Can be used as an optimization to reduce calls to the Inventory service.
   *	May not contain the latest Inventory State (it is [eventually consistent](/general-concepts#eventual-consistency)).
   *
   *
   */
  readonly availability?: ProductVariantAvailability
  /**
   *	`true` if the Product Variant matches the search query.
   *	Only available in response to a [Product Projection Search](ctp:api:type:ProductProjectionSearch) request.
   *
   *
   */
  readonly isMatchingVariant?: boolean
  /**
   *	Only available in response to a [Product Projection Search](ctp:api:type:ProductProjectionSearch) request
   *	with [price selection](ctp:api:type:ProductPriceSelection).
   *	Can be used to sort, [filter](ctp:api:type:ProductProjectionSearchFilterScopedPrice), and facet.
   *
   *
   */
  readonly scopedPrice?: ScopedPrice
  /**
   *	Only available in response to a [Product Projection Search](ctp:api:type:ProductProjectionSearchFilterScopedPrice) request
   *	with [price selection](ctp:api:type:ProductPriceSelection).
   *
   *
   */
  readonly scopedPriceDiscounted?: boolean
}
/**
 *	The [InventoryEntry](ctp:api:type:InventoryEntry) information of the Product Variant. If there is a supply [Channel](ctp:api:type:Channel) for the InventoryEntry, then `channels` is returned. If not, then `isOnStock`, `restockableInDays`, and `quantityOnStock` are returned.
 *
 */
export interface ProductVariantAvailability {
  /**
   *	For each [InventoryEntry](ctp:api:type:InventoryEntry) with a supply Channel, an entry is added to `channels`.
   *
   *
   */
  readonly channels?: ProductVariantChannelAvailabilityMap
  /**
   *	Indicates whether a Product Variant is in stock.
   *
   *
   */
  readonly isOnStock?: boolean
  /**
   *	Number of days to restock a Product Variant once it is out of stock.
   *
   *
   */
  readonly restockableInDays?: number
  /**
   *	Number of items of the Product Variant that are in stock.
   *
   *
   */
  readonly availableQuantity?: number
}
export interface ProductVariantChannelAvailability {
  /**
   *	Indicates whether a Product Variant is in stock in a specified [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly isOnStock?: boolean
  /**
   *	Number of days to restock a Product Variant once it is out of stock in a specified [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly restockableInDays?: number
  /**
   *	Number of items of this Product Variant that are in stock in a specified [Channel](ctp:api:type:Channel).
   *
   *
   */
  readonly availableQuantity?: number
  /**
   *	Unique identifier of the [InventoryEntry](ctp:api:type:InventoryEntry).
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the [InventoryEntry](ctp:api:type:InventoryEntry).
   *
   *
   */
  readonly version: number
}
/**
 *	JSON object where the key is a supply [Channel](ctp:api:type:Channel) `id` and the value is the [ProductVariantChannelAvailability](ctp:api:type:ProductVariantChannelAvailability) of the [InventoryEntry](ctp:api:type:InventoryEntry).
 *
 */
export interface ProductVariantChannelAvailabilityMap {
  [key: string]: ProductVariantChannelAvailability
}
/**
 *	Creates a Product Variant when included in the `masterVariant` and `variants` fields of the [ProductDraft](ctp:api:type:ProductDraft).
 *
 */
export interface ProductVariantDraft {
  /**
   *	User-defined unique SKU of the Product Variant.
   *
   *
   */
  readonly sku?: string
  /**
   *	User-defined unique identifier for the ProductVariant.
   *
   *
   */
  readonly key?: string
  /**
   *	The Embedded Prices for the Product Variant.
   *	Each Price must have its unique Price scope (with same currency, country, Customer Group, Channel, `validFrom` and `validUntil`).
   *
   *
   */
  readonly prices?: PriceDraft[]
  /**
   *	Attributes according to the respective [AttributeDefinition](ctp:api:type:AttributeDefinition).
   *
   *
   */
  readonly attributes?: Attribute[]
  /**
   *	Images for the Product Variant.
   *
   *
   */
  readonly images?: Image[]
  /**
   *	Media assets for the Product Variant.
   *
   *
   */
  readonly assets?: AssetDraft[]
}
export interface RangeFacetResult {
  readonly type: 'range'
  /**
   *
   */
  readonly ranges: FacetRange[]
}
export interface SearchKeyword {
  /**
   *	Text to return in the result of a [suggest query](ctp:api:type:ProductSuggestionsSuggestQuery).
   *
   *
   */
  readonly text: string
  /**
   *	If no tokenizer is defined, the `text` is used as a single token.
   *
   *
   */
  readonly suggestTokenizer?: SuggestTokenizer
}
/**
 *	Search keywords are JSON objects primarily used by [Product Suggestions](ctp:api:type:ProductSuggestions), but are also considered for a full text search. The keys are of type [Locale](ctp:api:type:Locale), and the values are an array of [SearchKeyword](ctp:api:type:SearchKeyword).
 *
 */
export interface SearchKeywords {
  [key: string]: SearchKeyword[]
}
export type SuggestTokenizer = CustomTokenizer | WhitespaceTokenizer
/**
 *	Define arbitrary tokens that are used to match the input.
 *
 */
export interface CustomTokenizer {
  readonly type: 'custom'
  /**
   *	Contains custom tokens.
   *
   *
   */
  readonly inputs: string[]
}
export interface Suggestion {
  /**
   *	The suggested text.
   *
   */
  readonly text: string
}
export interface SuggestionResult {
  [key: string]: Suggestion[]
}
export interface TermFacetResult {
  readonly type: 'terms'
  /**
   *
   */
  readonly dataType: TermFacetResultType
  /**
   *
   */
  readonly missing: number
  /**
   *
   */
  readonly total: number
  /**
   *
   */
  readonly other: number
  /**
   *
   */
  readonly terms: FacetTerm[]
}
export type TermFacetResultType =
  | 'boolean'
  | 'date'
  | 'datetime'
  | 'number'
  | 'text'
  | 'time'
  | string
/**
 *	Creates tokens by splitting the `text` field in [SearchKeyword](ctp:api:type:SearchKeyword) by whitespaces.
 *
 */
export interface WhitespaceTokenizer {
  readonly type: 'whitespace'
}
/**
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductAddAssetAction {
  readonly action: 'addAsset'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged `assets` are updated. If `false`, both the current and staged `assets` are updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	Value to append.
   *
   *
   */
  readonly asset: AssetDraft
  /**
   *	Position in `assets` where the Asset should be put. When specified, the value must be between `0` and the total number of Assets minus `1`.
   *
   *
   */
  readonly position?: number
}
/**
 *	Either `variantId` or `sku` is required. Produces the [ProductImageAdded](/projects/messages#product-image-added) Message.
 *
 */
export interface ProductAddExternalImageAction {
  readonly action: 'addExternalImage'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	Value to add to `images`.
   *
   *
   */
  readonly image: Image
  /**
   *	If `true`, only the staged `images` is updated. If `false`, both the current and staged `images` is updated.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Adds the given Price to the `prices` array of the [ProductVariant](ctp:api:type:ProductVariant).
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductAddPriceAction {
  readonly action: 'addPrice'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	Embedded Price to add to the Product Variant.
   *
   *
   */
  readonly price: PriceDraft
  /**
   *	If `true`, only the staged `prices` is updated. If `false`, both the current and staged `prices` are updated.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Produces the [ProductAddedToCategory](/projects/messages#product-added-to-category) Message.
 */
export interface ProductAddToCategoryAction {
  readonly action: 'addToCategory'
  /**
   *	The Category to add.
   *
   *
   */
  readonly category: CategoryResourceIdentifier
  /**
   *	A string representing a number between 0 and 1. Must start with `0.` and cannot end with `0`. If empty, any existing value will be removed.
   *
   *
   */
  readonly orderHint?: string
  /**
   *	If `true`, only the staged `categories` and `categoryOrderHints` are updated. If `false`, both the current and staged `categories` and `categoryOrderHints` are updated.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductAddVariantAction {
  readonly action: 'addVariant'
  /**
   *	Value to set. Must be unique.
   *
   *
   */
  readonly sku?: string
  /**
   *	Value to set. Must be unique.
   *
   *
   */
  readonly key?: string
  /**
   *	Embedded Prices for the Product Variant.
   *
   *
   */
  readonly prices?: PriceDraft[]
  /**
   *	Images for the Product Variant.
   *
   *
   */
  readonly images?: Image[]
  /**
   *	Attributes for the Product Variant.
   *
   */
  readonly attributes?: Attribute[]
  /**
   *	If `true` the new Product Variant is only staged. If `false` the new Product Variant is both current and staged.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	Media assets for the Product Variant.
   *
   *
   */
  readonly assets?: AssetDraft[]
}
/**
 *	Either `variantId` or `sku` is required. The Asset to update must be specified using either `assetId` or `assetKey`.
 *
 */
export interface ProductChangeAssetNameAction {
  readonly action: 'changeAssetName'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Asset is updated. If `false`, both the current and staged Asset is updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The `id` of the Asset to update.
   *
   *
   */
  readonly assetId?: string
  /**
   *	The `key` of the Asset to update.
   *
   *
   */
  readonly assetKey?: string
  /**
   *	New value to set. Must not be empty.
   *
   *
   */
  readonly name: LocalizedString
}
/**
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductChangeAssetOrderAction {
  readonly action: 'changeAssetOrder'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged `assets` is updated. If `false`, both the current and staged `assets` are updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	All existing Asset `id`s of the ProductVariant in the desired new order.
   *
   *
   */
  readonly assetOrder: string[]
}
/**
 *	Assigns the specified Product Variant to the `masterVariant` and removes the same from `variants` at the same time. The current Master Variant becomes part of the `variants` array.
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductChangeMasterVariantAction {
  readonly action: 'changeMasterVariant'
  /**
   *	The `id` of the ProductVariant to become the Master Variant.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to become the Master Variant.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Master Variant is changed. If `false`, both the current and staged Master Variant are changed.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductChangeNameAction {
  readonly action: 'changeName'
  /**
   *	Value to set. Must not be empty.
   *
   *
   */
  readonly name: LocalizedString
  /**
   *	If `true`, only the staged `name` is updated. If `false`, both the current and staged `name` are updated.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductChangePriceAction {
  readonly action: 'changePrice'
  /**
   *	The `id` of the Embedded Price to update.
   *
   *
   */
  readonly priceId: string
  /**
   *	Value to set.
   *
   *
   */
  readonly price: PriceDraft
  /**
   *	If `true`, only the staged Embedded Price is updated. If `false`, both the current and staged Embedded Price are updated.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Produces the [ProductSlugChanged](ctp:api:type:ProductSlugChangedMessage) Message.
 */
export interface ProductChangeSlugAction {
  readonly action: 'changeSlug'
  /**
   *	Value to set. Must not be empty. A Product can have the same slug for different [Locales](ctp:api:type:Locale), but it must be unique across the [Project](ctp:api:type:Project). Must match the pattern `^[A-Za-z0-9_-]{2,256}+$`.
   *
   *
   */
  readonly slug: LocalizedString
  /**
   *	If `true`, only the staged `slug` is updated. If `false`, both the current and staged `slug` are updated.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductLegacySetSkuAction {
  readonly action: 'legacySetSku'
  /**
   *
   */
  readonly sku?: string
  /**
   *
   */
  readonly variantId: number
}
/**
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductMoveImageToPositionAction {
  readonly action: 'moveImageToPosition'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	The URL of the image to update.
   *
   *
   */
  readonly imageUrl: string
  /**
   *	Position in `images` where the image should be moved. Must be between `0` and the total number of images minus `1`.
   *
   *
   */
  readonly position: number
  /**
   *	If `true`, only the staged `images` is updated. If `false`, both the current and staged `images` is updated.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Publishes product data from the Product's staged projection to its current projection.
 *	Produces the [ProductPublished](ctp:api:type:ProductPublishedMessage) Message.
 */
export interface ProductPublishAction {
  readonly action: 'publish'
  /**
   *	`All` or `Prices`
   *
   *
   */
  readonly scope?: ProductPublishScope
}
/**
 *	Either `variantId` or `sku` is required. The Asset to remove must be specified using either `assetId` or `assetKey`.
 *
 */
export interface ProductRemoveAssetAction {
  readonly action: 'removeAsset'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Asset is removed. If `false`, both the current and staged Asset is removed.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The `id` of the Asset to remove.
   *
   *
   */
  readonly assetId?: string
  /**
   *	The `key` of the Asset to remove.
   *
   *
   */
  readonly assetKey?: string
}
/**
 *	Produces the [ProductRemovedFromCategory](ctp:api:type:ProductRemovedFromCategoryMessage) Message.
 */
export interface ProductRemoveFromCategoryAction {
  readonly action: 'removeFromCategory'
  /**
   *	The Category to remove.
   *
   *
   */
  readonly category: CategoryResourceIdentifier
  /**
   *	If `true`, only the staged `categories` and `categoryOrderHints` are removed. If `false`, both the current and staged `categories` and `categoryOrderHints` are removed.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Removes a Product image and deletes it from the Content Delivery Network (external images are not deleted). Deletion from the CDN is not instant, which means the image file itself will stay available for some time after the deletion. Either `variantId` or `sku` is required.
 *
 */
export interface ProductRemoveImageAction {
  readonly action: 'removeImage'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	The URL of the image to remove.
   *
   *
   */
  readonly imageUrl: string
  /**
   *	If `true`, only the staged image is removed. If `false`, both the current and staged image is removed.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductRemovePriceAction {
  readonly action: 'removePrice'
  /**
   *	The `id` of the Embedded Price to remove.
   *
   *
   */
  readonly priceId: string
  /**
   *	If `true`, only the staged Embedded Price is removed. If `false`, both the current and staged Embedded Price are removed.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Either `id` or `sku` is required.
 *	Produces the [ProductVariantDeleted](ctp:api:type:ProductVariantDeletedMessage) Message.
 *	If the Product Variant to remove is part of a [ProductSelectionAssignment](ctp:api:type:ProductSelectionAssignment)
 *	its SKU will be automatically removed from the respective [ProductVariantSelection](ctp:api:type:ProductVariantSelection).
 *
 */
export interface ProductRemoveVariantAction {
  readonly action: 'removeVariant'
  /**
   *	The `id` of the ProductVariant to remove.
   *
   *
   */
  readonly id?: number
  /**
   *	The `sku` of the ProductVariant to remove.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged ProductVariant is removed. If `false`, both the current and staged ProductVariant is removed.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Reverts the staged version of a Product to the current version. Produces the [ProductRevertedStagedChanges](ctp:api:type:ProductRevertedStagedChangesMessage) Message.
 *
 */
export interface ProductRevertStagedChangesAction {
  readonly action: 'revertStagedChanges'
}
/**
 *	Reverts the staged version of a ProductVariant to the current version.
 *
 */
export interface ProductRevertStagedVariantChangesAction {
  readonly action: 'revertStagedVariantChanges'
  /**
   *	The `id` of the ProductVariant to revert.
   *
   *
   */
  readonly variantId: number
}
/**
 *	Either `variantId` or `sku` is required. The [Asset](ctp:api:type:Asset) to update must be specified using either `assetId` or `assetKey`.
 *
 */
export interface ProductSetAssetCustomFieldAction {
  readonly action: 'setAssetCustomField'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Asset is updated. If `false`, both the current and staged Asset is updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The `id` of the Asset to update.
   *
   *
   */
  readonly assetId?: string
  /**
   *	The `key` of the Asset to update.
   *
   *
   */
  readonly assetKey?: string
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
/**
 *	Either `variantId` or `sku` is required. The [Asset](ctp:api:type:Asset) to update must be specified using either `assetId` or `assetKey`.
 *
 */
export interface ProductSetAssetCustomTypeAction {
  readonly action: 'setAssetCustomType'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Asset is updated. If `false`, both the current and staged Asset is updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The `id` of the Asset to update.
   *
   *
   */
  readonly assetId?: string
  /**
   *	The `key` of the Asset to update.
   *
   *
   */
  readonly assetKey?: string
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Asset with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Asset.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Asset.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	Either `variantId` or `sku` is required. The [Asset](ctp:api:type:Asset) to update must be specified using either `assetId` or `assetKey`.
 *
 */
export interface ProductSetAssetDescriptionAction {
  readonly action: 'setAssetDescription'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Asset is updated. If `false`, both the current and staged Asset is updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The `id` of the Asset to update.
   *
   *
   */
  readonly assetId?: string
  /**
   *	The `key` of the Asset to update.
   *
   *
   */
  readonly assetKey?: string
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly description?: LocalizedString
}
/**
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductSetAssetKeyAction {
  readonly action: 'setAssetKey'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Asset is updated. If `false`, both the current and staged Asset is updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The `id` of the Asset to update.
   *
   *
   */
  readonly assetId: string
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly assetKey?: string
}
/**
 *	Either `variantId` or `sku` is required. The [Asset](ctp:api:type:Asset) to update must be specified using either `assetId` or `assetKey`.
 *
 */
export interface ProductSetAssetSourcesAction {
  readonly action: 'setAssetSources'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Asset is updated. If `false` both the current and staged Asset is updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The `id` of the Asset to update.
   *
   *
   */
  readonly assetId?: string
  /**
   *	The `key` of the Asset to update.
   *
   *
   */
  readonly assetKey?: string
  /**
   *	Value to set.
   *
   *
   */
  readonly sources: AssetSource[]
}
/**
 *	Either `variantId` or `sku` is required. The Asset to update must be specified using either `assetId` or `assetKey`.
 *
 */
export interface ProductSetAssetTagsAction {
  readonly action: 'setAssetTags'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged Asset is updated. If `false`, both the current and staged Asset is updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	The `id` of the Asset to update.
   *
   *
   */
  readonly assetId?: string
  /**
   *	The `key` of the Asset to update.
   *
   *
   */
  readonly assetKey?: string
  /**
   *	Keywords for categorizing and organizing Assets.
   *
   *
   */
  readonly tags?: string[]
}
/**
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductSetAttributeAction {
  readonly action: 'setAttribute'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	The name of the Attribute to set.
   *
   *
   */
  readonly name: string
  /**
   *	Value to set for the Attribute. If empty, any existing value will be removed.
   *
   *	The [AttributeType](ctp:api:type:AttributeType) determines the format of the Attribute `value` to be provided:
   *
   *	- For [Enum Type](ctp:api:type:AttributeEnumType) and [Localized Enum Type](ctp:api:type:AttributeLocalizedEnumType),
   *	  use the `key` of the [Plain Enum Value](ctp:api:type:AttributePlainEnumValue) or [Localized Enum Value](ctp:api:type:AttributeLocalizedEnumValue) objects,
   *	  or the complete objects as `value`.
   *	- For [Localizable Text Type](ctp:api:type:AttributeLocalizableTextType), use the [LocalizedString](ctp:api:type:LocalizedString) object as `value`.
   *	- For [Money Type](ctp:api:type:AttributeMoneyType) Attributes, use the [Money](ctp:api:type:Money) object as `value`.
   *	- For [Set Type](ctp:api:type:AttributeSetType) Attributes, use the entire `set` object  as `value`.
   *	- For [Nested Type](ctp:api:type:AttributeNestedType) Attributes, use the list of values of all Attributes of the nested Product as `value`.
   *	- For [Reference Type](ctp:api:type:AttributeReferenceType) Attributes, use the [Reference](ctp:api:type:Reference) object as `value`.
   *
   *
   */
  readonly value?: any
  /**
   *	If `true`, only the staged Attribute is set. If `false`, both current and staged Attribute is set.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Adds, removes, or changes a Product Attribute in all Product Variants at the same time.
 *	This action is useful for setting values for Attributes with the [Constraint](ctp:api:type:AttributeConstraintEnum) `SameForAll`.
 */
export interface ProductSetAttributeInAllVariantsAction {
  readonly action: 'setAttributeInAllVariants'
  /**
   *	The name of the Attribute to set.
   *
   *
   */
  readonly name: string
  /**
   *	Value to set for the Attributes. If empty, any existing value will be removed.
   *
   *	The [AttributeType](ctp:api:type:AttributeType) determines the format of the Attribute `value` to be provided:
   *
   *	- For [Enum Type](ctp:api:type:AttributeEnumType) and [Localized Enum Type](ctp:api:type:AttributeLocalizedEnumType),
   *	  use the `key` of the [Plain Enum Value](ctp:api:type:AttributePlainEnumValue) or [Localized Enum Value](ctp:api:type:AttributeLocalizedEnumValue) objects,
   *	  or the complete objects as `value`.
   *	- For [Localizable Text Type](ctp:api:type:AttributeLocalizableTextType), use the [LocalizedString](ctp:api:type:LocalizedString) object as `value`.
   *	- For [Money Type](ctp:api:type:AttributeMoneyType) Attributes, use the [Money](ctp:api:type:Money) object as `value`.
   *	- For [Set Type](ctp:api:type:AttributeSetType) Attributes, use the entire `set` object  as `value`.
   *	- For [Nested Type](ctp:api:type:AttributeNestedType) Attributes, use the list of values of all Attributes of the nested Product as `value`.
   *	- For [Reference Type](ctp:api:type:AttributeReferenceType) Attributes, use the [Reference](ctp:api:type:Reference) object as `value`.
   *
   *
   */
  readonly value?: any
  /**
   *	If `true`, only the staged Attributes are set. If `false`, both the current and staged Attributes are set.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductSetCategoryOrderHintAction {
  readonly action: 'setCategoryOrderHint'
  /**
   *	The `id` of the Category to add the `orderHint`.
   *
   *
   */
  readonly categoryId: string
  /**
   *	A string representing a number between 0 and 1. Must start with `0.` and cannot end with `0`. If empty, any existing value will be removed.
   *
   *
   */
  readonly orderHint?: string
  /**
   *	If `true`, only the staged `categoryOrderHints` is updated. If `false`, both the current and staged `categoryOrderHints` are updated.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductSetDescriptionAction {
  readonly action: 'setDescription'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	If `true`, only the staged `description` is updated. If `false`, both the current and staged `description` are updated.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Produces the [ProductPriceExternalDiscountSet](ctp:api:type:ProductPriceExternalDiscountSetMessage) Message.
 *
 */
export interface ProductSetDiscountedPriceAction {
  readonly action: 'setDiscountedPrice'
  /**
   *	The `id` of the [Price](ctp:api:type:Price) to set the Discount.
   *
   *
   */
  readonly priceId: string
  /**
   *	If `true`, only the staged Embedded Price is updated. If `false`, both the current and staged Embedded Price are updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	Value to set. If empty, any existing value will be removed.
   *	The referenced [ProductDiscount](ctp:api:type:ProductDiscount) must have the Type `external`, be active, and its predicate must match the referenced Price.
   *
   *
   */
  readonly discounted?: DiscountedPriceDraft
}
/**
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductSetImageLabelAction {
  readonly action: 'setImageLabel'
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The URL of the image to set the label.
   *
   *
   */
  readonly imageUrl: string
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly label?: string
  /**
   *	If `true`, only the staged image is updated. If `false`, both the current and staged image is updated.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductSetKeyAction {
  readonly action: 'setKey'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly key?: string
}
export interface ProductSetMetaDescriptionAction {
  readonly action: 'setMetaDescription'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly metaDescription?: LocalizedString
  /**
   *	If `true`, only the staged `metaDescription` is updated. If `false`, both the current and staged `metaDescription` are updated.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductSetMetaKeywordsAction {
  readonly action: 'setMetaKeywords'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly metaKeywords?: LocalizedString
  /**
   *	If `true`, only the staged `metaKeywords` is updated. If `false`, both the current and staged `metaKeywords` are updated.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductSetMetaTitleAction {
  readonly action: 'setMetaTitle'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly metaTitle?: LocalizedString
  /**
   *	If `true`, only the staged `metaTitle` is updated. If `false`, both the current and staged `metaTitle` are updated.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Sets the key of an [Embedded Price](/projects/products#embedded-price). Produces the [ProductPriceKeySet](ctp:api:type:ProductPriceKeySetMessage) Message.
 *
 */
export interface ProductSetPriceKeyAction {
  readonly action: 'setPriceKey'
  /**
   *	The `id` of the [Price](ctp:api:type:Price) to set the key.
   *
   *
   */
  readonly priceId: string
  /**
   *	If `true`, only the staged [Embedded Price](/projects/products#embedded-price) is updated. If `false`, both the current and staged Embedded Price are updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly key?: string
}
/**
 *	Controls whether the Prices of a Product Variant are embedded into the Product or standalone.
 *
 */
export interface ProductSetPriceModeAction {
  readonly action: 'setPriceMode'
  /**
   *	Specifies which type of Prices should be used when looking up a price for the Product.
   *
   *
   */
  readonly priceMode?: ProductPriceModeEnum
}
/**
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductSetPricesAction {
  readonly action: 'setPrices'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	The Embedded Prices to set.
   *	Each Price must have its unique Price scope (with same currency, country, Customer Group, Channel, `validFrom` and `validUntil`).
   *
   *
   */
  readonly prices: PriceDraft[]
  /**
   *	If `true`, only the staged ProductVariant is updated. If `false`, both the current and staged ProductVariant are updated.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductSetProductPriceCustomFieldAction {
  readonly action: 'setProductPriceCustomField'
  /**
   *	The `id` of the Embedded Price to update.
   *
   *
   */
  readonly priceId: string
  /**
   *	If `true`, only the staged Embedded Price Custom Field is updated. If `false`, both the current and staged Embedded Price Custom Field are updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface ProductSetProductPriceCustomTypeAction {
  readonly action: 'setProductPriceCustomType'
  /**
   *	The `id` of the Embedded Price to update.
   *
   *
   */
  readonly priceId: string
  /**
   *	If `true`, only the staged Embedded Price is updated. If `false`, both the current and staged Embedded Price is updated.
   *
   *
   */
  readonly staged?: boolean
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Price with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Embedded Price.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Embedded Price.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	Either `variantId` or `sku` is required.
 *
 */
export interface ProductSetProductVariantKeyAction {
  readonly action: 'setProductVariantKey'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId?: number
  /**
   *	The `sku` of the ProductVariant to update.
   *
   *
   */
  readonly sku?: string
  /**
   *	Value to set. Must be unique. If empty, any existing value will be removed.
   *
   *
   */
  readonly key?: string
  /**
   *	If `true`, only the staged `key` is set. If `false`, both the current and staged `key` are set.
   *
   *
   */
  readonly staged?: boolean
}
export interface ProductSetSearchKeywordsAction {
  readonly action: 'setSearchKeywords'
  /**
   *	Value to set.
   *
   *
   */
  readonly searchKeywords: SearchKeywords
  /**
   *	If `true`, only the staged `searchKeywords` is updated. If `false`, both the current and staged `searchKeywords` are updated.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	SKU cannot be changed or removed if it is associated with an [InventoryEntry](ctp:api:type:InventoryEntry).
 *	If the SKU to set or unset is part of a [ProductSelectionAssignment](ctp:api:type:ProductSelectionAssignment)
 *	it will be automatically added or removed from the respective [ProductVariantSelection](ctp:api:type:ProductVariantSelection).
 *
 */
export interface ProductSetSkuAction {
  readonly action: 'setSku'
  /**
   *	The `id` of the ProductVariant to update.
   *
   *
   */
  readonly variantId: number
  /**
   *	Value to set. Must be unique. If empty, any existing value will be removed.
   *
   *
   */
  readonly sku?: string
  /**
   *	If `true`, only the staged `sku` is updated. If `false`, both the current and staged `sku` are updated.
   *
   *
   */
  readonly staged?: boolean
}
/**
 *	Cannot be staged. Published Products are immediately updated.
 *
 */
export interface ProductSetTaxCategoryAction {
  readonly action: 'setTaxCategory'
  /**
   *	The Tax Category to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly taxCategory?: TaxCategoryResourceIdentifier
}
/**
 *	If the existing [State](ctp:api:type:State) has set `transitions`, there must be a direct transition to the new State. If `transitions` is not set, no validation is performed. Produces the [ProductStateTransition](ctp:api:type:ProductStateTransitionMessage) Message.
 *
 */
export interface ProductTransitionStateAction {
  readonly action: 'transitionState'
  /**
   *	The State to transition to. If there is no existing State, this must be an initial State.
   *
   *
   */
  readonly state?: StateResourceIdentifier
  /**
   *	If `true`, validations are disabled.
   *
   *
   */
  readonly force?: boolean
}
/**
 *	Removes the current projection of the Product. The staged projection is unaffected. Unpublished Products only appear in query/search results with `staged=false`. Produces the [ProductUnpublished](ctp:api:type:ProductUnpublishedMessage) Message.
 *
 */
export interface ProductUnpublishAction {
  readonly action: 'unpublish'
}
