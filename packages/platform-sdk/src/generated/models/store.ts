/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import { ChannelReference, ChannelResourceIdentifier } from './channel'
import {
  BaseResource,
  CreatedBy,
  LastModifiedBy,
  LocalizedString,
} from './common'
import {
  ProductSelectionReference,
  ProductSelectionResourceIdentifier,
} from './product-selection'
import { StoreCountry } from './store-country'
import {
  CustomFields,
  CustomFieldsDraft,
  FieldContainer,
  TypeResourceIdentifier,
} from './type'

export interface ProductSelectionSetting {
  /**
   *	Reference to a ProductSelection.
   *
   */
  readonly productSelection: ProductSelectionReference
  /**
   *	If `true`, all Products assigned to this Product Selection are part of the Store's assortment.
   *
   */
  readonly active: boolean
}
export interface ProductSelectionSettingDraft {
  /**
   *	Resource Identifier of a ProductSelection.
   *
   */
  readonly productSelection: ProductSelectionResourceIdentifier
  /**
   *	Set to `true` if all Products assigned to the Product Selection should become part of the Store's assortment.
   *
   *
   */
  readonly active?: boolean
}
export interface Store extends BaseResource {
  /**
   *	Unique ID of the Store.
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the Store.
   *
   *
   */
  readonly version: number
  /**
   *	Date and time (UTC) the Store was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the Store was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/general-concepts#events-tracked).
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/general-concepts#events-tracked).
   *
   *
   */
  readonly createdBy?: CreatedBy
  /**
   *	User-defined unique and immutable identifier for the Store.
   *
   *
   */
  readonly key: string
  /**
   *	Name of the Store.
   *
   *
   */
  readonly name?: LocalizedString
  /**
   *	Languages configured for the Store.
   *
   *
   */
  readonly languages: string[]
  /**
   *	Countries defined for the Store.
   *
   *
   */
  readonly countries: StoreCountry[]
  /**
   *	Product Distribution Channels allowed for the Store.
   *
   *
   */
  readonly distributionChannels: ChannelReference[]
  /**
   *	Inventory Supply Channels allowed for the Store.
   *
   *
   */
  readonly supplyChannels: ChannelReference[]
  /**
   *	Controls availability of Products for this Store via Product Selections:
   *
   *	- Leave empty if all Products in the [Project](ctp:api:type:Project) should be available in this Store.
   *	- If only `inactive` Product Selections with `IndividualExclusion` [ProductSelectionMode](ctp:api:type:ProductSelectionMode) are provided, all the Products are availlable in this Store.
   *	- If all the Product Selections provided are `inactive` and there's at least a Product Selection of mode `Individual`, no Product is availlable in this Store.
   *	- If at least an `active` Product Selection is provided, only `active` Product Selections are considered to compute the availlability in this Store.
   *
   */
  readonly productSelections: ProductSelectionSetting[]
  /**
   *	Custom fields for the Store.
   *
   *
   */
  readonly custom?: CustomFields
}
export interface StoreDraft {
  /**
   *	User-defined unique and immutable identifier for the Store.
   *	Keys can only contain alphanumeric characters, underscores, and hyphens.
   *
   *
   */
  readonly key: string
  /**
   *	Name of the Store.
   *
   *
   */
  readonly name?: LocalizedString
  /**
   *	Languages defined in [Project](ctp:api:type:Project). Only languages defined in the Project can be used.
   *
   *
   */
  readonly languages?: string[]
  /**
   *	Countries defined for the Store.
   *
   *
   */
  readonly countries?: StoreCountry[]
  /**
   *	ResourceIdentifier of a Channel with `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly distributionChannels?: ChannelResourceIdentifier[]
  /**
   *	ResourceIdentifier of a Channel with `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly supplyChannels?: ChannelResourceIdentifier[]
  /**
   *	Controls availability of Products for this Store via active/inactive Product Selections:
   *
   *	- Leave empty if all Products in the [Project](ctp:api:type:Project) should be available in this Store.
   *	- If only `inactive` Product Selections with `IndividualExclusion` [ProductSelectionMode](ctp:api:type:ProductSelectionMode) are provided, all the Products are available in this Store.
   *	- If all the Product Selections provided are `inactive` and there's at least a Product Selection of mode `Individual`, no Product is available in this Store.
   *	- If at least an `active` Product Selection is provided, only `active` Product Selections are considered to compute the availability in this Store.
   *
   *
   */
  readonly productSelections?: ProductSelectionSettingDraft[]
  /**
   *	Custom fields for the Store.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
}
/**
 *	[Reference](ctp:api:type:Reference) to a [Store](ctp:api:type:Store) by its key.
 *
 */
export interface StoreKeyReference {
  readonly typeId: 'store'
  /**
   *	Unique and immutable key of the referenced [Store](ctp:api:type:Store).
   *
   *
   */
  readonly key: string
}
/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [Store](ctp:api:type:Store).
 *
 */
export interface StorePagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	[Stores](ctp:api:type:Store) matching the query.
   *
   *
   */
  readonly results: Store[]
}
/**
 *	[Reference](ctp:api:type:Reference) to a [Store](ctp:api:type:Store).
 *
 */
export interface StoreReference {
  readonly typeId: 'store'
  /**
   *	Unique ID of the referenced [Store](ctp:api:type:Store).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded Store. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for Stores.
   *
   *
   */
  readonly obj?: Store
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Store](ctp:api:type:Store). Either `id` or `key` is required. If both are set, an [InvalidJsonInput](/../api/errors#invalidjsoninput) error is returned.
 *
 */
export interface StoreResourceIdentifier {
  readonly typeId: 'store'
  /**
   *	Unique ID of the referenced [Store](ctp:api:type:Store). Required if `key` is absent.
   *
   *
   */
  readonly id?: string
  /**
   *	Unique key of the referenced [Store](ctp:api:type:Store). Required if `id` is absent.
   *
   *
   */
  readonly key?: string
}
export interface StoreUpdate {
  /**
   *	Expected version of the Store on which the changes should be applied.
   *	If the expected version does not match the actual version, a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error will be returned.
   *
   *
   */
  readonly version: number
  /**
   *	Update actions to be performed on the Store.
   *
   *
   */
  readonly actions: StoreUpdateAction[]
}
export type StoreUpdateAction =
  | StoreAddCountryAction
  | StoreAddDistributionChannelAction
  | StoreAddProductSelectionAction
  | StoreAddSupplyChannelAction
  | StoreChangeProductSelectionAction
  | StoreRemoveCountryAction
  | StoreRemoveDistributionChannelAction
  | StoreRemoveProductSelectionAction
  | StoreRemoveSupplyChannelAction
  | StoreSetCountriesAction
  | StoreSetCustomFieldAction
  | StoreSetCustomTypeAction
  | StoreSetDistributionChannelsAction
  | StoreSetLanguagesAction
  | StoreSetNameAction
  | StoreSetProductSelectionsAction
  | StoreSetSupplyChannelsAction
/**
 *	This update action produces the [StoreCountriesChanged](ctp:api:type:StoreCountriesChangedMessage) Message.
 *	It has no effect if the given country is already present in a Store.
 *
 */
export interface StoreAddCountryAction {
  readonly action: 'addCountry'
  /**
   *	Value to append to `countries`.
   *
   *
   */
  readonly country: StoreCountry
}
/**
 *	This update action produces the [StoreDistributionChannelsChanged](ctp:api:type:StoreDistributionChannelsChangedMessage) Message.
 *	It has no effect if a given distribution channel is already present in a Store.
 *
 *	Adding a [Channel](ctp:api:type:Channel) without the `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum) returns a [MissingRoleOnChannel](ctp:api:type:MissingRoleOnChannelError) error.
 *
 */
export interface StoreAddDistributionChannelAction {
  readonly action: 'addDistributionChannel'
  /**
   *	Value to append.
   *
   *
   */
  readonly distributionChannel: ChannelResourceIdentifier
}
/**
 *	To make all included Products available to your customers of a given Store, add the [Product Selections](/../api/projects/product-selections) to the respective Store. This action has no effect if the given Product Selection is already present in the Store and has the same `active` flag.
 *
 */
export interface StoreAddProductSelectionAction {
  readonly action: 'addProductSelection'
  /**
   *	Product Selection to add to the Store either activated or deactivated.
   *
   *
   */
  readonly productSelection: ProductSelectionResourceIdentifier
  /**
   *	Set to `true` to make all Products assigned to the referenced Product Selection available in the Store.
   *
   *
   */
  readonly active?: boolean
}
/**
 *	This action has no effect if a given supply channel is already present in a Store.
 *
 *	Adding a supply channel produces the [StoreSupplyChannelsChanged](ctp:api:type:StoreSupplyChannelsChangedMessage) Message.
 *
 *	Adding a [Channel](ctp:api:type:Channel) without the `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum) returns a [MissingRoleOnChannel](ctp:api:type:MissingRoleOnChannelError) error.
 *
 */
export interface StoreAddSupplyChannelAction {
  readonly action: 'addSupplyChannel'
  /**
   *	Value to append.
   *
   *
   */
  readonly supplyChannel: ChannelResourceIdentifier
}
/**
 *	[ProductSelection](ctp:api:type:ProductSelection) in a Store can be activated or deactivated using this update action.
 *
 */
export interface StoreChangeProductSelectionAction {
  readonly action: 'changeProductSelectionActive'
  /**
   *	Current Product Selection of the Store to be activated or deactivated.
   *
   *
   */
  readonly productSelection: ProductSelectionResourceIdentifier
  /**
   *	Set to `true` if all Products assigned to the Product Selection should become part of the Store's assortment.
   *
   *
   */
  readonly active?: boolean
}
/**
 *	This update action produces the [StoreCountriesChanged](ctp:api:type:StoreCountriesChangedMessage) Message.
 *	It has no effect if a given country is not present in a Store.
 *
 */
export interface StoreRemoveCountryAction {
  readonly action: 'removeCountry'
  /**
   *	Value to remove from `countries`.
   *
   *
   */
  readonly country: StoreCountry
}
/**
 *	This update action produces the [StoreDistributionChannelsChanged](ctp:api:type:StoreDistributionChannelsChangedMessage) Message.
 *
 */
export interface StoreRemoveDistributionChannelAction {
  readonly action: 'removeDistributionChannel'
  /**
   *	Value to remove. ResourceIdentifier of a Channel with the `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly distributionChannel: ChannelResourceIdentifier
}
/**
 *	This action has no effect if the given Product Selection is not in the Store.
 *
 */
export interface StoreRemoveProductSelectionAction {
  readonly action: 'removeProductSelection'
  /**
   *	Value to remove. The removed Product Selection is made offline.
   *
   *
   */
  readonly productSelection: ProductSelectionResourceIdentifier
}
/**
 *	This update action produces the [StoreSupplyChannelsChanged](ctp:api:type:StoreSupplyChannelsChangedMessage) Message.
 *
 */
export interface StoreRemoveSupplyChannelAction {
  readonly action: 'removeSupplyChannel'
  /**
   *	Value to remove. ResourceIdentifier of a Channel with the `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum).
   *
   *
   */
  readonly supplyChannel: ChannelResourceIdentifier
}
/**
 *	This update action produces the [StoreCountriesChanged](ctp:api:type:StoreCountriesChangedMessage) Message.
 *
 */
export interface StoreSetCountriesAction {
  readonly action: 'setCountries'
  /**
   *	New value to set.
   *
   *
   */
  readonly countries?: StoreCountry[]
}
export interface StoreSetCustomFieldAction {
  readonly action: 'setCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface StoreSetCustomTypeAction {
  readonly action: 'setCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the Store with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the Store.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Store.
   *
   *
   */
  readonly fields?: FieldContainer
}
/**
 *	This update action produces the [StoreDistributionChannelsChanged](ctp:api:type:StoreDistributionChannelsChangedMessage) Message.
 *
 *	Setting a [Channel](ctp:api:type:Channel) without the `ProductDistribution` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum) returns a [MissingRoleOnChannel](ctp:api:type:MissingRoleOnChannelError) error.
 *
 */
export interface StoreSetDistributionChannelsAction {
  readonly action: 'setDistributionChannels'
  /**
   *	Value to set.
   *	If not defined, the Store's `distributionChannels` are unset.
   *
   *
   */
  readonly distributionChannels?: ChannelResourceIdentifier[]
}
/**
 *	This update action produces the [StoreLanguagesChanged](ctp:api:type:StoreLanguagesChangedMessage) Message.
 *	Adding a language other than the ones defined in the [Project](ctp:api:type:Project) returns a [ProjectNotConfiguredForLanguages](ctp:api:type:ProjectNotConfiguredForLanguagesError) error.
 *
 */
export interface StoreSetLanguagesAction {
  readonly action: 'setLanguages'
  /**
   *	Value to set.
   *
   *
   */
  readonly languages?: string[]
}
/**
 *	This update action produces the [StoreNameSet](ctp:api:type:StoreNameSetMessage) Message.
 *
 */
export interface StoreSetNameAction {
  readonly action: 'setName'
  /**
   *	Value to set.
   *
   *
   */
  readonly name?: LocalizedString
}
/**
 *	Instead of adding or removing [Product Selections](/../api/projects/product-selections) individually, you can also change all the Store's Product Selections in one go using this update action. The Store will only contain the Product Selections specified in the request.
 *
 */
export interface StoreSetProductSelectionsAction {
  readonly action: 'setProductSelections'
  /**
   *	Value to set.
   *
   *	- If provided, Product Selections for which `active` is set to `true` are available in the Store.
   *	- If not provided or provided as empty array, the action removes all Product Selections from this Store, meaning all Products in the [Project](ctp:api:type:Project) are available in this Store.
   *
   *
   */
  readonly productSelections?: ProductSelectionSettingDraft[]
}
/**
 *	Setting a supply channel produces the [StoreSupplyChannelsChanged](ctp:api:type:StoreSupplyChannelsChangedMessage) Message.
 *
 *	Setting a [Channel](ctp:api:type:Channel) without the `InventorySupply` [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum) returns a [MissingRoleOnChannel](ctp:api:type:MissingRoleOnChannelError) error.
 *
 */
export interface StoreSetSupplyChannelsAction {
  readonly action: 'setSupplyChannels'
  /**
   *	Value to set.
   *	If not defined, the Store's `supplyChannels` are unset.
   *
   *
   */
  readonly supplyChannels?: ChannelResourceIdentifier[]
}
