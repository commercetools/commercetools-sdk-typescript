/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

import {
  CartDiscountReference,
  CartDiscountResourceIdentifier,
} from './cart-discount'
import {
  BaseResource,
  CreatedBy,
  LastModifiedBy,
  LocalizedString,
  Reference,
} from './common'
import {
  CustomFields,
  CustomFieldsDraft,
  FieldContainer,
  TypeResourceIdentifier,
} from './type'

export interface DiscountCode extends BaseResource {
  /**
   *	Unique identifier of the DiscountCode.
   *
   *
   */
  readonly id: string
  /**
   *	Current version of the DiscountCode.
   *
   *
   */
  readonly version: number
  /**
   *	Date and time (UTC) the DiscountCode was initially created.
   *
   *
   */
  readonly createdAt: string
  /**
   *	Date and time (UTC) the DiscountCode was last updated.
   *
   *
   */
  readonly lastModifiedAt: string
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly lastModifiedBy?: LastModifiedBy
  /**
   *	Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
   *
   *
   */
  readonly createdBy?: CreatedBy
  /**
   *	Name of the DiscountCode.
   *
   *
   */
  readonly name?: LocalizedString
  /**
   *	Description of the DiscountCode.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	User-defined unique identifier of the DiscountCode [added to the Cart](/../api/projects/carts#add-discountcode) to apply the related [CartDiscounts](ctp:api:type:CartDiscount).
   *
   *
   */
  readonly code: string
  /**
   *	Reference to CartDiscounts that can be applied to the Cart once the DiscountCode is applied.
   *
   *
   */
  readonly cartDiscounts: CartDiscountReference[]
  /**
   *	DiscountCode can only be applied to Carts that match this predicate.
   *
   *
   */
  readonly cartPredicate?: string
  /**
   *	Indicates if the DiscountCode is active and can be applied to the Cart.
   *
   *
   */
  readonly isActive: boolean
  /**
   *	Array generated from the Cart predicate.
   *	It contains the references of all the resources that are addressed in the predicate.
   *
   *
   */
  readonly references: Reference[]
  /**
   *	Number of times the DiscountCode can be applied.
   *	DiscountCode application is counted at the time of Order creation or edit. However, Order cancellation or deletion does not decrement the count.
   *
   *
   */
  readonly maxApplications?: number
  /**
   *	Number of times the DiscountCode can be applied per Customer (anonymous Carts are not supported).
   *	DiscountCode application is counted at the time of Order creation or edit. However, Order cancellation or deletion does not decrement the count.
   *
   *
   */
  readonly maxApplicationsPerCustomer?: number
  /**
   *	Custom Fields of the DiscountCode.
   *
   *
   */
  readonly custom?: CustomFields
  /**
   *	Groups to which the DiscountCode belongs to.
   *
   *
   */
  readonly groups: string[]
  /**
   *	Date and time (UTC) from which the DiscountCode is effective.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Date and time (UTC) until which the DiscountCode is effective.
   *
   *
   */
  readonly validUntil?: string
  /**
   *	Used and managed by the API and must not be used in customer logic.
   *	The value can change at any time due to internal and external factors.
   *
   *
   */
  readonly applicationVersion?: number
}
export interface DiscountCodeDraft {
  /**
   *	Name of the DiscountCode.
   *
   *
   */
  readonly name?: LocalizedString
  /**
   *	Description of the DiscountCode.
   *
   *
   */
  readonly description?: LocalizedString
  /**
   *	User-defined unique identifier for the DiscountCode that can be [added to the Cart](/../api/projects/carts#add-discountcode) to apply the related [CartDiscounts](ctp:api:type:CartDiscount).
   *	It cannot be modified after the DiscountCode is created.
   *
   *
   */
  readonly code: string
  /**
   *	Specify what CartDiscounts the API applies when you add the DiscountCode to the Cart.
   *
   *
   */
  readonly cartDiscounts: CartDiscountResourceIdentifier[]
  /**
   *	DiscountCode can only be applied to Carts that match this predicate.
   *
   *
   */
  readonly cartPredicate?: string
  /**
   *	Only active DiscountCodes can be applied to the Cart.
   *
   *
   */
  readonly isActive?: boolean
  /**
   *	Number of times the DiscountCode can be applied.
   *
   *
   */
  readonly maxApplications?: number
  /**
   *	Number of times the DiscountCode can be applied per Customer.
   *
   *
   */
  readonly maxApplicationsPerCustomer?: number
  /**
   *	Custom Fields for the DiscountCode.
   *
   *
   */
  readonly custom?: CustomFieldsDraft
  /**
   *	Groups to which the DiscountCode will belong to.
   *
   *
   */
  readonly groups?: string[]
  /**
   *	Date and time (UTC) from which the DiscountCode is effective. Must be earlier than `validUntil`.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Date and time (UTC) until which the DiscountCode is effective. Must be later than `validFrom`.
   *
   *
   */
  readonly validUntil?: string
}
/**
 *	[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [DiscountCode](ctp:api:type:DiscountCode).
 *
 */
export interface DiscountCodePagedQueryResponse {
  /**
   *	Number of [results requested](/../api/general-concepts#limit).
   *
   *
   */
  readonly limit: number
  /**
   *	Number of [elements skipped](/../api/general-concepts#offset).
   *
   *
   */
  readonly offset: number
  /**
   *	Actual number of results returned.
   *
   *
   */
  readonly count: number
  /**
   *	Total number of results matching the query.
   *	This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
   *	This field is returned by default.
   *	For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
   *	When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
   *
   *
   */
  readonly total?: number
  /**
   *	[DiscountCodes](ctp:api:type:DiscountCode) matching the query.
   *
   *
   */
  readonly results: DiscountCode[]
}
/**
 *	[Reference](ctp:api:type:Reference) to a [DiscountCode](ctp:api:type:DiscountCode).
 *
 */
export interface DiscountCodeReference {
  readonly typeId: 'discount-code'
  /**
   *	Unique identifier of the referenced [DiscountCode](ctp:api:type:DiscountCode).
   *
   *
   */
  readonly id: string
  /**
   *	Contains the representation of the expanded DiscountCode. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for DiscountCodes.
   *
   *
   */
  readonly obj?: DiscountCode
}
/**
 *	[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [DiscountCode](ctp:api:type:DiscountCode).
 *
 */
export interface DiscountCodeResourceIdentifier {
  readonly typeId: 'discount-code'
  /**
   *	Unique identifier of the referenced [DiscountCode](ctp:api:type:DiscountCode). Either `id` or `key` is required.
   *
   *
   */
  readonly id?: string
  /**
   *	User-defined unique identifier of the referenced [DiscountCode](ctp:api:type:DiscountCode). Either `id` or `key` is required.
   *
   *
   */
  readonly key?: string
}
export interface DiscountCodeUpdate {
  /**
   *	Expected version of the DiscountCode on which the changes should be applied.
   *	If the expected version does not match the actual version, a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error is returned.
   *
   *
   */
  readonly version: number
  /**
   *	Update actions to be performed on the DiscountCode.
   *
   *
   */
  readonly actions: DiscountCodeUpdateAction[]
}
export type DiscountCodeUpdateAction =
  | DiscountCodeChangeCartDiscountsAction
  | DiscountCodeChangeGroupsAction
  | DiscountCodeChangeIsActiveAction
  | DiscountCodeSetCartPredicateAction
  | DiscountCodeSetCustomFieldAction
  | DiscountCodeSetCustomTypeAction
  | DiscountCodeSetDescriptionAction
  | DiscountCodeSetMaxApplicationsAction
  | DiscountCodeSetMaxApplicationsPerCustomerAction
  | DiscountCodeSetNameAction
  | DiscountCodeSetValidFromAction
  | DiscountCodeSetValidFromAndUntilAction
  | DiscountCodeSetValidUntilAction
export interface DiscountCodeChangeCartDiscountsAction {
  readonly action: 'changeCartDiscounts'
  /**
   *	New value to set.
   *
   *
   */
  readonly cartDiscounts: CartDiscountResourceIdentifier[]
}
export interface DiscountCodeChangeGroupsAction {
  readonly action: 'changeGroups'
  /**
   *	New value to set. An empty array removes the DiscountCode from all groups.
   *
   *
   */
  readonly groups: string[]
}
export interface DiscountCodeChangeIsActiveAction {
  readonly action: 'changeIsActive'
  /**
   *	New value to set. Set to `true` to activate the DiscountCode for all matching Discounts.
   *
   *
   */
  readonly isActive: boolean
}
export interface DiscountCodeSetCartPredicateAction {
  readonly action: 'setCartPredicate'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   */
  readonly cartPredicate?: string
}
export interface DiscountCodeSetCustomFieldAction {
  readonly action: 'setCustomField'
  /**
   *	Name of the [Custom Field](/../api/projects/custom-fields).
   *
   *
   */
  readonly name: string
  /**
   *	If `value` is absent or `null`, this field will be removed if it exists.
   *	Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
   *	If `value` is provided, it is set for the field defined by `name`.
   *
   *
   */
  readonly value?: any
}
export interface DiscountCodeSetCustomTypeAction {
  readonly action: 'setCustomType'
  /**
   *	Defines the [Type](ctp:api:type:Type) that extends the DiscountCode with [Custom Fields](/../api/projects/custom-fields).
   *	If absent, any existing Type and Custom Fields are removed from the DiscountCode.
   *
   *
   */
  readonly type?: TypeResourceIdentifier
  /**
   *	Sets the [Custom Fields](/../api/projects/custom-fields) fields for the DiscountCode.
   *
   *
   */
  readonly fields?: FieldContainer
}
export interface DiscountCodeSetDescriptionAction {
  readonly action: 'setDescription'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   */
  readonly description?: LocalizedString
}
export interface DiscountCodeSetMaxApplicationsAction {
  readonly action: 'setMaxApplications'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly maxApplications?: number
}
export interface DiscountCodeSetMaxApplicationsPerCustomerAction {
  readonly action: 'setMaxApplicationsPerCustomer'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   *
   */
  readonly maxApplicationsPerCustomer?: number
}
export interface DiscountCodeSetNameAction {
  readonly action: 'setName'
  /**
   *	Value to set. If empty, any existing value will be removed.
   *
   */
  readonly name?: LocalizedString
}
export interface DiscountCodeSetValidFromAction {
  readonly action: 'setValidFrom'
  /**
   *	Value to set that must be earlier than `validUntil`. If empty, any existing value will be removed.
   *
   *
   */
  readonly validFrom?: string
}
export interface DiscountCodeSetValidFromAndUntilAction {
  readonly action: 'setValidFromAndUntil'
  /**
   *	Value to set that must be earlier than `validUntil`. If empty, any existing value will be removed.
   *
   *
   */
  readonly validFrom?: string
  /**
   *	Value to set that must be later than `validFrom`. If empty, any existing value will be removed.
   *
   *
   */
  readonly validUntil?: string
}
export interface DiscountCodeSetValidUntilAction {
  readonly action: 'setValidUntil'
  /**
   *	Value to set that must be later than `validFrom`. If empty, any existing value will be removed.
   *
   *
   */
  readonly validUntil?: string
}
